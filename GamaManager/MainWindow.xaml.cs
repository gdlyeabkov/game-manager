using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using System.Windows.Interop;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Net;
using System.ComponentModel;
using System.Management.Automation;
using System.Collections.ObjectModel;
using System.Web.Script.Serialization;
using System.IO;
using System.Windows.Controls.Primitives;
using MaterialDesignThemes.Wpf;
using System.Windows.Threading;
using GamaManager.Dialogs;
using SocketIOClient;
using Debugger = System.Diagnostics.Debugger;
using System.Windows.Media.Animation;
using System.Collections;
/*using OxyPlot;
using OxyPlot.Series;*/
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections.Specialized;
using Sparrow.Chart;
using ImapX;
using System.Net.Mail;

namespace GamaManager
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public string currentUserId = "";
        private User currentUser = null;
        public Visibility visible;
        public Visibility invisible;
        public Brush friendRequestBackground;
        public bool isAppInit = false;
        public DispatcherTimer timer;
        public int timerHours = 0;
        public SocketIO client;
        public List<int> history;
        public int historyCursor = -1;
        public Brush disabledColor;
        public Brush enabledColor;
        public bool isFullScreenMode = false;
        public string cachedUserProfileId = "";
        public string cachedGroupId = "";
        public byte[] manualAttachment;
        public string manualAttachmentExt;
        public Microsoft.Office.Interop.Word.Document doc = null;
        public Microsoft.Office.Interop.Word.Application wordApplication = null;
        public System.Windows.Xps.Packaging.XpsDocument document = null;
        public ImapClient mailClient = null;
        public bool isFamilyViewMode = false;
        public List<string> chats = new List<string>();
        public DispatcherTimer carouselTimer;
        public bool isYearlyDiscount = false;

        public ObservableCollection<Model> Collection { get; set; }

        public MainWindow(string id)
        {

            PreInit(id);

            InitializeComponent();

            Initialize(id);

            SetStatsChart();

            /*using (LibVLCSharp.Shared.LibVLC libVlc = new LibVLCSharp.Shared.LibVLC())
            using (LibVLCSharp.Shared.MediaPlayer mediaPlayer = new LibVLCSharp.Shared.MediaPlayer(libVlc))
            {
                LibVLCSharp.Shared.Media media = new LibVLCSharp.Shared.Media(libVlc, "screen://", LibVLCSharp.Shared.FromType.FromLocation);
                media.AddOption(":screen-fps=24");
                media.AddOption(":sout=#transcode{vcodec=h264,vb=0,scale=0,acodec=mp4a,ab=128,channels=2,samplerate=44100}:file{dst=testvlc.mp4}");
                media.AddOption(":sout-keep");
                mediaPlayer.Play(media);
                Thread.Sleep(5 * 1000);
                mediaPlayer.Stop();
            }*/

        }

        public void OpenPurchasesHandler (object sender, RoutedEventArgs e)
        {
            OpenPurchases();
        }

        public void OpenPurchases ()
        {
            mainControl.SelectedIndex = 66;
            GetPurchases();
        }

        public void GetPurchases ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/purchases/all/");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PurchasesResponseInfo myobj = (PurchasesResponseInfo)js.Deserialize(objText, typeof(PurchasesResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Purchase> totalPurchases = myobj.purchases;
                            List<Purchase> myPurchases = totalPurchases.Where<Purchase>((Purchase purchase) =>
                            {
                                string purchaseUserId = purchase.user;
                                bool isMyPurchase = purchaseUserId == currentUserId;
                                return isMyPurchase;
                            }).ToList<Purchase>();
                            RowDefinitionCollection purchaseRows = purchases.RowDefinitions;
                            int purchaseRowsCount = purchaseRows.Count;
                            bool isHaveOldPurchases = purchaseRowsCount >= 3;
                            if (isHaveOldPurchases)
                            {
                                UIElementCollection purchasesChildren = purchases.Children;
                                int purchasesChildrenCount = purchasesChildren.Count;
                                int countRemovedChildren = purchasesChildrenCount - 7;
                                purchases.Children.RemoveRange(7, countRemovedChildren);
                                int countRemovedRows = purchaseRowsCount - 2;
                                purchases.RowDefinitions.RemoveRange(2, countRemovedRows);
                            }
                            foreach (Purchase myPurchase in myPurchases)
                            {
                                DateTime myPurchaseDate = myPurchase.date;
                                string myPurchaseMsg = myPurchase.msg;
                                string myPurchaseType = myPurchase.type;
                                int myPurchasePrice = myPurchase.price;
                                int myPurchaseBalance = myPurchase.balance;
                                // string rawMyPurchaseDate = myPurchaseDate.ToString();
                                string rawMyPurchaseDate = myPurchaseDate.ToLongDateString();
                                string rawMyPurchasePrice = myPurchasePrice.ToString();
                                string rawMyPurchaseBalance = myPurchaseBalance.ToString();
                                RowDefinition row = new RowDefinition();
                                row.MinHeight = 50;
                                purchases.RowDefinitions.Add(row);
                                RowDefinitionCollection rows = purchases.RowDefinitions;
                                int rowsCount = rows.Count;
                                int lastRowIndex = rowsCount - 1;
                                TextBlock label = new TextBlock();
                                label.Text = rawMyPurchaseDate;
                                label.Margin = new Thickness(15);
                                purchases.Children.Add(label);
                                Grid.SetRow(label, lastRowIndex);
                                Grid.SetColumn(label, 0);
                                label = new TextBlock();
                                label.Text = myPurchaseMsg;
                                label.Margin = new Thickness(15);
                                purchases.Children.Add(label); 
                                Grid.SetRow(label, lastRowIndex);
                                Grid.SetColumn(label, 1);
                                label = new TextBlock();
                                string labelContent = "";
                                bool isIncreaseAmount = myPurchaseType == "Прямое пополнение";
                                if (isIncreaseAmount)
                                {
                                    labelContent = "Покупка" + Environment.NewLine + "Прямое пополнение";
                                }
                                label.Text = labelContent;
                                label.Margin = new Thickness(15);
                                purchases.Children.Add(label); 
                                Grid.SetRow(label, lastRowIndex);
                                Grid.SetColumn(label, 2);
                                label = new TextBlock();
                                labelContent = rawMyPurchasePrice + " руб.";
                                label.Text = labelContent;
                                label.Margin = new Thickness(15);
                                purchases.Children.Add(label);
                                Grid.SetRow(label, lastRowIndex);
                                Grid.SetColumn(label, 3);
                                label = new TextBlock();
                                // label.Text = rawMyPurchasePrice;
                                labelContent = rawMyPurchasePrice + " руб.";
                                label.Text = labelContent;
                                label.Margin = new Thickness(15);
                                purchases.Children.Add(label);
                                Grid.SetRow(label, lastRowIndex);
                                Grid.SetColumn(label, 4);
                                label = new TextBlock();
                                labelContent = rawMyPurchaseBalance + " руб.";
                                // label.Text = rawMyPurchaseBalance;
                                label.Text = labelContent;
                                label.Margin = new Thickness(15);
                                purchases.Children.Add(label);
                                Grid.SetRow(label, lastRowIndex);
                                Grid.SetColumn(label, 5);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenGameActionsPopupHandler (object sender, RoutedEventArgs e)
        {
            OpenGameActionsPopup();
        }

        public void OpenGameActionsPopup ()
        {
            gameActionsPopup.IsOpen = true;
        }

        public void GetTotalFriendsCount ()
        {
            int countFriends = 0;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = nestedReader.ReadToEnd();
                                    FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<Friend> receivedFriends = myInnerObj.friends;
                                        List<Friend> myFriends = receivedFriends.Where<Friend>((Friend friend) =>
                                        {
                                            return friend.user == currentUserId;
                                        }).ToList<Friend>();

                                        countFriends = myFriends.Count;

                                        string rawCountFriends = countFriends.ToString();
                                        yourCountFriendsLabel.Text = rawCountFriends;

                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void GetMyUserSubsHandler (object sender, TextChangedEventArgs e)
        {
            GetMyUserSubs();
        }

        public void GetFriendsHandler(object sender, TextChangedEventArgs e)
        {
            GetFriends();
        }

        public void GetFriends()
        {
            GetConnectedFriends();
            GetOfflineFriends();
        }

        public void ToggleHelpFeedBackHandler (object sender, RoutedEventArgs e)
        {
            ToggleHelpFeedBack();
        }

        public void ToggleHelpFeedBack ()
        {
            Visibility helpFeedBackVisibility = helpFeedBack.Visibility;
            bool isVisible = helpFeedBackVisibility == visible;
            if (isVisible)
            {
                helpFeedBack.Visibility = invisible;
            }
            else
            {
                helpFeedBack.Visibility = visible;
            }
        }

        public void RemoveScreenShotsHandler (object sender, RoutedEventArgs e)
        {
            RemoveScreenShots();
        }

        public void RemoveScreenShots ()
        {
            UIElementCollection screenShotsContainerChildren = screenShotsContainer.Children;
            UIElement container = screenShotsContainerChildren[2];
            bool isWall = container is StackPanel;
            if (isWall)
            {
                StackPanel wallContainer = ((StackPanel)(container));
                UIElementCollection wallContainerChildren = wallContainer.Children;
                foreach (UIElement wallContainerChild in wallContainerChildren)
                {
                    Canvas screenShot = ((Canvas)(wallContainerChild));
                    UIElementCollection screenShotChildren = screenShot.Children;
                    UIElement rawCheckBox = screenShotChildren[0];
                    CheckBox checkBox = ((CheckBox)(rawCheckBox));
                    object rawIsChecked = checkBox.IsChecked;
                    bool isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        object data = screenShot.DataContext;
                        Dictionary<String, Object> screenShotData = ((Dictionary<String, Object>)(data));
                        object rawPath = screenShotData["path"];
                        string path = ((string)(rawPath));
                        screenShot.Background = null;
                        Stream myStream;
                        try
                        {
                            Thread.Sleep(1);
                            File.Delete(path);
                        }
                        catch (IOException)
                        {
                            MessageBox.Show("Не удается удалить скриншот", "Ошибка");
                        }
                    }
                }
            }
            else
            {
                WrapPanel rowContainer = ((WrapPanel)(container));
                UIElementCollection rowContainerChildren = rowContainer.Children;
                foreach (UIElement rowContainerChild in rowContainerChildren)
                {
                    Canvas screenShot = ((Canvas)(rowContainerChild));
                    UIElementCollection screenShotChildren = screenShot.Children;
                    UIElement rawCheckBox = screenShotChildren[0];
                    CheckBox checkBox = ((CheckBox)(rawCheckBox));
                    object rawIsChecked = checkBox.IsChecked;
                    bool isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        object data = screenShot.DataContext;
                        Dictionary<String, Object> screenShotData = ((Dictionary<String, Object>)(data));
                        object rawPath = screenShotData["path"];
                        string path = ((string)(rawPath));
                        screenShot.Background = null;
                        Stream myStream;
                        try
                        {
                            Thread.Sleep(1);
                            File.Delete(path);
                        }
                        catch (IOException)
                        {
                            MessageBox.Show("Не удается удалить скриншот", "Ошибка");
                        }
                    }
                }
            }
            GetScreenShots("", false);
        }

        public void ToggleContentModeHandler (object sender, RoutedEventArgs e)
        {
            ToggleContentMode();
        }

        public void ToggleContentMode ()
        {
            if (isAppInit)
            {
                int contentTypeIndex = contentControl.SelectedIndex;
                bool isScreenShots = contentTypeIndex == 0;
                bool isIllustrations = contentTypeIndex == 1;
                bool isVideos = contentTypeIndex == 2;
                bool isWorkShop = contentTypeIndex == 3;
                bool isStore = contentTypeIndex == 4;
                bool isCollections = contentTypeIndex == 5;
                bool isManuals = contentTypeIndex == 6;
                if (isScreenShots)
                {
                    // GetScreenShots("", false);
                    object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
                    bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));
                    if (mySelfContentRadioBtnIsChecked)
                    {
                        contentScreenShotsControl.SelectedIndex = 0;
                    }
                    else
                    {
                        contentScreenShotsControl.SelectedIndex = 1;
                    }
                }
                else if (isIllustrations)
                {
                    // GetIllustrationsContent();
                    object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
                    bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));
                    if (mySelfContentRadioBtnIsChecked)
                    {
                        contentIllustrationsControl.SelectedIndex = 0;
                    }
                    else
                    {
                        contentIllustrationsControl.SelectedIndex = 1;
                    }
                }
                else if (isVideos)
                {

                }
                else if (isWorkShop)
                {

                }
                else if (isStore)
                {

                }
                else if (isCollections)
                {

                }
                else if (isManuals)
                {
                    object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
                    bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));
                    if (mySelfContentRadioBtnIsChecked)
                    {
                        SelectManualsContentItem(0);
                    }
                    else
                    {
                        SelectManualsContentItem(1);
                    }
                }
            }
        }

        public void ToggleScreenShotVisibilityHandler (object sender, RoutedEventArgs e)
        {
            ToggleScreenShotVisibility();
        }

        public void ToggleScreenShotVisibility ()
        {
            UIElementCollection screenShotsContainerChildren = screenShotsContainer.Children;
            UIElement container = screenShotsContainerChildren[2];
            bool isWall = container is StackPanel;
            if (isWall)
            {
                StackPanel wallContainer = ((StackPanel)(container));
                UIElementCollection wallContainerChildren = wallContainer.Children;
                foreach (UIElement wallContainerChild in wallContainerChildren)
                {
                    Canvas screenShot = ((Canvas)(wallContainerChild));
                    UIElementCollection screenShotChildren = screenShot.Children;
                    UIElement rawCheckBox = screenShotChildren[0];
                    CheckBox checkBox = ((CheckBox)(rawCheckBox));
                    object rawIsChecked = checkBox.IsChecked;
                    bool isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        object data = screenShot.DataContext;
                        Dictionary<String, Object> screenShotData = ((Dictionary<String, Object>)(data));
                        object rawId = screenShotData["id"];
                        string id = ((string)(rawId));

                    }
                }
            }
            else
            {
                WrapPanel rowContainer = ((WrapPanel)(container));
                UIElementCollection rowContainerChildren = rowContainer.Children;
                foreach (UIElement rowContainerChild in rowContainerChildren)
                {
                    Canvas screenShot = ((Canvas)(rowContainerChild));
                    UIElementCollection screenShotChildren = screenShot.Children;
                    UIElement rawCheckBox = screenShotChildren[0];
                    CheckBox checkBox = ((CheckBox)(rawCheckBox));
                    object rawIsChecked = checkBox.IsChecked;
                    bool isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        object data = screenShot.DataContext;
                        Dictionary<String, Object> screenShotData = ((Dictionary<String, Object>)(data));
                        object rawId = screenShotData["id"];
                        string id = ((string)(rawId));
                        
                        
                    }
                }
            }
            GetScreenShots("", false);
        }


        public void GetOnlineFriendsCount()
        {
            int countOnlineFriends = 0;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = nestedReader.ReadToEnd();
                                    FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<Friend> receivedFriends = myInnerObj.friends;
                                        List<Friend> myFriends = receivedFriends.Where<Friend>((Friend friend) =>
                                        {
                                            return friend.user == currentUserId;
                                        }).ToList<Friend>();

                                        int countFriends = myFriends.Count;

                                        List<string> friendsIds = new List<string>();
                                        foreach (Friend friendInfo in myFriends)
                                        {
                                            string friendId = friendInfo.friend;
                                            friendsIds.Add(friendId);
                                        }
                                        foreach (Friend friendInfo in myFriends)
                                        {
                                            string friendId = friendInfo.friend;
                                            if (friendsIds.Contains(friendId))
                                            {
                                                webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                                webRequest.Method = "GET";
                                                webRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                                                {
                                                    using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                        status = myobj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            User myFriend = myobj.user;
                                                            string name = myFriend.name;
                                                            string userStatus = myFriend.status;
                                                            bool isOnline = userStatus == "online";
                                                            if (isOnline)
                                                            {
                                                                countOnlineFriends++;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            string rawCountOnlineFriends = countOnlineFriends.ToString();
            string yourCountFriendsLabelContent = "Ваши друзья" + rawCountOnlineFriends + "/";
            yourCountOnlineFriendsLabel.Text = yourCountFriendsLabelContent;

        }

        public void OpenChatHandler(object sender, RoutedEventArgs e)
        {
            OpenChat();
        }

        public void OpenChat()
        {
            object openChatBtnData = openChatBtn.DataContext;
            string id = ((string)(openChatBtnData));
            Application app = Application.Current;
            WindowCollection windows = app.Windows;
            IEnumerable<Window> myWindows = windows.OfType<Window>();
            List<Window> chatWindows = myWindows.Where<Window>(window =>
            {
                string windowTitle = window.Title;
                bool isChatWindow = windowTitle == "Чат";
                object windowData = window.DataContext;
                bool isWindowDataExists = windowData != null;
                bool isChatExists = true;
                if (isWindowDataExists && isChatWindow)
                {
                    string localFriend = ((string)(windowData));
                    isChatExists = id == localFriend;
                }
                return isWindowDataExists && isChatWindow && isChatExists;
            }).ToList<Window>();
            int countChatWindows = chatWindows.Count;
            bool isNotOpenedChatWindows = countChatWindows <= 0;
            if (isNotOpenedChatWindows)
            {
                // Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, chats, this);
                Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, this);
                dialog.Show();
            }
        }

        public void GetConnectedFriends()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = nestedReader.ReadToEnd();
                                    FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    onlineFriendsList.Children.Clear();
                                    if (isOkStatus)
                                    {
                                        List<Friend> receivedFriends = myInnerObj.friends;
                                        List<Friend> myFriends = receivedFriends.Where<Friend>((Friend friend) =>
                                        {
                                            return friend.user == currentUserId;
                                        }).ToList<Friend>();

                                        int countFriends = myFriends.Count;

                                        List<string> friendsIds = new List<string>();
                                        foreach (Friend friendInfo in myFriends)
                                        {
                                            string friendId = friendInfo.friend;
                                            friendsIds.Add(friendId);
                                        }
                                        foreach (Friend friendInfo in myFriends)
                                        {
                                            string friendId = friendInfo.friend;
                                            if (friendsIds.Contains(friendId))
                                            {
                                                webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                                webRequest.Method = "GET";
                                                webRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                                                {
                                                    using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                        status = myobj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            User myFriend = myobj.user;
                                                            string name = myFriend.name;
                                                            string userStatus = myFriend.status;
                                                            bool isOnline = userStatus == "online";
                                                            if (isOnline)
                                                            {
                                                                string senderId = myFriend._id;
                                                                string senderName = myFriend.name;
                                                                string insensitiveCaseSenderName = senderName.ToLower();
                                                                string friendBoxContent = friendBox.Text;
                                                                string insensitiveCaseKeywords = friendBoxContent.ToLower();
                                                                bool isFriendFound = insensitiveCaseSenderName.Contains(insensitiveCaseKeywords);
                                                                int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                                                                bool isFilterDisabled = insensitiveCaseKeywordsLength <= 0;
                                                                bool isRequestMatch = isFriendFound || isFilterDisabled;
                                                                if (isRequestMatch)
                                                                {
                                                                    StackPanel friend = new StackPanel();
                                                                    friend.Margin = new Thickness(15);
                                                                    friend.Width = 250;
                                                                    friend.Height = 50;
                                                                    friend.Orientation = Orientation.Horizontal;
                                                                    friend.Background = System.Windows.Media.Brushes.DarkCyan;
                                                                    Image friendIcon = new Image();
                                                                    friendIcon.Width = 50;
                                                                    friendIcon.Height = 50;
                                                                    friendIcon.BeginInit();
                                                                    friendIcon.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                                                    friendIcon.EndInit();
                                                                    friendIcon.ImageFailed += SetDefautAvatarHandler;
                                                                    friend.Children.Add(friendIcon);
                                                                    Separator friendStatus = new Separator();
                                                                    friendStatus.BorderBrush = System.Windows.Media.Brushes.SkyBlue;
                                                                    friendStatus.LayoutTransform = new RotateTransform(90);
                                                                    friend.Children.Add(friendStatus);
                                                                    TextBlock friendNameLabel = new TextBlock();
                                                                    friendNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                                    friendNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                                    friendNameLabel.Width = 75;
                                                                    friendNameLabel.Text = name;
                                                                    friend.Children.Add(friendNameLabel);
                                                                    CheckBox friendCheckBox = new CheckBox();
                                                                    Visibility friendsListManagementVisibility = friendsListManagement.Visibility;
                                                                    bool isVisible = friendsListManagementVisibility == visible;
                                                                    if (isVisible)
                                                                    {
                                                                        friendCheckBox.Visibility = visible;
                                                                    }
                                                                    else
                                                                    {
                                                                        friendCheckBox.Visibility = invisible;
                                                                    }
                                                                    friendCheckBox.Margin = new Thickness(5, 15, 5, 15);
                                                                    friend.Children.Add(friendCheckBox);
                                                                    onlineFriendsList.Children.Add(friend);
                                                                    friend.DataContext = senderId;
                                                                    /*
                                                                    friend.MouseEnter += ShowFriendInfoHandler;
                                                                    friend.MouseLeave += HideFriendInfoHandler;
                                                                    */
                                                                    friend.MouseMove += ShowFriendInfoHandler;
                                                                    mainControl.DataContext = senderId;
                                                                    friend.MouseLeftButtonUp += ReturnToProfileHandler;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void ShowFriendInfoHandler(object sender, RoutedEventArgs e)
        {
            StackPanel friend = ((StackPanel)(sender));
            object friendData = friend.DataContext;
            string friendId = ((string)(friendData));
            ShowFriendInfo(friendId, friend);
        }

        public void ShowFriendInfo(string friendId, StackPanel friend)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            string userStatus = user.status;
                            string userLevel = "Уровень 0";
                            friendInfoPopupAvatar.BeginInit();
                            friendInfoPopupAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + friendId));
                            friendInfoPopupAvatar.EndInit();
                            friendInfoPopupNameLabel.Text = userName;
                            friendInfoPopupStatusLabel.Text = userStatus;
                            friendInfoPopupLevelLabel.Text = userLevel;
                            if (friend.IsMouseOver)
                            {
                                friendInfoPopup.IsOpen = true;
                            }
                            else
                            {
                                friendInfoPopup.IsOpen = false;
                            }
                            friendInfoPopup.PlacementTarget = friend;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void HideFriendInfoHandler(object sender, RoutedEventArgs e)
        {
            HideFriendInfo();
        }

        public void HideFriendInfo()
        {
            friendInfoPopup.IsOpen = false;
        }


        public void GetOfflineFriends()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = nestedReader.ReadToEnd();
                                    FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    offlineFriendsList.Children.Clear();
                                    if (isOkStatus)
                                    {
                                        List<Friend> receivedFriends = myInnerObj.friends;
                                        List<Friend> myFriends = receivedFriends.Where<Friend>((Friend friend) =>
                                        {
                                            return friend.user == currentUserId;
                                        }).ToList<Friend>();
                                        List<string> friendsIds = new List<string>();
                                        foreach (Friend friendInfo in myFriends)
                                        {
                                            string friendId = friendInfo.friend;
                                            friendsIds.Add(friendId);
                                        }
                                        foreach (Friend friendInfo in myFriends)
                                        {
                                            string friendId = friendInfo.friend;
                                            if (friendsIds.Contains(friendId))
                                            {
                                                webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                                webRequest.Method = "GET";
                                                webRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                                                {
                                                    using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                        status = myobj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            User myFriend = myobj.user;
                                                            string name = myFriend.name;
                                                            string userStatus = myFriend.status;
                                                            bool isOffline = userStatus == "offline";
                                                            if (isOffline)
                                                            {
                                                                string senderId = myFriend._id;
                                                                string senderName = myFriend.name;
                                                                string insensitiveCaseSenderName = senderName.ToLower();
                                                                string friendBoxContent = friendBox.Text;
                                                                string insensitiveCaseKeywords = friendBoxContent.ToLower();
                                                                bool isFriendFound = insensitiveCaseSenderName.Contains(insensitiveCaseKeywords);
                                                                int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                                                                bool isFilterDisabled = insensitiveCaseKeywordsLength <= 0;
                                                                bool isRequestMatch = isFriendFound || isFilterDisabled;
                                                                if (isRequestMatch)
                                                                {
                                                                    StackPanel friend = new StackPanel();
                                                                    friend.Margin = new Thickness(15);
                                                                    friend.Width = 250;
                                                                    friend.Height = 50;
                                                                    friend.Orientation = Orientation.Horizontal;
                                                                    friend.Background = System.Windows.Media.Brushes.DarkCyan;
                                                                    Image friendIcon = new Image();
                                                                    friendIcon.Width = 50;
                                                                    friendIcon.Height = 50;
                                                                    friendIcon.BeginInit();
                                                                    friendIcon.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                                                    friendIcon.EndInit();
                                                                    friendIcon.ImageFailed += SetDefautAvatarHandler;
                                                                    friend.Children.Add(friendIcon);
                                                                    Separator friendStatus = new Separator();
                                                                    friendStatus.BorderBrush = System.Windows.Media.Brushes.LightGray;
                                                                    friendStatus.LayoutTransform = new RotateTransform(90);
                                                                    friend.Children.Add(friendStatus);
                                                                    TextBlock friendNameLabel = new TextBlock();
                                                                    friendNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                                    friendNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                                    friendNameLabel.Width = 75;
                                                                    friendNameLabel.Text = name;
                                                                    friend.Children.Add(friendNameLabel);
                                                                    CheckBox friendCheckBox = new CheckBox();
                                                                    Visibility friendsListManagementVisibility = friendsListManagement.Visibility;
                                                                    bool isVisible = friendsListManagementVisibility == visible;
                                                                    if (isVisible)
                                                                    {
                                                                        friendCheckBox.Visibility = visible;
                                                                    }
                                                                    else
                                                                    {
                                                                        friendCheckBox.Visibility = invisible;
                                                                    }
                                                                    friendCheckBox.Margin = new Thickness(5, 15, 5, 15);
                                                                    friend.Children.Add(friendCheckBox);
                                                                    offlineFriendsList.Children.Add(friend);
                                                                    friend.DataContext = senderId;
                                                                    /*
                                                                    friend.MouseEnter += ShowFriendInfoHandler;
                                                                    friend.MouseLeave += HideFriendInfoHandler;
                                                                    */
                                                                    friend.MouseMove += ShowFriendInfoHandler;
                                                                    mainControl.DataContext = senderId;
                                                                    friend.MouseLeftButtonUp += ReturnToProfileHandler;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetFriendsSettings()
        {

            GetFriends();

            GetTotalFriendsCount();

            GetOnlineFriendsCount();

            GetAddFriendInfo();

            GetFriendRequestsForMe();

            GetFriendRequestsFromMe();

            GetUserName();

            GetGroups();

            GetGroupRequestsForMe();

            GetSearchedGroups();

        }

        public void GetAddFriendInfo()
        {
            myFriendCodeBox.Text = currentUserId;
            addFriendRequestLinkBox.Text = "http://localhost:4000/?friend=" + currentUserId;
        }

        public void GetSearchedGroups()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GroupsResponseInfo myObj = (GroupsResponseInfo)js.Deserialize(objText, typeof(GroupsResponseInfo));
                        string status = myObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            searchedGroups.Children.Clear();
                            List<Group> totalGroups = myObj.groups;
                            foreach (Group group in totalGroups)
                            {
                                string groupId = group._id;
                                string name = group.name;
                                string insensitiveCaseName = name.ToLower();
                                string searchedGroupsBoxContent = searchedGroupsBox.Text;
                                string insensitiveCaseSearchedGroupsBoxContent = searchedGroupsBoxContent.ToLower();
                                int insensitiveCaseNameLength = insensitiveCaseName.Length;
                                bool isMatch = insensitiveCaseName.Contains(insensitiveCaseSearchedGroupsBoxContent);
                                bool isBoxEmpty = insensitiveCaseNameLength <= 0;
                                bool isAddGroup = isMatch || isBoxEmpty;
                                if (isAddGroup)
                                {
                                    StackPanel localGroup = new StackPanel();
                                    localGroup.Margin = new Thickness(15);
                                    localGroup.Height = 50;
                                    localGroup.Background = System.Windows.Media.Brushes.LightGray;
                                    TextBlock localGroupNameLabel = new TextBlock();
                                    localGroupNameLabel.FontSize = 20;
                                    localGroupNameLabel.Margin = new Thickness(15);
                                    localGroupNameLabel.Text = name;
                                    localGroup.Children.Add(localGroupNameLabel);
                                    searchedGroups.Children.Add(localGroup);
                                    localGroup.DataContext = groupId;
                                    localGroup.MouseLeftButtonUp += SelectGroupHandler;
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenAddIllustrationPageHandler(object sender, RoutedEventArgs e)
        {
            OpenAddIllustrationPage();
        }

        public void OpenAddIllustrationPage()
        {
            illustrationGameSelector.Items.Clear();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            int currentGamesCount = currentGames.Count;
            bool isHaveGames = currentGamesCount >= 1;
            foreach (Game currentGame in currentGames)
            {
                string currentGameId = currentGame.id;
                string currentGameName = currentGame.name;
                ComboBoxItem illustrationGameSelectorItem = new ComboBoxItem();
                illustrationGameSelectorItem.Content = currentGameName;
                illustrationGameSelectorItem.DataContext = currentGameId;
                illustrationGameSelector.Items.Add(illustrationGameSelectorItem);
            }
            if (isHaveGames)
            {
                illustrationGameSelector.SelectedIndex = 0;
            }
            mainControl.SelectedIndex = 23;
        }

        public void OpenAddManualPageHandler(object sender, RoutedEventArgs e)
        {
            OpenAddManualPage();
        }

        public void OpenAddManualPage()
        {
            manualGameSelector.Items.Clear();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            int currentGamesCount = currentGames.Count;
            bool isHaveGames = currentGamesCount >= 1;
            foreach (Game currentGame in currentGames)
            {
                string currentGameId = currentGame.id;
                string currentGameName = currentGame.name;
                ComboBoxItem manualGameSelectorItem = new ComboBoxItem();
                manualGameSelectorItem.Content = currentGameName;
                manualGameSelectorItem.DataContext = currentGameId;
                manualGameSelector.Items.Add(manualGameSelectorItem);
            }
            if (isHaveGames)
            {
                manualGameSelector.SelectedIndex = 0;
            }
            mainControl.SelectedIndex = 21;
        }

        public void AddManualHandler(object sender, RoutedEventArgs e)
        {
            AddManual();
        }

        public void AddManual()
        {
            if (manualGameSelector.Items.Count >= 1)
            {
                try
                {
                    string manualNameBoxContent = manualNameBox.Text;
                    string manualDescBoxContent = manualDescBox.Text;
                    string manualLang = "";
                    object rawIsChecked = manualLangRuBtn.IsChecked;
                    bool isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        manualLang = "русский";
                    }
                    rawIsChecked = manualLangEngBtn.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        manualLang = "english";
                    }
                    string manualCategories = "";
                    rawIsChecked = manualCategoriesAchievementsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Достижения";
                    }
                    rawIsChecked = manualCategoriesAchievementsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Достижения";
                    }
                    rawIsChecked = manualCategoriesCharactersBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Персонажи";
                    }
                    rawIsChecked = manualCategoriesClassesBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Классы";
                    }
                    rawIsChecked = manualCategoriesCooperativeBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Кооператив";
                    }
                    rawIsChecked = manualCategoriesCraftBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Крафтинг";
                    }
                    rawIsChecked = manualCategoriesModesBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Режимы игры";
                    }
                    rawIsChecked = manualCategoriesTutorialsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Основы игры";
                    }
                    rawIsChecked = manualCategoriesRewardsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Награды";
                    }
                    rawIsChecked = manualCategoriesMapsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Карты или уровни";
                    }
                    rawIsChecked = manualCategoriesSettingsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Модификации или настройки";
                    }
                    rawIsChecked = manualCategoriesMultiplayerBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Мультиплеер";
                    }
                    rawIsChecked = manualCategoriesSecretsBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Секреты";
                    }
                    rawIsChecked = manualCategoriesStoryBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Сюжет или история";
                    }
                    rawIsChecked = manualCategoriesTradeBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Обмен";
                    }
                    rawIsChecked = manualCategoriesSpeedRunBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Прохождения";
                    }
                    rawIsChecked = manualCategoriesWeaponBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Оружие";
                    }
                    rawIsChecked = manualWorkShopBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    if (isChecked)
                    {
                        int manualCategoriesLength = manualCategories.Length;
                        bool isManualCategoriesLengthExists = manualCategoriesLength >= 1;
                        if (isManualCategoriesLengthExists)
                        {
                            manualCategories += "|";
                        }
                        manualCategories += "Мастерская";
                    }
                    rawIsChecked = drmBox.IsChecked;
                    isChecked = ((bool)(rawIsChecked));
                    bool isDrm = false;
                    string rawIsDrm = "false";
                    if (isChecked)
                    {
                        isDrm = true;
                        rawIsDrm = "true";
                    }

                    int manualGameSelectorSelectedIndex = manualGameSelector.SelectedIndex;
                    ItemCollection manualGameSelectorItems = manualGameSelector.Items;
                    object rawManualGameSelectorSelectedItem = manualGameSelectorItems[manualGameSelectorSelectedIndex];
                    ComboBoxItem manualGameSelectorSelectedItem = ((ComboBoxItem)(rawManualGameSelectorSelectedItem));
                    object manualGameSelectorSelectedItemData = manualGameSelectorSelectedItem.DataContext;
                    string gameId = ((string)(manualGameSelectorSelectedItemData));

                    string url = "http://localhost:4000/api/manuals/add/?id=" + currentUserId + @"&title=" + manualNameBoxContent + @"&desc=" + manualDescBoxContent + @"&lang=" + manualLang + @"&categories=" + manualCategories + @"&drm=" + rawIsDrm + @"&ext=" + manualAttachmentExt + @"&game=" + gameId;
                    HttpClient httpClient = new HttpClient();
                    httpClient.DefaultRequestHeaders.Add("User-Agent", "C# App");
                    MultipartFormDataContent form = new MultipartFormDataContent();
                    byte[] imagebytearraystring = manualAttachment;
                    form.Add(new ByteArrayContent(imagebytearraystring, 0, imagebytearraystring.Count()), "profile_pic", "mock.png");
                    HttpResponseMessage response = httpClient.PostAsync(url, form).Result;
                    httpClient.Dispose();

                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/points/increase/?id=" + currentUserId);
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                mainControl.SelectedIndex = 20;
                                GetCommunityInfo();
                                manualNameBox.Text = "";
                                manualDescBox.Text = "";
                                manualPhotoBtn.Content = "Выберите файл";
                                manualCategoriesAchievementsBox.IsChecked = false;
                                manualLangRuBtn.IsChecked = true;
                                manualLangEngBtn.IsChecked = true;
                                manualCategoriesCharactersBox.IsChecked = false;
                                manualCategoriesClassesBox.IsChecked = false;
                                manualCategoriesCooperativeBox.IsChecked = false;
                                manualCategoriesCraftBox.IsChecked = false;
                                manualCategoriesModesBox.IsChecked = false;
                                manualCategoriesTutorialsBox.IsChecked = false;
                                manualCategoriesRewardsBox.IsChecked = false;
                                manualCategoriesMapsBox.IsChecked = false;
                                manualCategoriesSettingsBox.IsChecked = false;
                                manualCategoriesMultiplayerBox.IsChecked = false;
                                manualCategoriesSecretsBox.IsChecked = false;
                                manualCategoriesStoryBox.IsChecked = false;
                                manualCategoriesTradeBox.IsChecked = false;
                                manualCategoriesSpeedRunBox.IsChecked = false;
                                manualCategoriesWeaponBox.IsChecked = false;
                                manualWorkShopBox.IsChecked = false;
                                drmBox.IsChecked = false;
                            }
                        }
                    }

                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
        }

        public void OpenCommunityInfoHandler(object sender, RoutedEventArgs e)
        {
            OpenCommunityInfo();
        }

        public void OpenCommunityInfo()
        {
            mainControl.SelectedIndex = 20;
            GetCommunityInfo();
        }

        public void SelectGroupHandler(object sender, RoutedEventArgs e)
        {
            StackPanel group = ((StackPanel)(sender));
            object groupData = group.DataContext;
            string groupId = ((string)(groupData));
            SelectGroup(groupId);
        }

        public void SelectGroup(string groupId)
        {
            HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
            webRequest.Method = "GET";
            webRequest.UserAgent = ".NET Framework Test Client";
            using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
            {
                using (var reader = new StreamReader(webResponse.GetResponseStream()))
                {
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    string objText = reader.ReadToEnd();
                    GroupResponseInfo myObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                    string status = myObj.status;
                    bool isOkStatus = status == "OK";
                    if (isOkStatus)
                    {
                        Group group = myObj.group;
                        string groupName = group.name;
                        DateTime groupDate = group.date;
                        string rawGroupDate = groupDate.ToLongDateString();
                        string groupLang = group.lang;
                        string groupCountry = group.country;
                        string groupFanPage = group.fanPage;
                        string groupTwitch = group.twitch;
                        string groupYotube = group.youtube;
                        groupNameLabel.Text = groupName;
                        groupDateLabel.Text = rawGroupDate;
                        groupLangLabel.Text = groupLang;
                        groupCountryLabel.Text = groupCountry;
                        groupFanPageLabel.DataContext = groupFanPage;
                        groupTwitchLabel.DataContext = groupTwitch;
                        groupYoutubeLabel.DataContext = groupYotube;
                        HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/relations/all");
                        webRequest.Method = "GET";
                        webRequest.UserAgent = ".NET Framework Test Client";
                        using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                        {
                            using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                            {
                                js = new JavaScriptSerializer();
                                objText = innerReader.ReadToEnd();
                                GroupRelationsResponseInfo myInnerObj = (GroupRelationsResponseInfo)js.Deserialize(objText, typeof(GroupRelationsResponseInfo));

                                status = myInnerObj.status;
                                isOkStatus = status == "OK";
                                if (isOkStatus)
                                {
                                    List<GroupRelation> relations = myInnerObj.relations;
                                    int countGroupUsers = 0;
                                    List<string> relationGroupUserIds = new List<string>();
                                    foreach (GroupRelation relation in relations)
                                    {
                                        string relationUser = relation.user;
                                        string relationGroup = relation.group;
                                        bool isGroupUser = relationGroup == groupId;
                                        if (isGroupUser)
                                        {
                                            countGroupUsers++;
                                            relationGroupUserIds.Add(relationUser);
                                        }
                                    }
                                    string rawCountGroupUsers = countGroupUsers.ToString();
                                    string newLine = Environment.NewLine;
                                    string countGroupUsersLabelContent = rawCountGroupUsers + newLine + "участники";
                                    countGroupUsersLabel.Text = countGroupUsersLabelContent;
                                    bool isMyUserInGroup = relationGroupUserIds.Contains(currentUserId);
                                    bool isMyUserNotInGroup = !isMyUserInGroup;
                                    if (isMyUserNotInGroup)
                                    {
                                        groupJoinBtn.Content = "Присоединиться";
                                        groupJoinBtn.Click -= ExitFromGroupHandler;
                                        groupJoinBtn.Click += JoinToGroupHandler;
                                    }
                                    else
                                    {
                                        groupJoinBtn.Content = "Выйти";
                                        groupJoinBtn.Click -= JoinToGroupHandler;
                                        groupJoinBtn.Click += ExitFromGroupHandler;
                                    }
                                }
                            }
                        }
                        cachedGroupId = groupId;
                        mainControl.SelectedIndex = 19;
                    }
                }
            }
        }

        public void ExitFromGroupHandler(object sender, RoutedEventArgs e)
        {
            ExitFromGroup();
        }

        public void ExitFromGroup()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/relations/remove/?id=" + currentUserId + @"&group=" + cachedGroupId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            string msgContent = "Вы были успешно удалены из группы";
                            GetGroupRequests();
                            GetFriendsSettings();
                            SelectGroup(cachedGroupId);
                            MessageBox.Show(msgContent, "Внимание");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void JoinToGroupHandler(object sender, RoutedEventArgs e)
        {
            JoinToGroup();
        }

        public void JoinToGroup()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/relations/add/?id=" + cachedGroupId + @"&user=" + currentUserId + "&request=" + "mockId");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + cachedGroupId);
                        innerWebRequest.Method = "GET";
                        innerWebRequest.UserAgent = ".NET Framework Test Client";
                        using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                        {
                            using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                            {
                                js = new JavaScriptSerializer();
                                objText = innerReader.ReadToEnd();
                                GroupResponseInfo myInnerObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                status = myInnerObj.status;
                                isOkStatus = status == "OK";
                                if (isOkStatus)
                                {
                                    Group group = myInnerObj.group;
                                    string groupName = group.name;
                                    string msgContent = "Вы были успешно добавлены в группу " + groupName;
                                    GetGroupRequests();
                                    GetFriendsSettings();
                                    SelectGroup(cachedGroupId);
                                    MessageBox.Show(msgContent, "Внимание");
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenLinkHandler(object sender, RoutedEventArgs e)
        {
            TextBlock label = ((TextBlock)(sender));
            object labelData = label.DataContext;
            string link = ((string)(labelData));
            OpenLink(link);
        }

        public void OpenLink(string link)
        {
            System.Diagnostics.Process.Start(new ProcessStartInfo
            {
                FileName = link,
                UseShellExecute = true
            });
        }

        public void GetGroups()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GroupsResponseInfo myObj = (GroupsResponseInfo)js.Deserialize(objText, typeof(GroupsResponseInfo));
                        string status = myObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            groups.Children.Clear();
                            List<Group> totalGroups = myObj.groups;
                            foreach (Group group in totalGroups)
                            {
                                string groupId = group._id;
                                string owner = group.owner;
                                string name = group.name;
                                string insensitiveCaseName = name.ToLower();
                                string groupsBoxContent = groupsBox.Text;
                                string insensitiveCaseGroupsBoxContent = groupsBoxContent.ToLower();
                                int insensitiveCaseNameLength = insensitiveCaseName.Length;
                                bool isMatch = insensitiveCaseName.Contains(insensitiveCaseGroupsBoxContent);
                                bool isBoxEmpty = insensitiveCaseNameLength <= 0;
                                bool isMyGroup = owner == currentUserId;
                                bool isAddGroup = (isMatch || isBoxEmpty) && isMyGroup;
                                if (isAddGroup)
                                {
                                    StackPanel localGroup = new StackPanel();
                                    localGroup.Margin = new Thickness(15);
                                    localGroup.Height = 50;
                                    localGroup.Background = System.Windows.Media.Brushes.LightGray;
                                    TextBlock localGroupNameLabel = new TextBlock();
                                    localGroupNameLabel.FontSize = 20;
                                    localGroupNameLabel.Margin = new Thickness(15);
                                    localGroupNameLabel.Text = name;
                                    localGroup.Children.Add(localGroupNameLabel);
                                    groups.Children.Add(localGroup);
                                    localGroup.DataContext = groupId;
                                    localGroup.MouseLeftButtonUp += SelectGroupHandler;
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetUserName()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myObj.user;
                            string userName = user.name;
                            friendsSettingsUserNameLabel.Text = userName;
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                Debugger.Log(0, "debug", "friend requests: " + exception.Message);
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void GetFriendRequestsFromMe()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendRequestsResponseInfo myobj = (FriendRequestsResponseInfo)js.Deserialize(objText, typeof(FriendRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<FriendRequest> myRequests = new List<FriendRequest>();
                            List<FriendRequest> requests = myobj.requests;
                            foreach (FriendRequest request in requests)
                            {
                                string recepientId = request.friend;
                                bool isRequestForMe = currentUserId == recepientId;
                                bool isMyRequest = !isRequestForMe;
                                if (isMyRequest)
                                {
                                    myRequests.Add(request);
                                }
                            }
                            friendRequestsFromMe.Children.Clear();
                            int countRequestsFromMe = myRequests.Count;
                            bool isHaveRequests = countRequestsFromMe >= 1;
                            if (isHaveRequests)
                            {

                                foreach (FriendRequest myRequest in myRequests)
                                {
                                    string senderId = myRequest.user;
                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + senderId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                User user = myInnerObj.user;
                                                string senderLogin = user.login;
                                                string senderName = user.name;
                                                string insensitiveCaseSenderName = senderName.ToLower();
                                                string friendRequestsFromMeBoxContent = friendRequestsFromMeBox.Text;
                                                string insensitiveCaseKeywords = friendRequestsFromMeBoxContent.ToLower();
                                                bool isFriendFound = insensitiveCaseSenderName.Contains(insensitiveCaseKeywords);
                                                int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                                                bool isFilterDisabled = insensitiveCaseKeywordsLength <= 0;
                                                bool isRequestMatch = isFriendFound || isFilterDisabled;
                                                if (isRequestMatch)
                                                {
                                                    StackPanel friend = new StackPanel();
                                                    friend.Margin = new Thickness(15);
                                                    friend.Width = 250;
                                                    friend.Height = 50;
                                                    friend.Orientation = Orientation.Horizontal;
                                                    friend.Background = System.Windows.Media.Brushes.DarkCyan;
                                                    Image friendIcon = new Image();
                                                    friendIcon.Width = 50;
                                                    friendIcon.Height = 50;
                                                    friendIcon.BeginInit();
                                                    friendIcon.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                                    friendIcon.EndInit();
                                                    friendIcon.ImageFailed += SetDefautAvatarHandler;
                                                    friend.Children.Add(friendIcon);
                                                    Separator friendStatus = new Separator();
                                                    friendStatus.BorderBrush = System.Windows.Media.Brushes.LightGray;
                                                    friendStatus.LayoutTransform = new RotateTransform(90);
                                                    friend.Children.Add(friendStatus);
                                                    TextBlock friendNameLabel = new TextBlock();
                                                    friendNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    friendNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                    friendNameLabel.Text = senderLogin;
                                                    friend.Children.Add(friendNameLabel);
                                                    friendRequestsFromMe.Children.Add(friend);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                TextBlock requestsNotFoundLabel = new TextBlock();
                                requestsNotFoundLabel.Margin = new Thickness(15);
                                requestsNotFoundLabel.FontSize = 18;
                                requestsNotFoundLabel.Text = "Извините, здесь ничего нет.";
                                friendRequestsFromMe.Children.Add(requestsNotFoundLabel);
                            }
                        }
                        else
                        {
                            CloseManager();
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                Debugger.Log(0, "debug", "friend requests: " + exception.Message);
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void PreInit(string id)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + id + @"\save-data.txt";
            string cachePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + id;
            bool isCacheFolderExists = Directory.Exists(cachePath);
            if (isCacheFolderExists)
            {
                JavaScriptSerializer js = new JavaScriptSerializer();
                string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                Settings currentSettings = loadedContent.settings;
                string lang = currentSettings.language;
                System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(lang);
            }
        }

        public void SearchGamesHandler (object sender, RoutedEventArgs e)
        {
            SearchGames();
        }

        public void SearchGames ()
        {
            string searchGamesBoxContent = searchGamesBox.Text;
            string insensitiveCaseSearchGamesBoxContent = searchGamesBoxContent.ToLower();
            int insensitiveCaseSearchGamesBoxContentLength = insensitiveCaseSearchGamesBoxContent.Length;
            bool isFilterDisabled = insensitiveCaseSearchGamesBoxContentLength <= 0;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            searchedGames.Children.Clear();
                            List<GameResponseInfo> totalGames = myobj.games;

                            double sliderValue = searchedGamesPriceSlider.Value;
                            int parsedSliderValue = ((int)(sliderValue));

                            int countFoundedGames = totalGames.Count<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                return true;
                            });
                            string rawCountFoundedGames = countFoundedGames.ToString();
                            int countHiddenGames = totalGames.Count<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                return true;
                            });
                            string rawCountHiddenGames = countHiddenGames.ToString();
                            string searchGameResultsLabelContent = "Результатов по вашему запросу: " + rawCountFoundedGames + ". Некоторые продукты (" + rawCountHiddenGames + ") скрыты согласно вашим настройкам.";
                            searchGameResultsLabel.Text = searchGameResultsLabelContent;

                            bool isFreePrice = parsedSliderValue == 0;
                            bool isBefore150Price = parsedSliderValue == 1;
                            bool isBefore300Price = parsedSliderValue == 2;
                            bool isBefore450Price = parsedSliderValue == 3;
                            bool isBefore600Price = parsedSliderValue == 4;
                            bool isBefore750Price = parsedSliderValue == 5;
                            bool isBefore900Price = parsedSliderValue == 6;
                            bool isBefore1050Price = parsedSliderValue == 7;
                            bool isBefore1200Price = parsedSliderValue == 8;
                            bool isBefore1350Price = parsedSliderValue == 9;
                            bool isBefore1500Price = parsedSliderValue == 10;
                            bool isBefore1650Price = parsedSliderValue == 11;
                            bool isBefore1800Price = parsedSliderValue == 12;
                            bool isAnyPrice = parsedSliderValue == 13;

                            List<string> searchedPlatforms = new List<string>();
                            object rawPlatformIsChecked = searchedGamesWindowsPlatformCheckbox.IsChecked;
                            bool platformIsChecked = ((bool)(rawPlatformIsChecked));
                            if (platformIsChecked)
                            {
                                searchedPlatforms.Add("Windows");
                            }
                            rawPlatformIsChecked = searchedGamesMacOSPlatformCheckbox.IsChecked;
                            platformIsChecked = ((bool)(rawPlatformIsChecked));
                            if (platformIsChecked)
                            {
                                searchedPlatforms.Add("macOS");
                            }
                            rawPlatformIsChecked = searchedGamesLinuxPlatformCheckbox.IsChecked;
                            platformIsChecked = ((bool)(rawPlatformIsChecked));
                            if (platformIsChecked)
                            {
                                searchedPlatforms.Add("Linux");
                            }
                            int countSearchedPlatform = searchedPlatforms.Count;
                            bool isAnyPlatform = countSearchedPlatform == 0;

                            totalGames = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                string totalGamesItemName = totalGamesItem.name;
                                int totalGamesItemPrice = totalGamesItem.price;
                                string totalGamesItemPlatform = totalGamesItem.platform;
                                string insensitiveCaseTotalGamesItemName = totalGamesItemName.ToLower();
                                bool isKeywordsMatch = insensitiveCaseTotalGamesItemName.Contains(insensitiveCaseSearchGamesBoxContent);
                                bool isFilterMatch = isKeywordsMatch || isFilterDisabled;
                                bool isPriceMatch = ((isAnyPrice) || (isBefore150Price && totalGamesItemPrice <= 150) || (isBefore300Price && totalGamesItemPrice <= 300) || (isBefore450Price && totalGamesItemPrice <= 450) || (isBefore600Price && totalGamesItemPrice <= 600) || (isBefore750Price && totalGamesItemPrice <= 750) || (isBefore900Price && totalGamesItemPrice <= 900) || (isBefore1050Price && totalGamesItemPrice <= 1050) || (isBefore1200Price && totalGamesItemPrice <= 1200) || (isBefore1350Price && totalGamesItemPrice <= 1350) || (isBefore1500Price && totalGamesItemPrice <= 1500) || (isBefore1650Price && totalGamesItemPrice <= 1650) || (isBefore1800Price && totalGamesItemPrice <= 1800) || (isFreePrice && totalGamesItemPrice <= 0));
                                bool isPlatformMatch = ((isAnyPlatform || totalGamesItemPlatform == "Любая") || (searchedPlatforms.Contains(totalGamesItemPlatform)));
                                return isFilterMatch && isPriceMatch && isPlatformMatch;
                            }).ToList<GameResponseInfo>();

                            int sortIndex = searchedGamesSortSelector.SelectedIndex;
                            bool isSortByRelevant = sortIndex == 0;
                            bool isSortByDate = sortIndex == 0;
                            bool isSortByName = sortIndex == 2;
                            bool isSortByPrice = sortIndex == 3;
                            bool isSortByPriceDesc = sortIndex == 4;
                            bool isSortByReviews = sortIndex == 5;
                            if (isSortByRelevant)
                            {
                                totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                            }
                            else if (isSortByDate)
                            {
                                totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                            }
                            else if (isSortByName)
                            {
                                totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                            }
                            else if (isSortByPrice)
                            {
                                totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                            }
                            else if (isSortByPriceDesc)
                            {
                                totalGames = totalGames.OrderByDescending((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                            }
                            else if (isSortByReviews)
                            {
                                totalGames = totalGames.OrderBy((GameResponseInfo someGame) => {
                                    string someGameId = someGame._id;
                                    
                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                List<Review> totalReviews = myInnerObj.reviews;
                                                int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                {
                                                    string someReviewGameId = someReview.game;
                                                    bool isCurrentGameReview = someGameId == someReviewGameId;
                                                    return isCurrentGameReview;
                                                });
                                                return countGameReviews;
                                            }
                                            else
                                            {
                                                return 0;
                                            }
                                        }
                                    }

                                }).ToList<GameResponseInfo>();
                            }

                            foreach (GameResponseInfo totalGamesItem in totalGames)
                            {
                                string totalGamesItemName = totalGamesItem.name;
                                int totalGamesItemPrice = totalGamesItem.price;
                                string rawTotalGamesItemPrice = totalGamesItemPrice.ToString();
                                string totalGamesItemPlatform = totalGamesItem.platform;
                                bool isWindows = totalGamesItemPlatform == "Windows";
                                bool isLinux = totalGamesItemPlatform == "Linux";
                                bool isMacOS = totalGamesItemPlatform == "macOS";
                                DateTime totalGamesItemDate = totalGamesItem.date;
                                string rawTotalGamesItemDate = totalGamesItemDate.ToLongDateString();
                                int totalGamesItemDiscount = 0;
                                bool isHaveDiscount = totalGamesItemDiscount != 0;
                                DockPanel searchedGame = new DockPanel();
                                searchedGame.Height = 50;
                                StackPanel searchedGameAside = new StackPanel();
                                searchedGameAside.Orientation = Orientation.Horizontal;
                                Image searchedGameAsideThumbnail = new Image();
                                searchedGameAsideThumbnail.Width = 50;
                                searchedGameAsideThumbnail.Height = 50;
                                searchedGameAsideThumbnail.Margin = new Thickness(15, 5, 15, 5);
                                searchedGameAsideThumbnail.BeginInit();
                                searchedGameAsideThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                searchedGameAsideThumbnail.EndInit();
                                searchedGameAside.Children.Add(searchedGameAsideThumbnail);
                                StackPanel searchedGameAsideInfo = new StackPanel();
                                searchedGameAsideInfo.Margin = new Thickness(15, 5, 15, 5);
                                TextBlock searchedGameAsideInfoNameLabel = new TextBlock();
                                searchedGameAsideInfoNameLabel.Text = totalGamesItemName;
                                searchedGameAsideInfo.Children.Add(searchedGameAsideInfoNameLabel);
                                StackPanel searchedGameAsideInfoFooter = new StackPanel();
                                searchedGameAsideInfoFooter.Orientation = Orientation.Horizontal;
                                if (isWindows)
                                {
                                    Image searchedGameAsideInfoFooterPlatform = new Image();
                                    searchedGameAsideInfoFooterPlatform.Width = 15;
                                    searchedGameAsideInfoFooterPlatform.Height = 15;
                                    searchedGameAsideInfoFooterPlatform.Margin = new Thickness(5);
                                    searchedGameAsideInfoFooterPlatform.BeginInit();
                                    searchedGameAsideInfoFooterPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-social-windows-128.png"));
                                    searchedGameAsideInfoFooterPlatform.EndInit();
                                    searchedGameAsideInfoFooter.Children.Add(searchedGameAsideInfoFooterPlatform);
                                }
                                else if (isLinux)
                                {
                                    Image searchedGameAsideInfoFooterPlatform = new Image();
                                    searchedGameAsideInfoFooterPlatform.Width = 15;
                                    searchedGameAsideInfoFooterPlatform.Height = 15;
                                    searchedGameAsideInfoFooterPlatform.Margin = new Thickness(5);
                                    searchedGameAsideInfoFooterPlatform.BeginInit();
                                    searchedGameAsideInfoFooterPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/proglyphs-free/512/Linux_-_Tux-128.png"));
                                    searchedGameAsideInfoFooterPlatform.EndInit();
                                    searchedGameAsideInfoFooter.Children.Add(searchedGameAsideInfoFooterPlatform);
                                }
                                else if (isMacOS)
                                {
                                    Image searchedGameAsideInfoFooterPlatform = new Image();
                                    searchedGameAsideInfoFooterPlatform.Width = 15;
                                    searchedGameAsideInfoFooterPlatform.Height = 15;
                                    searchedGameAsideInfoFooterPlatform.Margin = new Thickness(5);
                                    searchedGameAsideInfoFooterPlatform.BeginInit();
                                    searchedGameAsideInfoFooterPlatform.Source = new BitmapImage(new Uri(@"https://cdn3.iconfinder.com/data/icons/picons-social/57/16-apple-128.png"));
                                    searchedGameAsideInfoFooterPlatform.EndInit();
                                    searchedGameAsideInfoFooter.Children.Add(searchedGameAsideInfoFooterPlatform);
                                }
                                else
                                {
                                    Image searchedGameAsideInfoFooterPlatform = new Image();
                                    searchedGameAsideInfoFooterPlatform.Width = 15;
                                    searchedGameAsideInfoFooterPlatform.Height = 15;
                                    searchedGameAsideInfoFooterPlatform.Margin = new Thickness(5);
                                    searchedGameAsideInfoFooterPlatform.BeginInit();
                                    searchedGameAsideInfoFooterPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-social-windows-128.png"));
                                    searchedGameAsideInfoFooterPlatform.EndInit();
                                    searchedGameAsideInfoFooter.Children.Add(searchedGameAsideInfoFooterPlatform);
                                    
                                    searchedGameAsideInfoFooterPlatform = new Image();
                                    searchedGameAsideInfoFooterPlatform.Width = 15;
                                    searchedGameAsideInfoFooterPlatform.Height = 15;
                                    searchedGameAsideInfoFooterPlatform.Margin = new Thickness(5);
                                    searchedGameAsideInfoFooterPlatform.BeginInit();
                                    searchedGameAsideInfoFooterPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/proglyphs-free/512/Linux_-_Tux-128.png"));
                                    searchedGameAsideInfoFooterPlatform.EndInit();
                                    searchedGameAsideInfoFooter.Children.Add(searchedGameAsideInfoFooterPlatform);

                                    searchedGameAsideInfoFooterPlatform = new Image();
                                    searchedGameAsideInfoFooterPlatform.Width = 15;
                                    searchedGameAsideInfoFooterPlatform.Height = 15;
                                    searchedGameAsideInfoFooterPlatform.Margin = new Thickness(5);
                                    searchedGameAsideInfoFooterPlatform.BeginInit();
                                    searchedGameAsideInfoFooterPlatform.Source = new BitmapImage(new Uri(@"https://cdn3.iconfinder.com/data/icons/picons-social/57/16-apple-128.png"));
                                    searchedGameAsideInfoFooterPlatform.EndInit();
                                    searchedGameAsideInfoFooter.Children.Add(searchedGameAsideInfoFooterPlatform);
                                }
                                searchedGameAsideInfo.Children.Add(searchedGameAsideInfoFooter);
                                searchedGameAside.Children.Add(searchedGameAsideInfo);
                                searchedGame.Children.Add(searchedGameAside);
                                StackPanel searchedGameArticle = new StackPanel();
                                searchedGameArticle.HorizontalAlignment = HorizontalAlignment.Right;
                                searchedGameArticle.Orientation = Orientation.Horizontal;
                                StackPanel searchedGameArticleInfo = new StackPanel();
                                searchedGameArticleInfo.Margin = new Thickness(15, 5, 15, 5);
                                searchedGameArticleInfo.Orientation = Orientation.Horizontal;
                                TextBlock searchedGameArticleInfoDateLabel = new TextBlock();
                                searchedGameArticleInfoDateLabel.Text = rawTotalGamesItemDate;
                                searchedGameArticleInfoDateLabel.Margin = new Thickness(5, 0, 5, 0);
                                searchedGameArticleInfo.Children.Add(searchedGameArticleInfoDateLabel);
                                PackIcon searchedGameArticleInfoReviewsIcon = new PackIcon();
                                searchedGameArticleInfoReviewsIcon.Kind = PackIconKind.ThumbUp;
                                searchedGameArticleInfoReviewsIcon.Margin = new Thickness(5, 0, 5, 0);
                                searchedGameArticleInfo.Children.Add(searchedGameArticleInfoReviewsIcon);
                                if (isHaveDiscount)
                                {
                                    StackPanel searchedGameArticleInfoDiscount = new StackPanel();
                                    searchedGameArticleInfoDiscount.Background = System.Windows.Media.Brushes.YellowGreen;
                                    searchedGameArticleInfoDiscount.Width = 30;
                                    searchedGameArticleInfoDiscount.Height = 30;
                                    searchedGameArticleInfoDiscount.Margin = new Thickness(5, 0, 5, 0);
                                    TextBlock searchedGameArticleInfoDiscountLabel = new TextBlock();
                                    searchedGameArticleInfoDiscountLabel.Text = "0%";
                                    searchedGameArticleInfoDiscountLabel.TextAlignment = TextAlignment.Center;
                                    searchedGameArticleInfoDiscountLabel.Margin = new Thickness(5);
                                    searchedGameArticleInfoDiscount.Children.Add(searchedGameArticleInfoDiscountLabel);
                                    searchedGameArticleInfo.Children.Add(searchedGameArticleInfoDiscount);
                                }
                                searchedGameArticle.Children.Add(searchedGameArticleInfo);
                                StackPanel searchedGameArticlePrice = new StackPanel();
                                searchedGameArticlePrice.Margin = new Thickness(15, 5, 15, 5);
                                if (isHaveDiscount)
                                {
                                    TextBlock searchedGameArticlePriceDiscountLabel = new TextBlock();
                                    searchedGameArticlePriceDiscountLabel.Text = "0%";
                                    searchedGameArticlePriceDiscountLabel.TextAlignment = TextAlignment.Center;
                                    searchedGameArticlePrice.Children.Add(searchedGameArticlePriceDiscountLabel);
                                }
                                TextBlock searchedGameArticlePriceLabel = new TextBlock();
                                string searchedGameArticlePriceLabelContent = rawTotalGamesItemPrice + " руб.";
                                searchedGameArticlePriceLabel.Text = searchedGameArticlePriceLabelContent;
                                searchedGameArticlePriceLabel.TextAlignment = TextAlignment.Center;
                                searchedGameArticlePrice.Children.Add(searchedGameArticlePriceLabel);
                                searchedGameArticle.Children.Add(searchedGameArticlePrice);
                                searchedGame.Children.Add(searchedGameArticle);
                                searchedGames.Children.Add(searchedGame);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void ClearGameListFilterHandler (object sender, MouseButtonEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            ClearGameListFilter(icon);
        }

        public void ClearGameListFilter (PackIcon icon)
        {
            icon.Visibility = invisible;
            keywordsLabel.Text = "";
        }

        public void Initialize (string id)
        {
            bool isContinue = GetUser(id);
            if (isContinue)
            {
                InitConstants();
                ShowOffers();
                GetGamesStats();
                GetGamesList("");
                GetFriendRequests();
                GetGamesInfo();
                GetUserInfo(currentUserId, true);
                GetEditInfo();
                CheckFriendsCache();
                LoadStartWindow();
                GetOnlineFriends();
                GetDownloads();
                GetContent();
                GetForums("");
                GetGameCollections();
                GetFriendsSettings();
                GetGroupRequests();
                GetRequestsCount();
                GetComments(currentUserId);
                GetCommunityInfo();
                InitializeTray();
                GetExperiments();
                GetAccountSettings();
                InitMail();
                GetFamilyView();
                GetIcons();
                SetCarouselItems();
                GetGameRecommendationsInfo();
                GetAllFriendRecommendations();
                GetLastFriendRecommendations();
                GetPopularGamesForFriends();
                GetGamesByTags();
                GetFriendsForPresent();
                GetNewsNotifications();
                GetFriendActivitySettings();
                GetFriendActivities();
                GetMyActivities();
                GetEquipmentGames();
                GetGameSections();
                InitAddGameSection();
                GetEquipmentInfo();
                GetIconsInfo();
                GetGamesHistory();
                GetMyUserSubs();
                GetHelpInfo();
                GetPossibleFriendScammers();/**/
            }
        }

        public void GetHelpInfo ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/sessions/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GameSessionsResponseInfo myInnerObj = (GameSessionsResponseInfo)js.Deserialize(objText, typeof(GameSessionsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GameSession> sessions = myInnerObj.sessions;
                                        HttpWebRequest gamesWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                        gamesWebRequest.Method = "GET";
                                        gamesWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse gamesWebResponse = (HttpWebResponse)gamesWebRequest.GetResponse())
                                        {
                                            using (var gamesReader = new StreamReader(gamesWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = gamesReader.ReadToEnd();
                                                GamesListResponseInfo myGamesObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                status = myGamesObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    List<GameResponseInfo> games = myGamesObj.games;
                                                    DateTime currentDate = DateTime.Now;
                                                    List<GameSession> mySessions = sessions.Where<GameSession>((GameSession session) =>
                                                    {
                                                        DateTime sessionDate = session.date;
                                                        string reviewUserId = session.user;
                                                        bool isMe = currentUserId == reviewUserId;
                                                        TimeSpan interval = currentDate.Subtract(sessionDate);
                                                        double intervalDays = interval.TotalDays;
                                                        bool isRecentSession = intervalDays <= 14;
                                                        bool isAddSession = isMe && isRecentSession;
                                                        return isAddSession;
                                                    }).Distinct(new GameSessionComparer()).ToList<GameSession>();
                                                    string userName = user.name;
                                                    string helpLabelContent = "С чем вам требуется помощь, " + userName + "?";
                                                    helpLabel.Text = helpLabelContent;
                                                    foreach (GameSession mySession in mySessions)
                                                    {
                                                        string mySessionGameId = mySession.game;
                                                        List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                        {
                                                            string gameId = game._id;
                                                            bool isIdMatches = gameId == mySessionGameId;
                                                            return isIdMatches;
                                                        }).ToList<GameResponseInfo>();
                                                        int gameResultsCount = gameResults.Count;
                                                        bool isHaveResults = gameResultsCount >= 1;
                                                        if (isHaveResults)
                                                        {
                                                            GameResponseInfo result = gameResults[0];
                                                            string resultName = result.name;
                                                            DockPanel game = new DockPanel();
                                                            game.Margin = new Thickness(15);
                                                            game.Background = System.Windows.Media.Brushes.LightGray;
                                                            StackPanel gameAside = new StackPanel();
                                                            gameAside.Margin = new Thickness(15);
                                                            gameAside.Orientation = Orientation.Horizontal;
                                                            gameAside.DataContext = mySessionGameId;
                                                            game.Children.Add(gameAside);
                                                            Image gameAsideThumbnail = new Image();
                                                            gameAsideThumbnail.VerticalAlignment = VerticalAlignment.Center;
                                                            gameAsideThumbnail.Width = 35;
                                                            gameAsideThumbnail.Height = 35;
                                                            gameAsideThumbnail.Margin = new Thickness(15, 0, 15, 0);
                                                            gameAsideThumbnail.BeginInit();
                                                            gameAsideThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + resultName));
                                                            gameAsideThumbnail.EndInit();
                                                            gameAside.Children.Add(gameAsideThumbnail);
                                                            TextBlock gameAsideNameLabel = new TextBlock();
                                                            gameAsideNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                            gameAsideNameLabel.Text = resultName;
                                                            gameAsideNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                                            gameAside.Children.Add(gameAsideNameLabel);
                                                            PackIcon gameIcon = new PackIcon();
                                                            gameIcon.VerticalAlignment = VerticalAlignment.Center;
                                                            gameIcon.Margin = new Thickness(15, 0, 15, 0);
                                                            gameIcon.HorizontalAlignment = HorizontalAlignment.Right;
                                                            gameIcon.Kind = PackIconKind.ChevronRight;
                                                            game.Children.Add(gameIcon);
                                                            helpRecentActivity.Children.Add(game);
                                                            game.DataContext = "41";
                                                            game.MouseLeftButtonUp += ToggleHelpControlHandler;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SendDisapearAmountHelpHandler (object sender, RoutedEventArgs e)
        {
            SendDisapearAmountHelp();
        }

        public void SendDisapearAmountHelp ()
        {

        }

        public void ToggleHelpControlFromBtnHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string rawIndex = btnData.ToString();
            int index = Int32.Parse(rawIndex);
            ToggleHelpControlFromBtn(index);
        }

        public void ToggleHelpControlFromBtn (int index)
        {
            helpControl.SelectedIndex = index;
        }


        public void ToggleHelpControlHandler (object sender, RoutedEventArgs e)
        {
            DockPanel item = ((DockPanel)(sender));
            object itemData = item.DataContext;
            string rawItemData = itemData.ToString();
            int index = Int32.Parse(rawItemData);
            ToggleHelpControl(index, item);
        }

        public void ToggleHelpControl (int index, DockPanel item)
        {
            helpFeedBack.Visibility = invisible;
            bool isGameBreadcrumb = index == 41;
            bool isScammerBreadcrumb = index == 44;
            // bool isIncreaseAmount = index == 13;
            if (isGameBreadcrumb)
            {
                UIElement rawGameItem = item.Children[0];
                StackPanel gameItem = ((StackPanel)(rawGameItem));
                object gameItemData = gameItem.DataContext;
                string gameId = ((string)(gameItemData));
                try
                {
                    HttpWebRequest gamesWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    gamesWebRequest.Method = "GET";
                    gamesWebRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse gamesWebResponse = (HttpWebResponse)gamesWebRequest.GetResponse())
                    {
                        using (var gamesReader = new StreamReader(gamesWebResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            string objText = gamesReader.ReadToEnd();
                            GamesListResponseInfo myGamesObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                            string status = myGamesObj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> games = myGamesObj.games;
                                List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                {
                                    string localGameId = game._id;
                                    bool isIdMatches = gameId == localGameId;
                                    return isIdMatches;
                                }).ToList<GameResponseInfo>();
                                int countResults = gameResults.Count;
                                bool isResultsFound = countResults >= 1;
                                if (isResultsFound)
                                {
                                    GameResponseInfo gameResult = gameResults[0];
                                    string gameResultName = gameResult.name;
                                    string helpGamesAndShotwareBreadcrumbLabelContent = @"Главная > Игры и программное обеспечение > " + gameResultName;
                                    helpGamesAndShotwareBreadcrumbLabel.Text = helpGamesAndShotwareBreadcrumbLabelContent;
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException exception)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            else if (isScammerBreadcrumb)
            {
                UIElement rawScammerItem = item.Children[0];
                StackPanel scammerItem = ((StackPanel)(rawScammerItem));
                object scammerItemData = scammerItem.DataContext;
                string userId = ((string)(scammerItemData));
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            bool isMyFriend = false;
                                            List<Friend> friendRecords = myInnerObj.friends.Where<Friend>((Friend joint) =>
                                            {
                                                string ownerId = joint.user;
                                                isMyFriend = ownerId == currentUserId;
                                                return isMyFriend;
                                            }).ToList<Friend>();
                                            List<string> friendsIds = new List<string>();
                                            foreach (Friend friendRecord in friendRecords)
                                            {
                                                string localFriendId = friendRecord.friend;
                                                friendsIds.Add(localFriendId);
                                            }
                                            User user = myobj.user;
                                            string userName = user.name;
                                            string helpNotifyScammerBreadcrumbLabelContent = "Главная > Сообщить о мошеннике > " + userName;
                                            helpNotifyScammerBreadcrumbLabel.Text = helpNotifyScammerBreadcrumbLabelContent;
                                            scammerNameLabel.Text = userName;
                                            scammerAvatar.BeginInit();
                                            scammerAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + userId));
                                            scammerAvatar.EndInit();
                                            isMyFriend = friendsIds.Contains(userId);
                                            if (isMyFriend)
                                            {
                                                scammerInfoLabel.Text = "В друзьях";
                                            }
                                            else
                                            {
                                                scammerInfoLabel.Text = "";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException exception)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            /*else if (isIncreaseAmount)
            {
                helpFeedBack.Visibility = visible;
            }*/
            helpControl.SelectedIndex = index;
        }

        public void ToggleEquipmentOffersControlHandler (object sender, RoutedEventArgs e)
        {
            TextBlock label = ((TextBlock)(sender));
            object labelData = label.DataContext;
            string rawIndex = labelData.ToString();
            int index = Int32.Parse(rawIndex);
            ToggleEquipmentOffersControl(index);
        }

        public void ToggleEquipmentOffersControlFromHelpHandler (object sender, RoutedEventArgs e)
        {
            DockPanel item = ((DockPanel)(sender));
            object itemData = item.DataContext;
            string rawIndex = itemData.ToString();
            int index = Int32.Parse(rawIndex);
            ToggleEquipmentOffersControlFromHelp(index);
        }

        public void ToggleEquipmentOffersControlFromHelp (int index)
        {
            OpenTradeOffers();
            ToggleEquipmentOffersControl(index);
        }

        public void ToggleEquipmentOffersControl (int index)
        {
            equipmentOffersControl.SelectedIndex = index;
        }

        public void DoComplaintHandler (object sender, RoutedEventArgs e)
        {
            DoComplaint();
        }

        public void DoComplaint ()
        {
            string complaintBoxContent = complaintBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/complaints/add/?id=" + currentUserId + @"&scammer=" + currentUserId + @"&content=" + complaintBoxContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PurchasesResponseInfo myobj = (PurchasesResponseInfo)js.Deserialize(objText, typeof(PurchasesResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            complaintBox.Text = "";
                            helpControl.SelectedIndex = 0;
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetMyUserSubs ()
        {

            string userSubsBoxContent = userSubsBox.Text;
            string insensitiveCaseKeywords = userSubsBoxContent.ToLower();

            myUserSubs.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/subs/all/");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserSubsResponseInfo myobj = (UserSubsResponseInfo)js.Deserialize(objText, typeof(UserSubsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<UserSub> subs = myobj.subs;
                            List<UserSub> mySubs = subs.Where<UserSub>((UserSub userSub) =>
                            {
                                string userSubUserId = userSub.user;
                                bool isMySub = userSubUserId == currentUserId;
                                return isMySub;
                            }).ToList<UserSub>();
                            foreach (UserSub mySub in mySubs)
                            {
                                string userId = mySub.sub;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myobj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            User user = myInnerObj.user;
                                            string name = user.name;

                                            string insensitiveCaseSenderName = name.ToLower();
                                            bool isSubFound = insensitiveCaseSenderName.Contains(insensitiveCaseKeywords);
                                            int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                                            bool isFilterDisabled = insensitiveCaseKeywordsLength <= 0;
                                            bool isSubMatch = isSubFound || isFilterDisabled;
                                            if (isSubMatch)
                                            {
                                                string userStatus = user.status;
                                                StackPanel myUserSub = new StackPanel();
                                                myUserSub.Margin = new Thickness(15);
                                                myUserSub.Width = 250;
                                                myUserSub.Height = 50;
                                                myUserSub.Orientation = Orientation.Horizontal;
                                                myUserSub.Background = System.Windows.Media.Brushes.DarkCyan;
                                                Image myUserSubIcon = new Image();
                                                myUserSubIcon.Width = 50;
                                                myUserSubIcon.Height = 50;
                                                myUserSubIcon.BeginInit();
                                                myUserSubIcon.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                                myUserSubIcon.EndInit();
                                                myUserSubIcon.ImageFailed += SetDefautAvatarHandler;
                                                myUserSub.Children.Add(myUserSubIcon);
                                                Separator myUserSubStatus = new Separator();
                                                myUserSubStatus.BorderBrush = System.Windows.Media.Brushes.SkyBlue;
                                                myUserSubStatus.LayoutTransform = new RotateTransform(90);
                                                myUserSub.Children.Add(myUserSubStatus);
                                                TextBlock myUserSubNameLabel = new TextBlock();
                                                myUserSubNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                myUserSubNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                myUserSubNameLabel.Width = 75;
                                                myUserSubNameLabel.Text = name;
                                                myUserSub.Children.Add(myUserSubNameLabel);
                                                CheckBox myUserSubCheckBox = new CheckBox();
                                                Visibility friendSubsListManagementVisibility = friendSubsListManagement.Visibility;
                                                bool isVisible = friendSubsListManagementVisibility == visible;
                                                if (isVisible)
                                                {
                                                    myUserSubCheckBox.Visibility = visible;
                                                }
                                                else
                                                {
                                                    myUserSubCheckBox.Visibility = invisible;
                                                }
                                                myUserSubCheckBox.Margin = new Thickness(5, 15, 5, 15);
                                                myUserSub.Children.Add(myUserSubCheckBox);
                                                myUserSubs.Children.Add(myUserSub);
                                                myUserSub.DataContext = userId;
                                                myUserSub.MouseMove += ShowFriendInfoHandler;
                                                mainControl.DataContext = userId;
                                                myUserSub.MouseLeftButtonUp += ReturnToProfileHandler;
                                            }
                                        }
                                    }
                                }

                            }
                        }             
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetGamesHistory ()
        {
            try
            {
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/sessions/all");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = innerReader.ReadToEnd();
                        GameSessionsResponseInfo myInnerObj = (GameSessionsResponseInfo)js.Deserialize(objText, typeof(GameSessionsResponseInfo));
                        string status = myInnerObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameSession> sessions = myInnerObj.sessions;

                            HttpWebRequest gamesWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                            gamesWebRequest.Method = "GET";
                            gamesWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse gamesWebResponse = (HttpWebResponse)gamesWebRequest.GetResponse())
                            {
                                using (var gamesReader = new StreamReader(gamesWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = gamesReader.ReadToEnd();
                                    GamesListResponseInfo myGamesObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                    status = myGamesObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GameResponseInfo> games = myGamesObj.games;
                                        DateTime currentDate = DateTime.Now;
                                        string rawCurrentDate = currentDate.ToLongDateString();
                                        List<GameSession> mySessions = sessions.Where<GameSession>((GameSession session) =>
                                        {
                                            DateTime sessionDate = session.date;
                                            string rawSessionDate = sessionDate.ToLongDateString();
                                            string reviewUserId = session.user;
                                            bool isMe = currentUserId == reviewUserId;
                                            bool isTodaySession = rawSessionDate == rawCurrentDate;
                                            bool isAddSession = isMe && isTodaySession;
                                            return isAddSession;
                                        }).Distinct(new GameSessionComparer()).ToList<GameSession>();
                                        int mySessionsCount = mySessions.Count;
                                        bool isHaveSessions = mySessionsCount >= 1;
                                        if (isHaveSessions)
                                        {
                                            gamesHistoryBox.Text = "";
                                        }
                                        foreach (GameSession mySession in mySessions)
                                        {
                                            string mySessionGameId = mySession.game;
                                            string historyGameName = mySessionGameId;

                                            List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                            {
                                                string gameId = game._id;
                                                bool isIdMatches = gameId == mySessionGameId;
                                                return isIdMatches;
                                            }).ToList<GameResponseInfo>();
                                            int countResults = gameResults.Count;
                                            bool isResultsFound = countResults >= 1;
                                            if (isResultsFound)
                                            {
                                                GameResponseInfo gameResult = gameResults[0];
                                                historyGameName = gameResult.name;
                                            }
                                            gamesHistoryBox.Text += historyGameName;
                                            int sessionIndex = mySessions.IndexOf(mySession);
                                            bool isNotLastSession = sessionIndex < mySessionsCount - 1;
                                            if (isNotLastSession)
                                            {
                                                gamesHistoryBox.Text += Environment.NewLine;
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetIconsInfo ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            iconsUserNameLabel.Text = userName;
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetEquipmentInfo ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            equipmentUserNameLabel.Text = userName;
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetIllustrationCommunityContentSettings (string mainIllustrationId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IllustrationsResponseInfo myobj = (IllustrationsResponseInfo)js.Deserialize(objText, typeof(IllustrationsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Illustration> totalIllustrations = myobj.illustrations;
                            HttpWebRequest illustrationFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/favorites/all");
                            illustrationFavoriteRelationsWebRequest.Method = "GET";
                            illustrationFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse illustrationFavoriteRelationsWebResponse = (HttpWebResponse)illustrationFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var illustrationFavoriteRelationsReader = new StreamReader(illustrationFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = illustrationFavoriteRelationsReader.ReadToEnd();
                                    IllustrationFavoriteRelationsResponseInfo myIllustrationFavoriteRelationsObj = (IllustrationFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(IllustrationFavoriteRelationsResponseInfo));
                                    status = myIllustrationFavoriteRelationsObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<IllustrationFavoriteRelation> favoriteRelations = myIllustrationFavoriteRelationsObj.relations;
                                        List<IllustrationFavoriteRelation> myFavoriteRelations = favoriteRelations.Where<IllustrationFavoriteRelation>((IllustrationFavoriteRelation relation) =>
                                        {
                                            string relatioIllustrationId = relation.illustration;
                                            string relationUserId = relation.user;
                                            bool isCurrentUser = relationUserId == currentUserId;
                                            return isCurrentUser;
                                        }).ToList<IllustrationFavoriteRelation>();
                                        List<string> myFavoriteRelationIds = new List<string>();
                                        foreach (IllustrationFavoriteRelation myFavoriteRelation in myFavoriteRelations)
                                        {
                                            string myFavoriteRelationIllustrationId = myFavoriteRelation.illustration;
                                            myFavoriteRelationIds.Add(myFavoriteRelationIllustrationId);
                                        }
                                        totalIllustrations = totalIllustrations.Where<Illustration>((Illustration content) =>
                                        {
                                            string id = content._id;
                                            bool isFavoriteIllustration = myFavoriteRelationIds.Contains(mainIllustrationId);
                                            return isFavoriteIllustration;
                                        }).ToList<Illustration>();
                                        contentFavoriteIllustrations.Children.Clear();
                                        int totalIllustrationsCount = totalIllustrations.Count;
                                        bool isHaveIllustrations = totalIllustrationsCount >= 1;
                                        ItemCollection settingsSelectorItems = mainIllustrationSettingsSelector.Items;
                                        object rawToggleFavoriteItem = settingsSelectorItems[2];
                                        ComboBoxItem toggleFavoriteItem = ((ComboBoxItem)(rawToggleFavoriteItem));
                                        if (isHaveIllustrations)
                                        {
                                            toggleFavoriteItem.Content = "Удалить из избранного";
                                        }
                                        else
                                        {
                                            toggleFavoriteItem.Content = "В избранное";
                                        }
                                    }
                                }
                            }

                        }
                    }
                }

            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetScreenShotCommunityContentSettings (string mainCommunityScreenShotId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ScreenShotsResponseInfo myobj = (ScreenShotsResponseInfo)js.Deserialize(objText, typeof(ScreenShotsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<ScreenShot> totalScreenShots = myobj.screenShots;
                            HttpWebRequest screenShotFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/favorites/all");
                            screenShotFavoriteRelationsWebRequest.Method = "GET";
                            screenShotFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse screenShotFavoriteRelationsWebResponse = (HttpWebResponse)screenShotFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var screenShotFavoriteRelationsReader = new StreamReader(screenShotFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = screenShotFavoriteRelationsReader.ReadToEnd();
                                    ScreenShotFavoriteRelationsResponseInfo myScreenShotFavoriteRelationsObj = (ScreenShotFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(ScreenShotFavoriteRelationsResponseInfo));
                                    status = myScreenShotFavoriteRelationsObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<ScreenShotFavoriteRelation> favoriteRelations = myScreenShotFavoriteRelationsObj.relations;
                                        List<ScreenShotFavoriteRelation> myFavoriteRelations = favoriteRelations.Where<ScreenShotFavoriteRelation>((ScreenShotFavoriteRelation relation) =>
                                        {
                                            string relatioScreenShotId = relation.screenShot;
                                            string relationUserId = relation.user;
                                            bool isCurrentUser = relationUserId == currentUserId;
                                            return isCurrentUser;
                                        }).ToList<ScreenShotFavoriteRelation>();
                                        List<string> myFavoriteRelationIds = new List<string>();
                                        foreach (ScreenShotFavoriteRelation myFavoriteRelation in myFavoriteRelations)
                                        {
                                            string myFavoriteRelationScreenShotId = myFavoriteRelation.screenShot;
                                            myFavoriteRelationIds.Add(myFavoriteRelationScreenShotId);
                                        }
                                        totalScreenShots = totalScreenShots.Where<ScreenShot>((ScreenShot content) =>
                                        {
                                            string contentGameId = content.game;
                                            string id = content._id;
                                            bool isFavoriteScreenShot = myFavoriteRelationIds.Contains(mainCommunityScreenShotId);
                                            return isFavoriteScreenShot;
                                        }).ToList<ScreenShot>();
                                        int totalScreenShotsCount = totalScreenShots.Count;
                                        bool isHaveScreenShots = totalScreenShotsCount >= 1;
                                        ItemCollection settingsSelectorItems = mainScreenShotSettingsSelector.Items;
                                        object rawToggleFavoriteItem = settingsSelectorItems[2];
                                        ComboBoxItem toggleFavoriteItem = ((ComboBoxItem)(rawToggleFavoriteItem));
                                        if (isHaveScreenShots)
                                        {
                                            toggleFavoriteItem.Content = "Удалить из избранного";
                                        }
                                        else
                                        {
                                            toggleFavoriteItem.Content = "В избранное";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetGameSections ()
        {
            
            newGamesSection.Children.Clear();

            gameSections.Children.Clear();

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        string allGamesSectionCountLabelContent = "(0)";
                                        Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                        string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                        string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                        js = new JavaScriptSerializer();
                                        string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                        SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                        List<Game> currentGames = loadedContent.games;
                                        List<string> currentCollections = loadedContent.collections;
                                        List<string> currentSections = loadedContent.sections;
                                        DateTime currentDate = DateTime.Now;
                                        List<Game> recentGames = currentGames.Where<Game>((Game totalGamesItem) =>
                                        {
                                            string rawTotalGamesItemDate = totalGamesItem.date;
                                            DateTime totalGamesItemDate = DateTime.Parse(rawTotalGamesItemDate);
                                            TimeSpan interval = currentDate.Subtract(totalGamesItemDate);
                                            double intervalDays = interval.TotalDays;
                                            bool isRecent = intervalDays <= 14;
                                            return isRecent;
                                        }).ToList<Game>();
                                        List<GameRelation> gameRelations = myInnerObj.relations;
                                        List<GameResponseInfo> offerGames = totalGames.OrderByDescending((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        offerGames = offerGames.Where((GameResponseInfo someGame) =>
                                        {
                                            string someGameId = someGame._id;
                                            int countGameRelations = gameRelations.Count((GameRelation gameRelation) =>
                                            {
                                                string gameRelationGameId = gameRelation.game;
                                                string gameRelationUserId = gameRelation.user;
                                                bool isCurrentUser = currentUserId == gameRelationUserId;
                                                bool isCurrentGame = someGameId == gameRelationGameId;
                                                bool isCurrentGameRelation = isCurrentGame && isCurrentUser;
                                                return isCurrentGameRelation;
                                            });
                                            bool isNotPlayed = countGameRelations <= 0;
                                            int someGamelikes = someGame.likes;
                                            bool isGoodGame = someGamelikes >= 1;
                                            return isGoodGame && isNotPlayed;
                                        }).ToList<GameResponseInfo>();
                                        List<GameResponseInfo> newGames = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                                        {
                                            DateTime totalGamesItemDate = totalGamesItem.date;
                                            TimeSpan interval = currentDate.Subtract(totalGamesItemDate);
                                            double intervalDays = interval.TotalDays;
                                            bool isRecent = intervalDays <= 14;
                                            return isRecent;
                                        }).ToList<GameResponseInfo>();
                                        foreach (GameResponseInfo newGamesItem in newGames)
                                        {
                                            string newGamesItemName = newGamesItem.name;
                                            StackPanel newGamesSectionItem = new StackPanel();
                                            newGamesSectionItem.Margin = new Thickness(15, 0, 15, 0);
                                            TextBlock newGamesSectionItemDateLabel = new TextBlock();
                                            newGamesSectionItemDateLabel.Text = "На этой неделе";
                                            newGamesSectionItemDateLabel.TextAlignment = TextAlignment.Center;
                                            newGamesSectionItem.Children.Add(newGamesSectionItemDateLabel);
                                            Image newGamesSectionItemThumbnail = new Image();
                                            newGamesSectionItemThumbnail.Width = 150;
                                            newGamesSectionItemThumbnail.Height = 250;
                                            newGamesSectionItemThumbnail.Margin = new Thickness(15);
                                            newGamesSectionItemThumbnail.BeginInit();
                                            newGamesSectionItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + newGamesItemName));
                                            newGamesSectionItemThumbnail.EndInit();
                                            newGamesSectionItem.Children.Add(newGamesSectionItemThumbnail);
                                            StackPanel newGamesSectionItemFooter = new StackPanel();
                                            newGamesSectionItemFooter.Orientation = Orientation.Horizontal;
                                            PackIcon newGamesSectionItemFooterIcon = new PackIcon();
                                            newGamesSectionItemFooterIcon.VerticalAlignment = VerticalAlignment.Center;
                                            newGamesSectionItemFooterIcon.Kind = PackIconKind.Circle;
                                            newGamesSectionItemFooterIcon.Margin = new Thickness(0, 0, 5, 0);
                                            newGamesSectionItemFooter.Children.Add(newGamesSectionItemFooterIcon);
                                            TextBlock newGamesSectionItemFooterLabel = new TextBlock();
                                            newGamesSectionItemFooterLabel.VerticalAlignment = VerticalAlignment.Center;
                                            newGamesSectionItemFooterLabel.Text = newGamesItemName;
                                            newGamesSectionItemFooterLabel.Margin = new Thickness(15, 0, 0, 0);
                                            newGamesSectionItemFooter.Children.Add(newGamesSectionItemFooterLabel);
                                            newGamesSectionItem.Children.Add(newGamesSectionItemFooter);
                                            newGamesSection.Children.Add(newGamesSectionItem);

                                        }

                                        Separator separator = null;

                                        foreach (string currentSection in currentSections)
                                        {
                                            bool isWithoutCategorySection = currentSection == "Без категории";
                                            bool isAllGamesSection = currentSection == "Все игры";
                                            bool isRecentGamesSection = currentSection == "Недавние игры";
                                            bool isCollectionListSection = currentSection == "Список коллекций";
                                            bool isOfferGamesSection = currentSection == "Во что сыграть?";
                                            bool isCollectionGamesSection = currentCollections.Contains(currentSection);
                                            if (isRecentGamesSection)
                                            {
                                                StackPanel section = new StackPanel();
                                                StackPanel sectionHeader = new StackPanel();
                                                sectionHeader.Orientation = Orientation.Horizontal;
                                                ComboBox sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.FontSize = 14;
                                                sectionHeaderSelector.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderSelector.Margin = new Thickness(10, 0, 10, 0);
                                                ComboBoxItem sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = currentSection;
                                                sectionHeaderSelectorItem.Visibility = invisible;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    sectionHeaderSelectorItem = new ComboBoxItem();
                                                    sectionHeaderSelectorItem.Content = currentCollection;
                                                    sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                }
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                separator = new Separator();
                                                separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                                separator.BorderThickness = new Thickness(1);
                                                sectionHeaderSelectorItem.Content = separator;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Без категории";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Все игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Недавние игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Список коллекций";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Во что сыграть?";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Удалить этот раздел";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeaderSelector.DataContext = section;
                                                sectionHeaderSelector.SelectionChanged += ToggleSectionHeaderSelectorHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                Separator sectionHeaderSeparator = new Separator();
                                                sectionHeaderSeparator.Width = 850;
                                                sectionHeader.Children.Add(sectionHeaderSeparator);
                                                PackIcon sectionHeaderLeftArrowIcon = new PackIcon();
                                                sectionHeaderLeftArrowIcon.Width = 32;
                                                sectionHeaderLeftArrowIcon.Height = 32;
                                                sectionHeaderLeftArrowIcon.Kind = PackIconKind.ChevronLeft;
                                                sectionHeaderLeftArrowIcon.Margin = new Thickness(15, 0, 5, 0);
                                                sectionHeaderLeftArrowIcon.MouseLeftButtonUp += MoveSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderLeftArrowIcon);
                                                PackIcon sectionHeaderRightArrowIcon = new PackIcon();
                                                sectionHeaderRightArrowIcon.Width = 32;
                                                sectionHeaderRightArrowIcon.Height = 32;
                                                sectionHeaderRightArrowIcon.Kind = PackIconKind.ChevronRight;
                                                sectionHeaderRightArrowIcon.Margin = new Thickness(15, 0, 5, 0);
                                                sectionHeaderRightArrowIcon.MouseLeftButtonUp += MoveSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderRightArrowIcon);
                                                section.Children.Add(sectionHeader);
                                                ScrollViewer sectionFooterScroll = new ScrollViewer();
                                                sectionFooterScroll.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                sectionFooterScroll.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden; 
                                                StackPanel sectionFooter = new StackPanel();
                                                sectionFooter.Orientation = Orientation.Horizontal;
                                                sectionFooter.MinHeight = 150;
                                                sectionFooterScroll.Content = sectionFooter;
                                                foreach (Game recentGamesItem in recentGames)
                                                {
                                                    string lastPlayDate = recentGamesItem.date;
                                                    string recentGamesItemName = recentGamesItem.name;
                                                    StackPanel recentGamesSectionItem = new StackPanel();
                                                    TextBlock recentGamesSectionItemDateLabel = new TextBlock();
                                                    recentGamesSectionItemDateLabel.Text = lastPlayDate;
                                                    recentGamesSectionItemDateLabel.TextAlignment = TextAlignment.Center;
                                                    recentGamesSectionItem.Children.Add(recentGamesSectionItemDateLabel);
                                                    Image recentGamesSectionItemThumbnail = new Image();
                                                    recentGamesSectionItemThumbnail.Width = 150;
                                                    recentGamesSectionItemThumbnail.Height = 250;
                                                    recentGamesSectionItemThumbnail.Margin = new Thickness(15);
                                                    recentGamesSectionItemThumbnail.BeginInit();
                                                    recentGamesSectionItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recentGamesItemName));
                                                    recentGamesSectionItemThumbnail.EndInit();
                                                    recentGamesSectionItem.Children.Add(recentGamesSectionItemThumbnail);
                                                    sectionFooter.Children.Add(recentGamesSectionItem);
                                                }
                                                section.Children.Add(sectionFooterScroll);
                                                gameSections.Children.Add(section);
                                                sectionHeaderLeftArrowIcon.DataContext = sectionFooterScroll;
                                                sectionHeaderRightArrowIcon.DataContext = sectionFooterScroll;
                                            }
                                            else if (isOfferGamesSection)
                                            {
                                                StackPanel section = new StackPanel();
                                                StackPanel sectionHeader = new StackPanel();
                                                sectionHeader.Orientation = Orientation.Horizontal;
                                                StackPanel sectionHeaderAside = new StackPanel();
                                                ComboBox sectionHeaderAsideSelector = new ComboBox();
                                                sectionHeaderAsideSelector.Width = 125;
                                                sectionHeaderAsideSelector.Height = 25;
                                                sectionHeaderAsideSelector.FontSize = 14;
                                                sectionHeaderAsideSelector.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderAsideSelector.Margin = new Thickness(10, 0, 10, 0);
                                                sectionHeaderAsideSelector.HorizontalAlignment = HorizontalAlignment.Left;
                                                ComboBoxItem sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = currentSection;
                                                sectionHeaderAsideSelectorItem.Visibility = invisible;
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);

                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                    sectionHeaderAsideSelectorItem.Content = currentCollection;
                                                    sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                }
                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                separator = new Separator();
                                                separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                                separator.BorderThickness = new Thickness(1);
                                                sectionHeaderAsideSelectorItem.Content = separator;
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);

                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = "Без категории";
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = "Все игры";
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = "Недавние игры";
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = "Список коллекций";
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = "Во что сыграть?";
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                sectionHeaderAsideSelectorItem = new ComboBoxItem();
                                                sectionHeaderAsideSelectorItem.Content = "Удалить этот раздел";
                                                sectionHeaderAsideSelector.Items.Add(sectionHeaderAsideSelectorItem);
                                                sectionHeaderAsideSelector.SelectedIndex = 0;
                                                sectionHeaderAsideSelector.DataContext = section;
                                                sectionHeaderAsideSelector.SelectionChanged += ToggleSectionHeaderSelectorHandler;
                                                sectionHeaderAside.Children.Add(sectionHeaderAsideSelector);
                                                TextBlock sectionHeaderAsideDescLabel = new TextBlock();
                                                sectionHeaderAsideDescLabel.Text = @"Эти игры вы еще не пробовали, но они нравятся похожим на вас игрокам.";
                                                sectionHeaderAsideDescLabel.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderAsideDescLabel.Margin = new Thickness(10, 0, 10, 0);
                                                sectionHeaderAside.Children.Add(sectionHeaderAsideDescLabel);
                                                sectionHeader.Children.Add(sectionHeaderAside);
                                                Separator sectionHeaderSeparator = new Separator();
                                                sectionHeaderSeparator.Width = 850;
                                                sectionHeader.Children.Add(sectionHeaderSeparator);
                                                PackIcon sectionHeaderLeftArrowIcon = new PackIcon();
                                                sectionHeaderLeftArrowIcon.Width = 32;
                                                sectionHeaderLeftArrowIcon.Height = 32;
                                                sectionHeaderLeftArrowIcon.Kind = PackIconKind.ChevronLeft;
                                                sectionHeaderLeftArrowIcon.Margin = new Thickness(15, 0, 5, 0);
                                                sectionHeaderLeftArrowIcon.MouseLeftButtonUp += MoveSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderLeftArrowIcon);
                                                PackIcon sectionHeaderRightArrowIcon = new PackIcon();
                                                sectionHeaderRightArrowIcon.Width = 32;
                                                sectionHeaderRightArrowIcon.Height = 32;
                                                sectionHeaderRightArrowIcon.Kind = PackIconKind.ChevronRight;
                                                sectionHeaderRightArrowIcon.Margin = new Thickness(15, 0, 5, 0);
                                                sectionHeaderRightArrowIcon.MouseLeftButtonUp += MoveSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderRightArrowIcon);
                                                section.Children.Add(sectionHeader);
                                                ScrollViewer sectionFooterScroll = new ScrollViewer();
                                                sectionFooterScroll.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                sectionFooterScroll.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                StackPanel sectionFooter = new StackPanel();
                                                sectionFooter.Orientation = Orientation.Horizontal;
                                                sectionFooter.MinHeight = 150;
                                                sectionFooterScroll.Content = sectionFooter;
                                                foreach (GameResponseInfo offerGamesItem in offerGames)
                                                {
                                                    string offerGamesItemName = offerGamesItem.name;
                                                    Image offerGamesSectionItem = new Image();
                                                    offerGamesSectionItem.Width = 150;
                                                    offerGamesSectionItem.Height = 250;
                                                    offerGamesSectionItem.Margin = new Thickness(15);
                                                    offerGamesSectionItem.BeginInit();
                                                    offerGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + offerGamesItemName));
                                                    offerGamesSectionItem.EndInit();
                                                    sectionFooter.Children.Add(offerGamesSectionItem);
                                                }
                                                section.Children.Add(sectionFooterScroll);
                                                gameSections.Children.Add(section);
                                                sectionHeaderLeftArrowIcon.DataContext = sectionFooterScroll;
                                                sectionHeaderRightArrowIcon.DataContext = sectionFooterScroll;
                                            }
                                            else if (isAllGamesSection)
                                            {
                                                StackPanel section = new StackPanel();
                                                StackPanel sectionHeader = new StackPanel();
                                                sectionHeader.Orientation = Orientation.Horizontal;
                                                ComboBox sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.FontSize = 14;
                                                sectionHeaderSelector.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderSelector.Margin = new Thickness(10, 0, 10, 0);
                                                ComboBoxItem sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = currentSection;
                                                sectionHeaderSelectorItem.Visibility = invisible;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    sectionHeaderSelectorItem = new ComboBoxItem();
                                                    sectionHeaderSelectorItem.Content = currentCollection;
                                                    sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                }
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                separator = new Separator();
                                                separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                                separator.BorderThickness = new Thickness(1);
                                                sectionHeaderSelectorItem.Content = separator;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Без категории";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Все игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Недавние игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Список коллекций";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Во что сыграть?";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Удалить этот раздел";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;

                                                // sectionHeaderSelector.DataContext = section;
                                                
                                                sectionHeaderSelector.SelectionChanged += ToggleSectionHeaderSelectorHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                TextBlock sectionHeaderLabel = new TextBlock();
                                                sectionHeaderLabel.Text = "Сортировка";
                                                sectionHeaderLabel.FontSize = 14;
                                                sectionHeaderLabel.Margin = new Thickness(5, 0, 5, 0);
                                                sectionHeader.Children.Add(sectionHeaderLabel);
                                                sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По алфавиту";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По играющим друзьям";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По проценту достижений";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По времени в игре";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате запуска";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате выхода";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По оценке на Metacritic";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По обзорам";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeaderSelector.SelectionChanged += SortGameSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                Separator sectionHeaderSeparator = new Separator();
                                                sectionHeaderSeparator.Width = 600;
                                                sectionHeader.Children.Add(sectionHeaderSeparator);
                                                PackIcon sectionHeaderToggleIcon = new PackIcon();
                                                sectionHeaderToggleIcon.Kind = PackIconKind.ChevronDoubleUp;
                                                sectionHeaderToggleIcon.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderToggleIcon.MouseLeftButtonUp += ToggleAllGamesSectionDisplayHandler;
                                                sectionHeader.Children.Add(sectionHeaderToggleIcon);
                                                section.Children.Add(sectionHeader);
                                                ScrollViewer sectionFooterScroll = new ScrollViewer();
                                                sectionFooterScroll.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                sectionFooterScroll.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                WrapPanel sectionFooter = new WrapPanel();
                                                sectionFooter.MinHeight = 150;
                                                sectionFooterScroll.Content = sectionFooter;
                                                totalGames = totalGames.Take(18).ToList<GameResponseInfo>();
                                                int totalGamesCount = totalGames.Count;
                                                string rawTotalGamesCount = totalGamesCount.ToString();
                                                allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                                WrapPanel allGamesSection = ((WrapPanel)(sectionFooter));
                                                foreach (GameResponseInfo totalGamesItem in totalGames)
                                                {
                                                    string totalGamesItemName = totalGamesItem.name;
                                                    Image allGamesSectionItem = new Image();
                                                    allGamesSectionItem.Width = 150;
                                                    allGamesSectionItem.Height = 250;
                                                    allGamesSectionItem.Margin = new Thickness(15);
                                                    allGamesSectionItem.BeginInit();
                                                    allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                                    allGamesSectionItem.EndInit();
                                                    allGamesSection.Children.Add(allGamesSectionItem);
                                                }
                                                section.Children.Add(sectionFooterScroll);
                                                gameSections.Children.Add(section);
                                                sectionHeaderToggleIcon.DataContext = sectionFooterScroll;

                                                Dictionary<String, Object> sectionHeaderSelectorData = new Dictionary<String, Object>();
                                                sectionHeaderSelectorData.Add("section", currentSection);
                                                sectionHeaderSelectorData.Add("body", allGamesSection);
                                                sectionHeaderSelector.DataContext = sectionHeaderSelectorData;

                                            }
                                            else if (isWithoutCategorySection)
                                            {
                                                StackPanel section = new StackPanel();
                                                StackPanel sectionHeader = new StackPanel();
                                                sectionHeader.Orientation = Orientation.Horizontal;
                                                ComboBox sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.FontSize = 14;
                                                sectionHeaderSelector.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderSelector.Margin = new Thickness(10, 0, 10, 0);
                                                ComboBoxItem sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = currentSection;
                                                sectionHeaderSelectorItem.Visibility = invisible;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    sectionHeaderSelectorItem = new ComboBoxItem();
                                                    sectionHeaderSelectorItem.Content = currentCollection;
                                                    sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                }
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                separator = new Separator();
                                                separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                                separator.BorderThickness = new Thickness(1);
                                                sectionHeaderSelectorItem.Content = separator;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Без категории";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Все игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Недавние игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Список коллекций";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Во что сыграть?";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Удалить этот раздел";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;

                                                sectionHeaderSelector.DataContext = section;

                                                sectionHeaderSelector.SelectionChanged += ToggleSectionHeaderSelectorHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По алфавиту";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По играющим друзьям";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По проценту достижений";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По времени в игре";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате запуска";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате выхода";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По оценке на Metacritic";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По обзорам";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeaderSelector.SelectionChanged += SortGameSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                Separator sectionHeaderSeparator = new Separator();
                                                sectionHeaderSeparator.Width = 750;
                                                sectionHeader.Children.Add(sectionHeaderSeparator);
                                                PackIcon sectionHeaderToggleIcon = new PackIcon();
                                                sectionHeaderToggleIcon.Kind = PackIconKind.ChevronDoubleUp;
                                                sectionHeaderToggleIcon.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderToggleIcon.MouseLeftButtonUp += ToggleAllGamesSectionDisplayHandler;
                                                sectionHeader.Children.Add(sectionHeaderToggleIcon);
                                                section.Children.Add(sectionHeader);
                                                ScrollViewer sectionFooterScroll = new ScrollViewer();
                                                sectionFooterScroll.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                sectionFooterScroll.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                WrapPanel sectionFooter = new WrapPanel();
                                                sectionFooter.MinHeight = 150;
                                                sectionFooterScroll.Content = sectionFooter;
                                                totalGames = totalGames.Take(18).ToList<GameResponseInfo>();
                                                int totalGamesCount = totalGames.Count;
                                                string rawTotalGamesCount = totalGamesCount.ToString();
                                                allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                                WrapPanel allGamesSection = ((WrapPanel)(sectionFooter));
                                                foreach (GameResponseInfo totalGamesItem in totalGames)
                                                {
                                                    string totalGamesItemName = totalGamesItem.name;
                                                    Image allGamesSectionItem = new Image();
                                                    allGamesSectionItem.Width = 150;
                                                    allGamesSectionItem.Height = 250;
                                                    allGamesSectionItem.Margin = new Thickness(15);
                                                    allGamesSectionItem.BeginInit();
                                                    allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                                    allGamesSectionItem.EndInit();
                                                    allGamesSection.Children.Add(allGamesSectionItem);
                                                }
                                                section.Children.Add(sectionFooterScroll);
                                                gameSections.Children.Add(section);
                                                sectionHeaderToggleIcon.DataContext = sectionFooterScroll;

                                                Dictionary<String, Object> sectionHeaderSelectorData = new Dictionary<String, Object>();
                                                sectionHeaderSelectorData.Add("section", currentSection);
                                                sectionHeaderSelectorData.Add("body", allGamesSection);
                                                sectionHeaderSelector.DataContext = sectionHeaderSelectorData;

                                            }
                                            else if (isCollectionListSection)
                                            {
                                                StackPanel section = new StackPanel();
                                                StackPanel sectionHeader = new StackPanel();
                                                sectionHeader.Orientation = Orientation.Horizontal;
                                                ComboBox sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.FontSize = 14;
                                                sectionHeaderSelector.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderSelector.Margin = new Thickness(10, 0, 10, 0);
                                                ComboBoxItem sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = currentSection;
                                                sectionHeaderSelectorItem.Visibility = invisible;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    sectionHeaderSelectorItem = new ComboBoxItem();
                                                    sectionHeaderSelectorItem.Content = currentCollection;
                                                    sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                }
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                separator = new Separator();
                                                separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                                separator.BorderThickness = new Thickness(1);
                                                sectionHeaderSelectorItem.Content = separator;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);

                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Без категории";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Все игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Недавние игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Список коллекций";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Во что сыграть?";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Удалить этот раздел";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeaderSelector.DataContext = section;
                                                sectionHeaderSelector.SelectionChanged += ToggleSectionHeaderSelectorHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По алфавиту";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По играющим друзьям";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По проценту достижений";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По времени в игре";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате запуска";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате выхода";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По оценке на Metacritic";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По обзорам";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                Separator sectionHeaderSeparator = new Separator();
                                                sectionHeaderSeparator.Width = 750;
                                                sectionHeader.Children.Add(sectionHeaderSeparator);
                                                section.Children.Add(sectionHeader);
                                                ScrollViewer sectionFooterScroll = new ScrollViewer();
                                                sectionFooterScroll.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                sectionFooterScroll.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                WrapPanel sectionFooter = new WrapPanel();
                                                sectionFooter.MinHeight = 150;
                                                sectionFooterScroll.Content = sectionFooter;
                                                totalGames = totalGames.Take(18).ToList<GameResponseInfo>();
                                                int totalGamesCount = totalGames.Count;
                                                string rawTotalGamesCount = totalGamesCount.ToString();
                                                allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                                WrapPanel allGamesSection = ((WrapPanel)(sectionFooter));
                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    Border gameCollection = new Border();
                                                    gameCollection.Margin = new Thickness(25);
                                                    gameCollection.Padding = new Thickness(1.5);
                                                    gameCollection.BorderBrush = System.Windows.Media.Brushes.Black;
                                                    gameCollection.BorderThickness = new Thickness(2);
                                                    gameCollection.CornerRadius = new CornerRadius(5);
                                                    StackPanel gameCollectionBody = new StackPanel();
                                                    gameCollectionBody.Width = 175;
                                                    gameCollectionBody.Height = 175;
                                                    gameCollection.Child = gameCollectionBody;
                                                    TextBlock gameCollectionBodyNameLabel = new TextBlock();
                                                    gameCollectionBodyNameLabel.TextAlignment = TextAlignment.Center;
                                                    gameCollectionBodyNameLabel.Margin = new Thickness(0, 125, 0, 0);
                                                    gameCollectionBodyNameLabel.Text = currentCollection;
                                                    gameCollectionBody.Children.Add(gameCollectionBodyNameLabel);
                                                    TextBlock gameCollectionBodyCountGamesLabel = new TextBlock();
                                                    gameCollectionBodyCountGamesLabel.TextAlignment = TextAlignment.Center;
                                                    gameCollectionBodyCountGamesLabel.Margin = new Thickness(0, 15, 0, 0);
                                                    List<Game> gamesForCollection = currentGames.Where<Game>((Game game) =>
                                                    {
                                                        List<string> gameCollections = game.collections;
                                                        bool isGameForCollection = gameCollections.Contains(currentCollection);
                                                        return isGameForCollection;
                                                    }).ToList<Game>();
                                                    int countGamesForCollection = gamesForCollection.Count;
                                                    string rawCountGamesForCollection = countGamesForCollection.ToString();
                                                    gameCollectionBodyCountGamesLabel.Text = rawCountGamesForCollection;
                                                    gameCollectionBody.Children.Add(gameCollectionBodyCountGamesLabel);
                                                    allGamesSection.Children.Add(gameCollection);
                                                    gameCollection.DataContext = currentCollection;
                                                    gameCollection.MouseLeftButtonUp += SelectGameCollectionHandler;
                                                    ContextMenu gameCollectionContextMenu = new ContextMenu();
                                                    MenuItem gameCollectionContextMenuItem = new MenuItem();
                                                    gameCollectionContextMenuItem.Header = "Переименовать коллекцию";
                                                    gameCollectionContextMenuItem.DataContext = currentCollection;
                                                    gameCollectionContextMenuItem.Click += RenameGameCollectionHandler;
                                                    gameCollectionContextMenu.Items.Add(gameCollectionContextMenuItem);
                                                    gameCollectionContextMenuItem = new MenuItem();
                                                    gameCollectionContextMenuItem.Header = "Удалить коллекцию";
                                                    gameCollectionContextMenuItem.DataContext = currentCollection;
                                                    gameCollectionContextMenuItem.Click += RemoveGameCollectionHandler;
                                                    gameCollectionContextMenu.Items.Add(gameCollectionContextMenuItem);
                                                    gameCollection.ContextMenu = gameCollectionContextMenu;
                                                    int imageWidth = 35;
                                                    int imageHeight = 35;
                                                    DrawingVisual drawingVisual = new DrawingVisual();
                                                    using (DrawingContext drawingContext = drawingVisual.RenderOpen())
                                                    {
                                                        SkewTransform transform = new SkewTransform();
                                                        transform.AngleX = 15;
                                                        transform.AngleY = 15;
                                                        drawingContext.PushTransform(transform);
                                                        foreach (Game gameForCollection in gamesForCollection)
                                                        {
                                                            int frameIndex = gamesForCollection.IndexOf(gameForCollection);
                                                            string currentGameId = gameForCollection.id;
                                                            string currentGameName = gameForCollection.name;
                                                            string currentGameCover = gameForCollection.cover;
                                                            bool isCoverSet = currentGameCover != "";
                                                            bool isCoverFound = File.Exists(currentGameCover);
                                                            bool isCoverExists = isCoverSet && isCoverFound;
                                                            Uri coverUri = null;
                                                            bool isCustomGame = currentGameId == "mockId";
                                                            bool isNotCustomGame = !isCustomGame;
                                                            if (isCoverExists)
                                                            {
                                                                coverUri = new Uri(currentGameCover);
                                                            }
                                                            else if (isNotCustomGame)
                                                            {
                                                                coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                                                            }
                                                            else
                                                            {
                                                                coverUri = new Uri(@"https://cdn3.iconfinder.com/data/icons/solid-locations-icon-set/64/Games_2-256.png");
                                                            }
                                                            BitmapFrame frame = BitmapDecoder.Create(coverUri, BitmapCreateOptions.None, BitmapCacheOption.OnLoad).Frames.First();
                                                            drawingContext.DrawImage(frame, new Rect(frameIndex * 35, 0, imageWidth, imageHeight));
                                                        }
                                                    }
                                                    VisualBrush visualBrush = new VisualBrush(drawingVisual);
                                                    gameCollectionBody.Background = visualBrush;
                                                }

                                                section.Children.Add(sectionFooterScroll);
                                                gameSections.Children.Add(section);
                                            }
                                            else if (isCollectionGamesSection)
                                            {
                                                StackPanel section = new StackPanel();
                                                StackPanel sectionHeader = new StackPanel();
                                                sectionHeader.Orientation = Orientation.Horizontal;
                                                ComboBox sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.FontSize = 14;
                                                sectionHeaderSelector.VerticalAlignment = VerticalAlignment.Center;
                                                sectionHeaderSelector.Margin = new Thickness(10, 0, 10, 0);
                                                ComboBoxItem sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = currentSection;
                                                sectionHeaderSelectorItem.Visibility = invisible;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    sectionHeaderSelectorItem = new ComboBoxItem();
                                                    sectionHeaderSelectorItem.Content = currentCollection;
                                                    sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                }
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                separator = new Separator();
                                                separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                                separator.BorderThickness = new Thickness(1);
                                                sectionHeaderSelectorItem.Content = separator;
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Без категории";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Все игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Недавние игры";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Список коллекций";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Во что сыграть?";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "Удалить этот раздел";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeaderSelector.DataContext = section;
                                                sectionHeaderSelector.SelectionChanged += ToggleSectionHeaderSelectorHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                sectionHeaderSelector = new ComboBox();
                                                sectionHeaderSelector.Height = 25;
                                                sectionHeaderSelector.Width = 125;
                                                sectionHeaderSelector.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По алфавиту";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По играющим друзьям";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По проценту достижений";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По времени в игре";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате запуска";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По дате выхода";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По оценке на Metacritic";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelectorItem = new ComboBoxItem();
                                                sectionHeaderSelectorItem.Content = "По обзорам";
                                                sectionHeaderSelector.Items.Add(sectionHeaderSelectorItem);
                                                sectionHeaderSelector.SelectedIndex = 0;
                                                sectionHeaderSelector.SelectionChanged += SortGameSectionHandler;
                                                sectionHeader.Children.Add(sectionHeaderSelector);
                                                Separator sectionHeaderSeparator = new Separator();
                                                sectionHeaderSeparator.Width = 750;
                                                sectionHeader.Children.Add(sectionHeaderSeparator);
                                                PackIcon sectionHeaderToggleIcon = new PackIcon();
                                                sectionHeaderToggleIcon.Kind = PackIconKind.ChevronDoubleUp;
                                                sectionHeaderToggleIcon.Margin = new Thickness(15, 0, 15, 0);
                                                sectionHeaderToggleIcon.MouseLeftButtonUp += ToggleAllGamesSectionDisplayHandler;
                                                sectionHeader.Children.Add(sectionHeaderToggleIcon);
                                                section.Children.Add(sectionHeader);
                                                ScrollViewer sectionFooterScroll = new ScrollViewer();
                                                sectionFooterScroll.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                sectionFooterScroll.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden;
                                                WrapPanel sectionFooter = new WrapPanel();
                                                sectionFooter.MinHeight = 150;
                                                sectionFooterScroll.Content = sectionFooter;
                                                totalGames = totalGames.Take(18).ToList<GameResponseInfo>();
                                                int totalGamesCount = totalGames.Count;
                                                string rawTotalGamesCount = totalGamesCount.ToString();
                                                allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                                WrapPanel allGamesSection = ((WrapPanel)(sectionFooter));

                                                List<Game> collectionGames = currentGames.Where<Game>((Game game) =>
                                                {
                                                    List<string> gameCollections = game.collections;
                                                    bool isGameForCollection = gameCollections.Contains(currentSection);
                                                    bool isHiddenGame = game.isHidden;
                                                    bool isDisplayedGame = !isHiddenGame;
                                                    bool isShowGame = isGameForCollection && isDisplayedGame;
                                                    return isShowGame;
                                                }).ToList();
                                                foreach (Game currentGame in currentGames)
                                                {
                                                    List<string> currentGameCollections = currentGame.collections;
                                                    bool isGameForCurrentCollection = currentGameCollections.Contains(currentSection);
                                                    bool isHiddenGame = currentGame.isHidden;
                                                    bool isDisplayedGame = !isHiddenGame;
                                                    bool isShowGame = isGameForCurrentCollection && isDisplayedGame;
                                                    if (isShowGame)
                                                    {
                                                        string currentGameId = currentGame.id;
                                                        string currentGameName = currentGame.name;
                                                        string currentGameCover = currentGame.cover;
                                                        bool isCoverSet = currentGameCover != "";
                                                        bool isCoverFound = File.Exists(currentGameCover);
                                                        bool isCoverExists = isCoverSet && isCoverFound;
                                                        Image gameCollectionItem = new Image();
                                                        gameCollectionItem.Width = 100;
                                                        gameCollectionItem.Height = 100;
                                                        gameCollectionItem.Margin = new Thickness(25);
                                                        gameCollectionItem.BeginInit();
                                                        Uri coverUri = null;
                                                        if (isCoverExists)
                                                        {
                                                            coverUri = new Uri(currentGameCover);
                                                        }
                                                        else
                                                        {
                                                            coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                                                        }
                                                        gameCollectionItem.Source = new BitmapImage(coverUri);
                                                        gameCollectionItem.ImageFailed += SetDefaultThumbnailHandler;
                                                        gameCollectionItem.EndInit();
                                                        sectionFooter.Children.Add(gameCollectionItem);
                                                        gameCollectionItem.DataContext = currentGameName;
                                                        // gameCollectionItem.MouseLeftButtonUp += SelectGameCollectionItemHandler;
                                                        ContextMenu gameCollectionItemContextMenu = new ContextMenu();
                                                        MenuItem gameCollectionItemContextMenuItem = new MenuItem();
                                                        gameCollectionItemContextMenuItem.Header = "Играть";
                                                        gameCollectionItemContextMenuItem.DataContext = currentGameName;
                                                        gameCollectionItemContextMenuItem.Click += RunGameHandler;
                                                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                        gameCollectionItemContextMenuItem = new MenuItem();
                                                        gameCollectionItemContextMenuItem.Header = "Добавить в";
                                                        MenuItem gameCollectionItemNestedContextMenuItem;
                                                        Dictionary<String, Object> gameCollectionItemNestedContextMenuItemData;
                                                        foreach (string currentCollection in currentCollections)
                                                        {
                                                            gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                            gameCollectionItemNestedContextMenuItem.Header = currentCollection;
                                                            gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                            gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                                                            gameCollectionItemNestedContextMenuItemData.Add("collection", currentCollection);
                                                            gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                            gameCollectionItemNestedContextMenuItem.Click += AddGameToCollectionHandler;
                                                            gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                            bool isDisabledCollection = currentGameCollections.Contains(currentCollection);
                                                            if (isDisabledCollection)
                                                            {
                                                                gameCollectionItemNestedContextMenuItem.IsEnabled = false;
                                                            }
                                                        }
                                                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                        gameCollectionItemNestedContextMenuItem.Header = "Создать коллекцию";
                                                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                        gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                                                        gameCollectionItemNestedContextMenuItemData.Add("collection", currentSection);
                                                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                        gameCollectionItemNestedContextMenuItem.Click += CreateCollectionFromMenuHandler;
                                                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                        gameCollectionItemContextMenuItem = new MenuItem();
                                                        string gameCollectionItemContextMenuItemHeaderContent = "Убрать из " + currentSection;
                                                        gameCollectionItemContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;
                                                        Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                        gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                                                        gameCollectionItemContextMenuItemData.Add("collection", currentSection);
                                                        gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                        gameCollectionItemContextMenuItem.Click += RemoveGameFromCollectionHandler;
                                                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                        gameCollectionItemContextMenuItem = new MenuItem();
                                                        gameCollectionItemContextMenuItem.Header = "Управление";
                                                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                        gameCollectionItemNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                                                        gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                                                        gameCollectionItemNestedContextMenuItem.Click += CreateShortcutHandler;
                                                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                        bool IsCoverSet = currentGameCover != "";
                                                        if (IsCoverSet)
                                                        {
                                                            gameCollectionItemNestedContextMenuItem.Header = "Удалить свою обложку";
                                                        }
                                                        else
                                                        {
                                                            gameCollectionItemNestedContextMenuItem.Header = "Задать свою обложку";
                                                        }
                                                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                        gameCollectionItemNestedContextMenuItemData.Add("collection", currentSection);
                                                        gameCollectionItemNestedContextMenuItemData.Add("cover", currentGameCover);
                                                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                        gameCollectionItemNestedContextMenuItem.Click += ToggleGameCoverHandler;
                                                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                        gameCollectionItemNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                                                        gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                                                        gameCollectionItemNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                                                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                        isHiddenGame = currentGame.isHidden;
                                                        if (isHiddenGame)
                                                        {
                                                            gameCollectionItemNestedContextMenuItem.Header = "Убрать из скрытого";
                                                        }
                                                        else
                                                        {
                                                            gameCollectionItemNestedContextMenuItem.Header = "Скрыть игру";
                                                        }
                                                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                        gameCollectionItemNestedContextMenuItemData.Add("collection", currentSection);
                                                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                        gameCollectionItemNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                                                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                        gameCollectionItemNestedContextMenuItem.Header = "Удалить с утройства";
                                                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                        gameCollectionItemNestedContextMenuItemData.Add("collection", currentSection);
                                                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                        gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                                                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                        gameCollectionItemContextMenuItem = new MenuItem();
                                                        gameCollectionItemContextMenuItem.Header = "Свойства";
                                                        gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                        gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                                                        bool isCustomGame = currentGameId == "mockId";
                                                        gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                                                        gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                        gameCollectionItemContextMenuItem.Click += OpenGameSettingsHandler;
                                                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                        gameCollectionItem.ContextMenu = gameCollectionItemContextMenu;
                                                    }
                                                }
                                                section.Children.Add(sectionFooterScroll);
                                                gameSections.Children.Add(section);
                                                sectionHeaderToggleIcon.DataContext = sectionFooterScroll;

                                                Dictionary<String, Object> sectionHeaderSelectorData = new Dictionary<String, Object>();
                                                sectionHeaderSelectorData.Add("section", currentSection);
                                                sectionHeaderSelectorData.Add("body", allGamesSection);
                                                sectionHeaderSelector.DataContext = sectionHeaderSelectorData;

                                            }
                                        }

                                    }
                                }
                            }
                        }

                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void InitAddGameSection ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<string> currentCollections = loadedContent.collections;
            ComboBoxItem addGameSectionSelectorItem = new ComboBoxItem();
            Separator separator = new Separator();
            separator.BorderBrush = System.Windows.Media.Brushes.Black;
            separator.BorderThickness = new Thickness(1);
            addGameSectionSelectorItem.Content = separator;
            addGameSectionSelector.Items.Insert(0, addGameSectionSelectorItem);
            foreach (string currentCollection in currentCollections)
            {
                addGameSectionSelectorItem = new ComboBoxItem();
                addGameSectionSelectorItem.Content = currentCollection;
                addGameSectionSelector.Items.Insert(0, addGameSectionSelectorItem);
            }
        }

        public void SortGameSectionHandler (object sender, RoutedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            SortGameSection(selector);
        }


        public void SortGameSection (ComboBox selector)
        {
            if (isAppInit)
            {
                int sortTypeIndex = selector.SelectedIndex;
                bool isSortByAlphabet = sortTypeIndex == 0;
                bool isSortByFriends = sortTypeIndex == 1;
                bool isSortByAchiviements = sortTypeIndex == 2;
                bool isSortByTime = sortTypeIndex == 3;
                bool isSortByLaunchDate = sortTypeIndex == 4;
                bool isSortByExitDate = sortTypeIndex == 5;
                bool isSortBySize = sortTypeIndex == 6;
                bool isSortByMetacritic = sortTypeIndex == 7;
                bool isSortByReviews = sortTypeIndex == 8;
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> totalGames = myobj.games;

                                Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                js = new JavaScriptSerializer();
                                string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                List<Game> currentGames = loadedContent.games;
                                List<string> currentCollections = loadedContent.collections;

                                object rawSelectorData = selector.DataContext;
                                Dictionary<String, Object> selectorData = ((Dictionary<String, Object>)(rawSelectorData));
                                string section = ((string)(selectorData["section"]));
                                object body = selectorData["body"];
                                bool isAllGamesSection = section == "Все игры";
                                bool isWithoutCategorySection = section == "Без категории";
                                bool isCollectionGamesSection = currentCollections.Contains(section);
                                bool isRow = body is StackPanel;
                                if (isAllGamesSection)
                                {
                                    string allGamesSectionCountLabelContent = "";
                                    if (isRow)
                                    {
                                        StackPanel allGamesSectionScrollContent = ((StackPanel)(body));
                                        allGamesSectionScrollContent.Children.Clear();
                                        totalGames = totalGames.Take(6).ToList<GameResponseInfo>();
                                        
                                        if (isSortByAlphabet)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByFriends)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByAchiviements)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByTime)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.genre).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                int countHours = 0;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<GameRelation> relations = myInnerObj.relations;
                                                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                            {
                                                                string localGameId = relation.game;
                                                                string localUserId = relation.user;
                                                                bool isMyGame = currentUserId == localUserId;
                                                                bool isCurrentGame = localGameId == someGameId;
                                                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                return isLocalGamePayed;
                                                            }).ToList<GameRelation>();
                                                            int countUserGameRelations = userGameRelations.Count;
                                                            bool isHaveRelations = countUserGameRelations >= 1;
                                                            if (isHaveRelations)
                                                            {
                                                                GameRelation userGameRelation = userGameRelations[0];
                                                                string rawHours = userGameRelation.hours;
                                                                countHours = Int32.Parse(rawHours);
                                                            }
                                                        }
                                                    }
                                                }
                                                return countHours;
                                            }).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByLaunchDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByExitDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.platform).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortBySize)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByMetacritic)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.maxUsers).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByReviews)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.users).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<Review> totalReviews = myInnerObj.reviews;
                                                            int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                            {
                                                                string someReviewGameId = someReview.game;
                                                                bool isCurrentGameReview = someGameId == someReviewGameId;
                                                                return isCurrentGameReview;
                                                            });
                                                            return countGameReviews;
                                                        }
                                                        else
                                                        {
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }).ToList<GameResponseInfo>();
                                        }

                                        int totalGamesCount = totalGames.Count;
                                        string rawTotalGamesCount = totalGamesCount.ToString();
                                        allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                        foreach (GameResponseInfo totalGamesItem in totalGames)
                                        {
                                            string totalGamesItemName = totalGamesItem.name;
                                            Image allGamesSectionItem = new Image();
                                            allGamesSectionItem.Width = 150;
                                            allGamesSectionItem.Height = 250;
                                            allGamesSectionItem.Margin = new Thickness(15);
                                            allGamesSectionItem.BeginInit();
                                            allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                            allGamesSectionItem.EndInit();
                                            allGamesSectionScrollContent.Children.Add(allGamesSectionItem);
                                        }
                                    }
                                    else
                                    {
                                        WrapPanel allGamesSectionScrollContent = ((WrapPanel)(body));
                                        allGamesSectionScrollContent.Children.Clear();
                                        totalGames = totalGames.Take(18).ToList<GameResponseInfo>();

                                        if (isSortByAlphabet)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByFriends)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByAchiviements)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByTime)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.genre).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                int countHours = 0;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<GameRelation> relations = myInnerObj.relations;
                                                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                            {
                                                                string localGameId = relation.game;
                                                                string localUserId = relation.user;
                                                                bool isMyGame = currentUserId == localUserId;
                                                                bool isCurrentGame = localGameId == someGameId;
                                                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                return isLocalGamePayed;
                                                            }).ToList<GameRelation>();
                                                            int countUserGameRelations = userGameRelations.Count;
                                                            bool isHaveRelations = countUserGameRelations >= 1;
                                                            if (isHaveRelations)
                                                            {
                                                                GameRelation userGameRelation = userGameRelations[0];
                                                                string rawHours = userGameRelation.hours;
                                                                countHours = Int32.Parse(rawHours);
                                                            }
                                                        }
                                                    }
                                                }
                                                return countHours;
                                            }).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByLaunchDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByExitDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.platform).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortBySize)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByMetacritic)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.maxUsers).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByReviews)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.users).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<Review> totalReviews = myInnerObj.reviews;
                                                            int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                            {
                                                                string someReviewGameId = someReview.game;
                                                                bool isCurrentGameReview = someGameId == someReviewGameId;
                                                                return isCurrentGameReview;
                                                            });
                                                            return countGameReviews;
                                                        }
                                                        else
                                                        {
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }).ToList<GameResponseInfo>();
                                        }

                                        int totalGamesCount = totalGames.Count;
                                        string rawTotalGamesCount = totalGamesCount.ToString();
                                        allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                        foreach (GameResponseInfo totalGamesItem in totalGames)
                                        {
                                            string totalGamesItemName = totalGamesItem.name;
                                            Image allGamesSectionItem = new Image();
                                            allGamesSectionItem.Width = 150;
                                            allGamesSectionItem.Height = 250;
                                            allGamesSectionItem.Margin = new Thickness(15);
                                            allGamesSectionItem.BeginInit();
                                            allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                            allGamesSectionItem.EndInit();
                                            allGamesSectionScrollContent.Children.Add(allGamesSectionItem);
                                        }
                                    }
                                }
                                else if (isWithoutCategorySection)
                                {
                                    string allGamesSectionCountLabelContent = "";
                                    if (isRow)
                                    {
                                        StackPanel allGamesSectionScrollContent = ((StackPanel)(body));
                                        allGamesSectionScrollContent.Children.Clear();
                                        totalGames = totalGames.Take(6).ToList<GameResponseInfo>();

                                        if (isSortByAlphabet)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByFriends)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByAchiviements)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByTime)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.genre).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                int countHours = 0;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<GameRelation> relations = myInnerObj.relations;
                                                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                            {
                                                                string localGameId = relation.game;
                                                                string localUserId = relation.user;
                                                                bool isMyGame = currentUserId == localUserId;
                                                                bool isCurrentGame = localGameId == someGameId;
                                                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                return isLocalGamePayed;
                                                            }).ToList<GameRelation>();
                                                            int countUserGameRelations = userGameRelations.Count;
                                                            bool isHaveRelations = countUserGameRelations >= 1;
                                                            if (isHaveRelations)
                                                            {
                                                                GameRelation userGameRelation = userGameRelations[0];
                                                                string rawHours = userGameRelation.hours;
                                                                countHours = Int32.Parse(rawHours);
                                                            }
                                                        }
                                                    }
                                                }
                                                return countHours;
                                            }).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByLaunchDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByExitDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.platform).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortBySize)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByMetacritic)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.maxUsers).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByReviews)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.users).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<Review> totalReviews = myInnerObj.reviews;
                                                            int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                            {
                                                                string someReviewGameId = someReview.game;
                                                                bool isCurrentGameReview = someGameId == someReviewGameId;
                                                                return isCurrentGameReview;
                                                            });
                                                            return countGameReviews;
                                                        }
                                                        else
                                                        {
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }).ToList<GameResponseInfo>();
                                        }

                                        int totalGamesCount = totalGames.Count;
                                        string rawTotalGamesCount = totalGamesCount.ToString();
                                        allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                        foreach (GameResponseInfo totalGamesItem in totalGames)
                                        {
                                            string totalGamesItemName = totalGamesItem.name;
                                            Image allGamesSectionItem = new Image();
                                            allGamesSectionItem.Width = 150;
                                            allGamesSectionItem.Height = 250;
                                            allGamesSectionItem.Margin = new Thickness(15);
                                            allGamesSectionItem.BeginInit();
                                            allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                            allGamesSectionItem.EndInit();
                                            allGamesSectionScrollContent.Children.Add(allGamesSectionItem);
                                        }
                                    }
                                    else
                                    {
                                        WrapPanel allGamesSectionScrollContent = ((WrapPanel)(body));
                                        allGamesSectionScrollContent.Children.Clear();
                                        totalGames = totalGames.Take(18).ToList<GameResponseInfo>();

                                        if (isSortByAlphabet)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByFriends)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByAchiviements)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByTime)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.genre).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                int countHours = 0;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<GameRelation> relations = myInnerObj.relations;
                                                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                            {
                                                                string localGameId = relation.game;
                                                                string localUserId = relation.user;
                                                                bool isMyGame = currentUserId == localUserId;
                                                                bool isCurrentGame = localGameId == someGameId;
                                                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                return isLocalGamePayed;
                                                            }).ToList<GameRelation>();
                                                            int countUserGameRelations = userGameRelations.Count;
                                                            bool isHaveRelations = countUserGameRelations >= 1;
                                                            if (isHaveRelations)
                                                            {
                                                                GameRelation userGameRelation = userGameRelations[0];
                                                                string rawHours = userGameRelation.hours;
                                                                countHours = Int32.Parse(rawHours);
                                                            }
                                                        }
                                                    }
                                                }
                                                return countHours;
                                            }).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByLaunchDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByExitDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.platform).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortBySize)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByMetacritic)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.maxUsers).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByReviews)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.users).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<Review> totalReviews = myInnerObj.reviews;
                                                            int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                            {
                                                                string someReviewGameId = someReview.game;
                                                                bool isCurrentGameReview = someGameId == someReviewGameId;
                                                                return isCurrentGameReview;
                                                            });
                                                            return countGameReviews;
                                                        }
                                                        else
                                                        {
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }).ToList<GameResponseInfo>();
                                        }

                                        int totalGamesCount = totalGames.Count;
                                        string rawTotalGamesCount = totalGamesCount.ToString();
                                        allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                        foreach (GameResponseInfo totalGamesItem in totalGames)
                                        {
                                            string totalGamesItemName = totalGamesItem.name;
                                            Image allGamesSectionItem = new Image();
                                            allGamesSectionItem.Width = 150;
                                            allGamesSectionItem.Height = 250;
                                            allGamesSectionItem.Margin = new Thickness(15);
                                            allGamesSectionItem.BeginInit();
                                            allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                            allGamesSectionItem.EndInit();
                                            allGamesSectionScrollContent.Children.Add(allGamesSectionItem);
                                        }
                                    }
                                }
                                else if (isCollectionGamesSection)
                                {

                                    List<Game> collectionGames = currentGames.Where<Game>((Game game) =>
                                    {
                                        List<string> gameCollections = game.collections;
                                        bool isGameForCollection = gameCollections.Contains(section);
                                        bool isHiddenGame = game.isHidden;
                                        bool isDisplayedGame = !isHiddenGame;
                                        bool isShowGame = isGameForCollection && isDisplayedGame;
                                        return isShowGame;
                                    }).ToList();
                                    
                                    string allGamesSectionCountLabelContent = "";
                                    if (isRow)
                                    {
                                        StackPanel allGamesSectionScrollContent = ((StackPanel)(body));
                                        allGamesSectionScrollContent.Children.Clear();
                                        totalGames = totalGames.Take(6).ToList<GameResponseInfo>();

                                        if (isSortByAlphabet)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByFriends)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByAchiviements)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByTime)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.genre).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                int countHours = 0;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<GameRelation> relations = myInnerObj.relations;
                                                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                            {
                                                                string localGameId = relation.game;
                                                                string localUserId = relation.user;
                                                                bool isMyGame = currentUserId == localUserId;
                                                                bool isCurrentGame = localGameId == someGameId;
                                                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                return isLocalGamePayed;
                                                            }).ToList<GameRelation>();
                                                            int countUserGameRelations = userGameRelations.Count;
                                                            bool isHaveRelations = countUserGameRelations >= 1;
                                                            if (isHaveRelations)
                                                            {
                                                                GameRelation userGameRelation = userGameRelations[0];
                                                                string rawHours = userGameRelation.hours;
                                                                countHours = Int32.Parse(rawHours);
                                                            }
                                                        }
                                                    }
                                                }
                                                return countHours;
                                            }).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByLaunchDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByExitDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.platform).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortBySize)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByMetacritic)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.maxUsers).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByReviews)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.users).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<Review> totalReviews = myInnerObj.reviews;
                                                            int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                            {
                                                                string someReviewGameId = someReview.game;
                                                                bool isCurrentGameReview = someGameId == someReviewGameId;
                                                                return isCurrentGameReview;
                                                            });
                                                            return countGameReviews;
                                                        }
                                                        else
                                                        {
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }).ToList<GameResponseInfo>();
                                        }

                                        int totalGamesCount = totalGames.Count;
                                        string rawTotalGamesCount = totalGamesCount.ToString();
                                        allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                        /*foreach (GameResponseInfo totalGamesItem in totalGames)
                                        {
                                            string totalGamesItemName = totalGamesItem.name;
                                            Image allGamesSectionItem = new Image();
                                            allGamesSectionItem.Width = 100;
                                            allGamesSectionItem.Height = 100;
                                            allGamesSectionItem.Margin = new Thickness(25);
                                            allGamesSectionItem.BeginInit();
                                            allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                            allGamesSectionItem.EndInit();
                                            allGamesSectionScrollContent.Children.Add(allGamesSectionItem);
                                        }*/
                                        foreach (Game currentGame in currentGames)
                                        {
                                            List<string> currentGameCollections = currentGame.collections;
                                            bool isGameForCurrentCollection = currentGameCollections.Contains(section);
                                            bool isHiddenGame = currentGame.isHidden;
                                            bool isDisplayedGame = !isHiddenGame;
                                            bool isShowGame = isGameForCurrentCollection && isDisplayedGame;
                                            if (isShowGame)
                                            {
                                                string currentGameId = currentGame.id;
                                                string currentGameName = currentGame.name;
                                                string currentGameCover = currentGame.cover;
                                                bool isCoverSet = currentGameCover != "";
                                                bool isCoverFound = File.Exists(currentGameCover);
                                                bool isCoverExists = isCoverSet && isCoverFound;
                                                Image gameCollectionItem = new Image();
                                                gameCollectionItem.Width = 100;
                                                gameCollectionItem.Height = 100;
                                                gameCollectionItem.Margin = new Thickness(25);
                                                gameCollectionItem.BeginInit();
                                                Uri coverUri = null;
                                                if (isCoverExists)
                                                {
                                                    coverUri = new Uri(currentGameCover);
                                                }
                                                else
                                                {
                                                    coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                                                }
                                                gameCollectionItem.Source = new BitmapImage(coverUri);
                                                gameCollectionItem.ImageFailed += SetDefaultThumbnailHandler;
                                                gameCollectionItem.EndInit();
                                                allGamesSectionScrollContent.Children.Add(gameCollectionItem);
                                                gameCollectionItem.DataContext = currentGameName;
                                                // gameCollectionItem.MouseLeftButtonUp += SelectGameCollectionItemHandler;
                                                ContextMenu gameCollectionItemContextMenu = new ContextMenu();
                                                MenuItem gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Играть";
                                                gameCollectionItemContextMenuItem.DataContext = currentGameName;
                                                gameCollectionItemContextMenuItem.Click += RunGameHandler;
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Добавить в";
                                                MenuItem gameCollectionItemNestedContextMenuItem;
                                                Dictionary<String, Object> gameCollectionItemNestedContextMenuItemData;
                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                    gameCollectionItemNestedContextMenuItem.Header = currentCollection;
                                                    gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                    gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                                                    gameCollectionItemNestedContextMenuItemData.Add("collection", currentCollection);
                                                    gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                    gameCollectionItemNestedContextMenuItem.Click += AddGameToCollectionHandler;
                                                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                    bool isDisabledCollection = currentGameCollections.Contains(currentCollection);
                                                    if (isDisabledCollection)
                                                    {
                                                        gameCollectionItemNestedContextMenuItem.IsEnabled = false;
                                                    }
                                                }
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Создать коллекцию";
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += CreateCollectionFromMenuHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                string gameCollectionItemContextMenuItemHeaderContent = "Убрать из " + section;
                                                gameCollectionItemContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;
                                                Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemContextMenuItemData.Add("collection", section);
                                                gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                gameCollectionItemContextMenuItem.Click += RemoveGameFromCollectionHandler;
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Управление";
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                                                gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                                                gameCollectionItemNestedContextMenuItem.Click += CreateShortcutHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                bool IsCoverSet = currentGameCover != "";
                                                if (IsCoverSet)
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Удалить свою обложку";
                                                }
                                                else
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Задать свою обложку";
                                                }
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItemData.Add("cover", currentGameCover);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += ToggleGameCoverHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                                                gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                                                gameCollectionItemNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                isHiddenGame = currentGame.isHidden;
                                                if (isHiddenGame)
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Убрать из скрытого";
                                                }
                                                else
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Скрыть игру";
                                                }
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Удалить с утройства";
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Свойства";
                                                gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                                                bool isCustomGame = currentGameId == "mockId";
                                                gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                                                gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                gameCollectionItemContextMenuItem.Click += OpenGameSettingsHandler;
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItem.ContextMenu = gameCollectionItemContextMenu;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        WrapPanel allGamesSectionScrollContent = ((WrapPanel)(body));
                                        allGamesSectionScrollContent.Children.Clear();
                                        totalGames = totalGames.Take(18).ToList<GameResponseInfo>();

                                        if (isSortByAlphabet)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByFriends)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.name).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByAchiviements)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.date).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByTime)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.genre).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                int countHours = 0;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<GameRelation> relations = myInnerObj.relations;
                                                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                            {
                                                                string localGameId = relation.game;
                                                                string localUserId = relation.user;
                                                                bool isMyGame = currentUserId == localUserId;
                                                                bool isCurrentGame = localGameId == someGameId;
                                                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                return isLocalGamePayed;
                                                            }).ToList<GameRelation>();
                                                            int countUserGameRelations = userGameRelations.Count;
                                                            bool isHaveRelations = countUserGameRelations >= 1;
                                                            if (isHaveRelations)
                                                            {
                                                                GameRelation userGameRelation = userGameRelations[0];
                                                                string rawHours = userGameRelation.hours;
                                                                countHours = Int32.Parse(rawHours);
                                                            }
                                                        }
                                                    }
                                                }
                                                return countHours;
                                            }).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByLaunchDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.likes).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByExitDate)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.platform).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortBySize)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.price).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByMetacritic)
                                        {
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.maxUsers).ToList<GameResponseInfo>();
                                        }
                                        else if (isSortByReviews)
                                        {
                                            // totalGames = totalGames.OrderBy((GameResponseInfo someGame) => someGame.users).ToList<GameResponseInfo>();
                                            totalGames = totalGames.OrderBy((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                                innerWebRequest.Method = "GET";
                                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                {
                                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerReader.ReadToEnd();
                                                        ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                        status = myInnerObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            List<Review> totalReviews = myInnerObj.reviews;
                                                            int countGameReviews = totalReviews.Count<Review>((Review someReview) =>
                                                            {
                                                                string someReviewGameId = someReview.game;
                                                                bool isCurrentGameReview = someGameId == someReviewGameId;
                                                                return isCurrentGameReview;
                                                            });
                                                            return countGameReviews;
                                                        }
                                                        else
                                                        {
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }).ToList<GameResponseInfo>();
                                        }

                                        int totalGamesCount = totalGames.Count;
                                        string rawTotalGamesCount = totalGamesCount.ToString();
                                        allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                        /*foreach (GameResponseInfo totalGamesItem in totalGames)
                                        {
                                            string totalGamesItemName = totalGamesItem.name;
                                            Image allGamesSectionItem = new Image();
                                            allGamesSectionItem.Width = 100;
                                            allGamesSectionItem.Height = 100;
                                            allGamesSectionItem.Margin = new Thickness(25);
                                            allGamesSectionItem.BeginInit();
                                            allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                            allGamesSectionItem.EndInit();
                                            allGamesSectionScrollContent.Children.Add(allGamesSectionItem);
                                        }*/
                                        foreach (Game currentGame in currentGames)
                                        {
                                            List<string> currentGameCollections = currentGame.collections;
                                            bool isGameForCurrentCollection = currentGameCollections.Contains(section);
                                            bool isHiddenGame = currentGame.isHidden;
                                            bool isDisplayedGame = !isHiddenGame;
                                            bool isShowGame = isGameForCurrentCollection && isDisplayedGame;
                                            if (isShowGame)
                                            {
                                                string currentGameId = currentGame.id;
                                                string currentGameName = currentGame.name;
                                                string currentGameCover = currentGame.cover;
                                                bool isCoverSet = currentGameCover != "";
                                                bool isCoverFound = File.Exists(currentGameCover);
                                                bool isCoverExists = isCoverSet && isCoverFound;
                                                Image gameCollectionItem = new Image();
                                                gameCollectionItem.Width = 100;
                                                gameCollectionItem.Height = 100;
                                                gameCollectionItem.Margin = new Thickness(25);
                                                gameCollectionItem.BeginInit();
                                                Uri coverUri = null;
                                                if (isCoverExists)
                                                {
                                                    coverUri = new Uri(currentGameCover);
                                                }
                                                else
                                                {
                                                    coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                                                }
                                                gameCollectionItem.Source = new BitmapImage(coverUri);
                                                gameCollectionItem.ImageFailed += SetDefaultThumbnailHandler;
                                                gameCollectionItem.EndInit();
                                                allGamesSectionScrollContent.Children.Add(gameCollectionItem);
                                                gameCollectionItem.DataContext = currentGameName;
                                                // gameCollectionItem.MouseLeftButtonUp += SelectGameCollectionItemHandler;
                                                ContextMenu gameCollectionItemContextMenu = new ContextMenu();
                                                MenuItem gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Играть";
                                                gameCollectionItemContextMenuItem.DataContext = currentGameName;
                                                gameCollectionItemContextMenuItem.Click += RunGameHandler;
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Добавить в";
                                                MenuItem gameCollectionItemNestedContextMenuItem;
                                                Dictionary<String, Object> gameCollectionItemNestedContextMenuItemData;
                                                foreach (string currentCollection in currentCollections)
                                                {
                                                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                    gameCollectionItemNestedContextMenuItem.Header = currentCollection;
                                                    gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                    gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                                                    gameCollectionItemNestedContextMenuItemData.Add("collection", currentCollection);
                                                    gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                    gameCollectionItemNestedContextMenuItem.Click += AddGameToCollectionHandler;
                                                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                    bool isDisabledCollection = currentGameCollections.Contains(currentCollection);
                                                    if (isDisabledCollection)
                                                    {
                                                        gameCollectionItemNestedContextMenuItem.IsEnabled = false;
                                                    }
                                                }
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Создать коллекцию";
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += CreateCollectionFromMenuHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                string gameCollectionItemContextMenuItemHeaderContent = "Убрать из " + section;
                                                gameCollectionItemContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;
                                                Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemContextMenuItemData.Add("collection", section);
                                                gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                gameCollectionItemContextMenuItem.Click += RemoveGameFromCollectionHandler;
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Управление";
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                                                gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                                                gameCollectionItemNestedContextMenuItem.Click += CreateShortcutHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                bool IsCoverSet = currentGameCover != "";
                                                if (IsCoverSet)
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Удалить свою обложку";
                                                }
                                                else
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Задать свою обложку";
                                                }
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItemData.Add("cover", currentGameCover);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += ToggleGameCoverHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                                                gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                                                gameCollectionItemNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                isHiddenGame = currentGame.isHidden;
                                                if (isHiddenGame)
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Убрать из скрытого";
                                                }
                                                else
                                                {
                                                    gameCollectionItemNestedContextMenuItem.Header = "Скрыть игру";
                                                }
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Удалить с утройства";
                                                gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", section);
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                                                gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItemContextMenuItem = new MenuItem();
                                                gameCollectionItemContextMenuItem.Header = "Свойства";
                                                gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                                                bool isCustomGame = currentGameId == "mockId";
                                                gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                                                gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                gameCollectionItemContextMenuItem.Click += OpenGameSettingsHandler;
                                                gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);
                                                gameCollectionItem.ContextMenu = gameCollectionItemContextMenu;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException exception)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
        }

        public void OpenAddGameSectionHandler (object sender, RoutedEventArgs e)
        {
            OpenAddGameSection();
        }

        public void OpenAddGameSection ()
        {
            addGameSectionLabel.Foreground = System.Windows.Media.Brushes.LightGray;
            addGameSectionIcon.Foreground = System.Windows.Media.Brushes.LightGray;
            addGameSection.Visibility = visible;
        }

        public void MoveSectionHandler (object sender, RoutedEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            MoveSection(icon);
        }

        public void MoveSection (PackIcon icon)
        {
            object iconData = icon.DataContext;
            ScrollViewer sectionScroll = ((ScrollViewer)(iconData));
            DependencyObject rawIconParent = icon.Parent;
            StackPanel iconParent = ((StackPanel)(rawIconParent));
            UIElementCollection iconParentChildren = iconParent.Children;
            int iconIndex = iconParentChildren.IndexOf(icon);
            int iconParentChildrenCount = iconParentChildren.Count;
            int lasticonParentChildIndex = iconParentChildrenCount - 1;
            bool isRightArrow = lasticonParentChildIndex == iconIndex;
            if (isRightArrow)
            {
                UIElement rawLeftArrowIcon = iconParentChildren[iconIndex - 1];
                PackIcon leftArrowIcon = ((PackIcon)(rawLeftArrowIcon));
                double offset = sectionScroll.HorizontalOffset;
                double updatedOffset = offset + 100;
                sectionScroll.ScrollToHorizontalOffset(updatedOffset);
                leftArrowIcon.Foreground = System.Windows.Media.Brushes.Black;
                double scrollableWidth = sectionScroll.ScrollableWidth;
                bool isEndOffset = updatedOffset >= scrollableWidth;
                if (isEndOffset)
                {
                    icon.Foreground = System.Windows.Media.Brushes.LightGray;
                }
            }
            else
            {
                UIElement rawRightArrowIcon = iconParentChildren[iconIndex + 1];
                PackIcon rightArrowIcon = ((PackIcon)(rawRightArrowIcon));
                double offset = sectionScroll.HorizontalOffset;
                double updatedOffset = offset - 100;
                sectionScroll.ScrollToHorizontalOffset(updatedOffset);
                rightArrowIcon.Foreground = System.Windows.Media.Brushes.Black;
                bool isStartOffset = updatedOffset <= 0;
                if (isStartOffset)
                {
                    icon.Foreground = System.Windows.Media.Brushes.LightGray;
                }
            }
        }

        public void ToggleAllGamesSectionDisplayHandler (object sender, RoutedEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            object rawIconData = icon.DataContext;
            ToggleAllGamesSectionDisplay(rawIconData);
        }

        public void ToggleAllGamesSectionDisplay (object scroll)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            ScrollViewer allGamesScroll = ((ScrollViewer)(scroll));
                            object rawAllGamesSection = allGamesScroll.Content;
                            bool isRow = rawAllGamesSection is StackPanel;
                            string allGamesSectionCountLabelContent = "";
                            if (isRow)
                            {
                                WrapPanel allGamesSectionScrollContent = new WrapPanel();
                                allGamesScroll.Content = allGamesSectionScrollContent;

                                totalGames = totalGames.Take(6).ToList<GameResponseInfo>();
                                int totalGamesCount = totalGames.Count;
                                string rawTotalGamesCount = totalGamesCount.ToString();
                                allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                StackPanel allGamesSection = ((StackPanel)(rawAllGamesSection));
                                foreach (GameResponseInfo totalGamesItem in totalGames)
                                {
                                    string totalGamesItemName = totalGamesItem.name;
                                    Image allGamesSectionItem = new Image();
                                    allGamesSectionItem.Width = 150;
                                    allGamesSectionItem.Height = 250;
                                    allGamesSectionItem.Margin = new Thickness(15);
                                    allGamesSectionItem.BeginInit();
                                    allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                    allGamesSectionItem.EndInit();
                                    allGamesSectionScrollContent.Children.Add(allGamesSectionItem);

                                }

                            }
                            else
                            {
                                StackPanel allGamesSectionScrollContent = new StackPanel();
                                allGamesSectionScrollContent.Orientation = Orientation.Horizontal;
                                allGamesScroll.Content = allGamesSectionScrollContent;

                                totalGames = totalGames.Take(18).ToList<GameResponseInfo>();
                                int totalGamesCount = totalGames.Count;
                                string rawTotalGamesCount = totalGamesCount.ToString();
                                allGamesSectionCountLabelContent = "(" + rawTotalGamesCount + ")";
                                WrapPanel allGamesSection = ((WrapPanel)(rawAllGamesSection));
                                foreach (GameResponseInfo totalGamesItem in totalGames)
                                {
                                    string totalGamesItemName = totalGamesItem.name;
                                    Image allGamesSectionItem = new Image();
                                    allGamesSectionItem.Width = 150;
                                    allGamesSectionItem.Height = 250;
                                    allGamesSectionItem.Margin = new Thickness(15);
                                    allGamesSectionItem.BeginInit();
                                    allGamesSectionItem.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                    allGamesSectionItem.EndInit();
                                    allGamesSectionScrollContent.Children.Add(allGamesSectionItem);

                                }

                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void GetEquipmentGames ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            foreach (Game currentGame in currentGames)
            {
                string currentGameName = currentGame.name;
                TabItem equipmentControlItem = new TabItem();
                equipmentControlItem.Header = currentGameName;
                equipmentControl.Items.Add(equipmentControlItem);
            }
        }

        public void GetFriendActivities ()
        {
            myFriendActivities.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendRecords = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendRecord in friendRecords)
                            {
                                string localFriendId = friendRecord.friend;
                                friendsIds.Add(localFriendId);
                            }
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ActivitiesResponseInfo myInnerObj = (ActivitiesResponseInfo)js.Deserialize(objText, typeof(ActivitiesResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                        string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                        string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                        js = new JavaScriptSerializer();
                                        string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                        SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                        Settings currentSettings = loadedContent.settings;
                                        FriendActivity currentFriendActivitySettings = currentSettings.friendActivity;
                                        bool isAddFriend = currentFriendActivitySettings.isAddFriend;
                                        bool isOpenAchievement = currentFriendActivitySettings.isOpenAchievement;
                                        bool isBuyGame = currentFriendActivitySettings.isBuyGame;
                                        bool isInviteGroup = currentFriendActivitySettings.isInviteGroup;
                                        bool isCreateGroup = currentFriendActivitySettings.isCreateGroup;
                                        bool isAddGameToWishList = currentFriendActivitySettings.isAddGameToWishList;
                                        bool isAddReview = currentFriendActivitySettings.isAddReview;
                                        bool isUploadScreenShot = currentFriendActivitySettings.isUploadScreenShot;
                                        bool isAddVideo = currentFriendActivitySettings.isAddVideo;
                                        bool isAddSubjectToFavorite = currentFriendActivitySettings.isAddSubjectToFavorite;
                                        bool isDoAdvertisiment = currentFriendActivitySettings.isDoAdvertisiment;
                                        bool isScheduleEvent = currentFriendActivitySettings.isScheduleEvent;
                                        bool isSelectPlayerOfWeek = currentFriendActivitySettings.isSelectPlayerOfWeek;
                                        bool isUpgradeUserToAdmin = currentFriendActivitySettings.isUpgradeUserToAdmin;
                                        bool isReceiveComment = currentFriendActivitySettings.isReceiveComment;
                                        bool isProductDoAdvertisiment = currentFriendActivitySettings.isProductDoAdvertisiment;
                                        bool isWorkShopDoAdvertisiment = currentFriendActivitySettings.isWorkShopDoAdvertisiment;
                                        bool isAddGameRecomendation = currentFriendActivitySettings.isAddGameRecomendation;
                                        bool isAddSubject = currentFriendActivitySettings.isAddSubject;
                                        bool isDetectFromScreenShot = currentFriendActivitySettings.isDetectFromScreenShot;

                                        List<Activity> activities = myInnerObj.activities;
                                        List<Activity> friendActivities = activities.Where<Activity>((Activity activity) =>
                                        {
                                            string activityUserId = activity.user;
                                            string activityContent = activity.content;
                                            bool isFriendActivity = friendsIds.Contains(activityUserId);
                                            bool isContentMatch = (isAddFriend && activityContent == "addFriend") || (isUploadScreenShot && activityContent == "uploadScreenShot") || (isAddReview && activityContent == "createReview") || (isCreateGroup && activityContent == "createGroup") || (isBuyGame && activityContent == "buyGame") || (isDetectFromScreenShot && activityContent == "detectFromScreenShot") || (isDoAdvertisiment && activityContent == "doAdvertisiment") || (isProductDoAdvertisiment && activityContent == "productDoAdvertisiment") || (isScheduleEvent && activityContent == "scheduleEvent") || (isInviteGroup && activityContent == "inviteGroup") || (isReceiveComment && activityContent == "receiveComment") || (isSelectPlayerOfWeek && activityContent == "selectPlayerOfWeek") || (isUpgradeUserToAdmin && activityContent == "upgradeUserToAdmin") || (isWorkShopDoAdvertisiment && activityContent == "workShopDoAdvertisiment") || (isAddSubjectToFavorite && activityContent == "addSubjectToFavorite") || (isOpenAchievement && activityContent == "openAchviement") || (isAddGameToWishList && activityContent == "addGameToWishList") || (isAddGameRecomendation && activityContent == "addGameRecomendation");
                                            return isFriendActivity && isContentMatch;
                                        }).ToList<Activity>();
                                        foreach (Activity friendActivity in friendActivities)
                                        {
                                            string friendActivityUserId = friendActivity.user;
                                            string friendActivityContent = friendActivity.content;
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendActivityUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        isCreateGroup = friendActivityContent == "createGroup";
                                                        isUploadScreenShot = friendActivityContent == "uploadScreenShot";
                                                        isAddReview = friendActivityContent == "createReview";
                                                        isAddFriend = friendActivityContent == "addFriend";
                                                        isBuyGame = friendActivityContent == "buyGame";
                                                        isInviteGroup = friendActivityContent == "inviteGroup";
                                                        isAddSubjectToFavorite = friendActivityContent == "addSubjectToFavorite";
                                                        isReceiveComment = friendActivityContent == "receiveComment";
                                                        isAddGameToWishList = friendActivityContent == "addGameToWishList";
                                                        
                                                        User friendActivityUser = myNestedObj.user;
                                                        string friendActivityUserName = friendActivityUser.name;
                                                        StackPanel myFriendActivity = new StackPanel();
                                                        myFriendActivity.Margin = new Thickness(15);
                                                        myFriendActivity.Orientation = Orientation.Horizontal;
                                                        Image myFriendActivityUserAvatar = new Image();
                                                        myFriendActivityUserAvatar.Margin = new Thickness(15, 0, 15, 5);
                                                        myFriendActivityUserAvatar.Width = 35;
                                                        myFriendActivityUserAvatar.Height = 35;
                                                        myFriendActivityUserAvatar.BeginInit();
                                                        myFriendActivityUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + friendActivityUserId));
                                                        myFriendActivityUserAvatar.EndInit();
                                                        myFriendActivity.Children.Add(myFriendActivityUserAvatar);
                                                        StackPanel myFriendActivityAside = new StackPanel();
                                                        myFriendActivityAside.Margin = new Thickness(15);
                                                        TextBlock myFriendActivityAsideUserNameLabel = new TextBlock();
                                                        myFriendActivityAsideUserNameLabel.Text = friendActivityUserName;
                                                        myFriendActivityAsideUserNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                        myFriendActivityAside.Children.Add(myFriendActivityAsideUserNameLabel);
                                                        TextBlock myFriendActivityAsideUserActivityLabel = new TextBlock();
                                                        string myFriendActivityAsideUserActivityLabelContent = "";
                                                        if (isCreateGroup)
                                                        {

                                                            string groupId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    GroupResponseInfo myInnerNestedObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        Group group = myInnerNestedObj.group;
                                                                        string groupName = group.name;
                                                                        myFriendActivityAsideUserActivityLabelContent = "Создал группу " + groupName;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else if (isUploadScreenShot)
                                                        {

                                                            string screenShotId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/get/?id=" + screenShotId);
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    ScreenShotResponseInfo myInnerNestedObj = (ScreenShotResponseInfo)js.Deserialize(objText, typeof(ScreenShotResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        ScreenShot screenShot = myInnerNestedObj.screenShot;
                                                                        string screenShotDesc = screenShot.desc;
                                                                        myFriendActivityAsideUserActivityLabelContent = "Загрузил скриншот " + screenShotDesc;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else if (isAddReview)
                                                        {

                                                            string reviewId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/get/?id=" + reviewId);
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    ReviewResponseInfo myInnerNestedObj = (ReviewResponseInfo)js.Deserialize(objText, typeof(ReviewResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        Review review = myInnerNestedObj.review;
                                                                        string reviewGameId = review.game;
                                                                        HttpWebRequest gamesWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                                        gamesWebRequest.Method = "GET";
                                                                        gamesWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse gamesWebResponse = (HttpWebResponse)gamesWebRequest.GetResponse())
                                                                        {
                                                                            using (var gamesReader = new StreamReader(gamesWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = gamesReader.ReadToEnd();
                                                                                GamesListResponseInfo myGamesObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                                status = myGamesObj.status;
                                                                                isOkStatus = status == "OK";
                                                                                if (isOkStatus)
                                                                                {
                                                                                    List<GameResponseInfo> games = myGamesObj.games;
                                                                                    List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                                                    {
                                                                                        string gameId = game._id;
                                                                                        bool isIdMatches = gameId == reviewGameId;
                                                                                        return isIdMatches;
                                                                                    }).ToList<GameResponseInfo>();
                                                                                    int countResults = gameResults.Count;
                                                                                    bool isResultsFound = countResults >= 1;
                                                                                    if (isResultsFound)
                                                                                    {
                                                                                        GameResponseInfo reviewGame = gameResults[0];
                                                                                        string reviewGameName = reviewGame.name;
                                                                                        myFriendActivityAsideUserActivityLabelContent = "Опубликовал обзор по игре" + Environment.NewLine + reviewGameName;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else if (isAddFriend)
                                                        {

                                                            string friendId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        User user = myInnerNestedObj.user;
                                                                        string userName = user.name;
                                                                        myFriendActivityAsideUserActivityLabelContent = "Добавил друга" + Environment.NewLine + userName;
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else if (isBuyGame)
                                                        {

                                                            string buyedGameId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    GamesListResponseInfo myInnerNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {

                                                                        List<GameResponseInfo> games = myInnerNestedObj.games;
                                                                        List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                                        {
                                                                            string gameId = game._id;
                                                                            bool isIdMatches = gameId == buyedGameId;
                                                                            return isIdMatches;
                                                                        }).ToList<GameResponseInfo>();
                                                                        int countResults = gameResults.Count;
                                                                        bool isResultsFound = countResults >= 1;
                                                                        if (isResultsFound)
                                                                        {
                                                                            GameResponseInfo payedGame = gameResults[0];
                                                                            string gameName = payedGame.name;
                                                                            myFriendActivityAsideUserActivityLabelContent = "Купил игру" + Environment.NewLine + gameName;
                                                                        }

                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else if (isInviteGroup)
                                                        {

                                                            string groupId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    GroupResponseInfo myInnerNestedObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        Group group = myInnerNestedObj.group;
                                                                        string groupName = group.name;
                                                                        myFriendActivityAsideUserActivityLabelContent = "Присоединился к группе" + Environment.NewLine + groupName;
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else if (isAddSubjectToFavorite)
                                                        {

                                                            string favoriteManualId = friendActivity.data;
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/get/?id=" + favoriteManualId);
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    ManualResponseInfo myInnerNestedObj = (ManualResponseInfo)js.Deserialize(objText, typeof(ManualResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        Manual favoriteManual = myInnerNestedObj.manual;
                                                                        string favoriteManualName = favoriteManual.title;
                                                                        myFriendActivityAsideUserActivityLabelContent = "Добавляет руководство \"" + favoriteManualName + "\"" + Environment.NewLine + @"в избранное";
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else if (isReceiveComment)
                                                        {
                                                            string activityStatus = friendActivity.data;
                                                            myFriendActivityAsideUserActivityLabelContent = "Добавил статус" + Environment.NewLine + "\"" + activityStatus +"\"";
                                                        }
                                                        else if (isAddGameToWishList)
                                                        {
                                                            string activityStatus = friendActivity.data;
                                                            myFriendActivityAsideUserActivityLabelContent = "Обновил свой список желаемого";
                                                        }
                                                        myFriendActivityAsideUserActivityLabel.Text = myFriendActivityAsideUserActivityLabelContent;
                                                        myFriendActivityAsideUserActivityLabel.Margin = new Thickness(15, 5, 15, 5);
                                                        myFriendActivityAside.Children.Add(myFriendActivityAsideUserActivityLabel);
                                                        myFriendActivity.Children.Add(myFriendActivityAside);
                                                        myFriendActivities.Children.Add(myFriendActivity);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetMyActivities ()
        {
            myActivities.Children.Clear();
            try
            {
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/all");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = innerReader.ReadToEnd();
                        ActivitiesResponseInfo myInnerObj = (ActivitiesResponseInfo)js.Deserialize(objText, typeof(ActivitiesResponseInfo));
                        string status = myInnerObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            Settings currentSettings = loadedContent.settings;
                            FriendActivity currentFriendActivitySettings = currentSettings.friendActivity;
                            bool isAddFriend = currentFriendActivitySettings.isAddFriend;
                            bool isOpenAchievement = currentFriendActivitySettings.isOpenAchievement;
                            bool isBuyGame = currentFriendActivitySettings.isBuyGame;
                            bool isInviteGroup = currentFriendActivitySettings.isInviteGroup;
                            bool isCreateGroup = currentFriendActivitySettings.isCreateGroup;
                            bool isAddGameToWishList = currentFriendActivitySettings.isAddGameToWishList;
                            bool isAddReview = currentFriendActivitySettings.isAddReview;
                            bool isUploadScreenShot = currentFriendActivitySettings.isUploadScreenShot;
                            bool isAddVideo = currentFriendActivitySettings.isAddVideo;
                            bool isAddSubjectToFavorite = currentFriendActivitySettings.isAddSubjectToFavorite;
                            bool isDoAdvertisiment = currentFriendActivitySettings.isDoAdvertisiment;
                            bool isScheduleEvent = currentFriendActivitySettings.isScheduleEvent;
                            bool isSelectPlayerOfWeek = currentFriendActivitySettings.isSelectPlayerOfWeek;
                            bool isUpgradeUserToAdmin = currentFriendActivitySettings.isUpgradeUserToAdmin;
                            bool isReceiveComment = currentFriendActivitySettings.isReceiveComment;
                            bool isProductDoAdvertisiment = currentFriendActivitySettings.isProductDoAdvertisiment;
                            bool isWorkShopDoAdvertisiment = currentFriendActivitySettings.isWorkShopDoAdvertisiment;
                            bool isAddGameRecomendation = currentFriendActivitySettings.isAddGameRecomendation;
                            bool isAddSubject = currentFriendActivitySettings.isAddSubject;
                            bool isDetectFromScreenShot = currentFriendActivitySettings.isDetectFromScreenShot;

                            List<Activity> activities = myInnerObj.activities;
                            List<Activity> friendActivities = activities.Where<Activity>((Activity activity) =>
                            {
                                string activityUserId = activity.user;
                                string activityContent = activity.content;
                                bool isMyActivity = currentUserId == activityUserId;
                                return isMyActivity;
                            }).ToList<Activity>();
                            foreach (Activity friendActivity in friendActivities)
                            {
                                string friendActivityUserId = friendActivity.user;
                                string friendActivityContent = friendActivity.content;
                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendActivityUserId);
                                nestedWebRequest.Method = "GET";
                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                {
                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = nestedReader.ReadToEnd();
                                        UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myNestedObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            isCreateGroup = friendActivityContent == "createGroup";
                                            isUploadScreenShot = friendActivityContent == "uploadScreenShot";
                                            isAddReview = friendActivityContent == "createReview";
                                            isAddFriend = friendActivityContent == "addFriend";
                                            isBuyGame = friendActivityContent == "buyGame";
                                            isInviteGroup = friendActivityContent == "inviteGroup";
                                            isAddSubjectToFavorite = friendActivityContent == "addSubjectToFavorite";
                                            isReceiveComment = friendActivityContent == "receiveComment";
                                            isAddGameToWishList = friendActivityContent == "addGameToWishList";

                                            User friendActivityUser = myNestedObj.user;
                                            string friendActivityUserName = friendActivityUser.name;
                                            StackPanel myActivity = new StackPanel();
                                            myActivity.Margin = new Thickness(15);
                                            myActivity.Orientation = Orientation.Horizontal;
                                            Image myActivityUserAvatar = new Image();
                                            myActivityUserAvatar.Margin = new Thickness(15, 0, 15, 5);
                                            myActivityUserAvatar.Width = 35;
                                            myActivityUserAvatar.Height = 35;
                                            myActivityUserAvatar.BeginInit();
                                            myActivityUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + friendActivityUserId));
                                            myActivityUserAvatar.EndInit();
                                            myActivity.Children.Add(myActivityUserAvatar);
                                            StackPanel myActivityAside = new StackPanel();
                                            myActivityAside.Margin = new Thickness(15);
                                            TextBlock myActivityAsideUserNameLabel = new TextBlock();
                                            myActivityAsideUserNameLabel.Text = friendActivityUserName;
                                            myActivityAsideUserNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                            myActivityAside.Children.Add(myActivityAsideUserNameLabel);
                                            TextBlock myActivityAsideUserActivityLabel = new TextBlock();
                                            string myActivityAsideUserActivityLabelContent = "";
                                            if (isCreateGroup)
                                            {

                                                string groupId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        GroupResponseInfo myInnerNestedObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            Group group = myInnerNestedObj.group;
                                                            string groupName = group.name;
                                                            myActivityAsideUserActivityLabelContent = "Создал группу " + groupName;
                                                        }
                                                    }
                                                }
                                            }
                                            else if (isUploadScreenShot)
                                            {

                                                string screenShotId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/get/?id=" + screenShotId);
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        ScreenShotResponseInfo myInnerNestedObj = (ScreenShotResponseInfo)js.Deserialize(objText, typeof(ScreenShotResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            ScreenShot screenShot = myInnerNestedObj.screenShot;
                                                            string screenShotDesc = screenShot.desc;
                                                            myActivityAsideUserActivityLabelContent = "Загрузил скриншот " + screenShotDesc;
                                                        }
                                                    }
                                                }
                                            }
                                            else if (isAddReview)
                                            {

                                                string reviewId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/get/?id=" + reviewId);
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        ReviewResponseInfo myInnerNestedObj = (ReviewResponseInfo)js.Deserialize(objText, typeof(ReviewResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            Review review = myInnerNestedObj.review;
                                                            string reviewGameId = review.game;
                                                            HttpWebRequest gamesWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                            gamesWebRequest.Method = "GET";
                                                            gamesWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse gamesWebResponse = (HttpWebResponse)gamesWebRequest.GetResponse())
                                                            {
                                                                using (var gamesReader = new StreamReader(gamesWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = gamesReader.ReadToEnd();
                                                                    GamesListResponseInfo myGamesObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                    status = myGamesObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        List<GameResponseInfo> games = myGamesObj.games;
                                                                        List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                                        {
                                                                            string gameId = game._id;
                                                                            bool isIdMatches = gameId == reviewGameId;
                                                                            return isIdMatches;
                                                                        }).ToList<GameResponseInfo>();
                                                                        int countResults = gameResults.Count;
                                                                        bool isResultsFound = countResults >= 1;
                                                                        if (isResultsFound)
                                                                        {
                                                                            GameResponseInfo reviewGame = gameResults[0];
                                                                            string reviewGameName = reviewGame.name;
                                                                            myActivityAsideUserActivityLabelContent = "Опубликовал обзор по игре" + Environment.NewLine + reviewGameName;
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }
                                                }

                                            }
                                            else if (isAddFriend)
                                            {

                                                string friendId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            User user = myInnerNestedObj.user;
                                                            string userName = user.name;
                                                            myActivityAsideUserActivityLabelContent = "Добавил друга" + Environment.NewLine + userName;
                                                        }
                                                    }
                                                }

                                            }
                                            else if (isBuyGame)
                                            {

                                                string buyedGameId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        GamesListResponseInfo myInnerNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {

                                                            List<GameResponseInfo> games = myInnerNestedObj.games;
                                                            List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                            {
                                                                string gameId = game._id;
                                                                bool isIdMatches = gameId == buyedGameId;
                                                                return isIdMatches;
                                                            }).ToList<GameResponseInfo>();
                                                            int countResults = gameResults.Count;
                                                            bool isResultsFound = countResults >= 1;
                                                            if (isResultsFound)
                                                            {
                                                                GameResponseInfo payedGame = gameResults[0];
                                                                string gameName = payedGame.name;
                                                                myActivityAsideUserActivityLabelContent = "Купил игру" + Environment.NewLine + gameName;
                                                            }

                                                        }
                                                    }
                                                }

                                            }
                                            else if (isInviteGroup)
                                            {

                                                string groupId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        GroupResponseInfo myInnerNestedObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            Group group = myInnerNestedObj.group;
                                                            string groupName = group.name;
                                                            myActivityAsideUserActivityLabelContent = "Присоединился к группе" + Environment.NewLine + groupName;
                                                        }
                                                    }
                                                }

                                            }
                                            else if (isAddSubjectToFavorite)
                                            {

                                                string favoriteManualId = friendActivity.data;
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/get/?id=" + favoriteManualId);
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        ManualResponseInfo myInnerNestedObj = (ManualResponseInfo)js.Deserialize(objText, typeof(ManualResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            Manual favoriteManual = myInnerNestedObj.manual;
                                                            string favoriteManualName = favoriteManual.title;
                                                            myActivityAsideUserActivityLabelContent = "Добавляет руководство \"" + favoriteManualName + "\"" + Environment.NewLine + @"в избранное";
                                                        }
                                                    }
                                                }

                                            }
                                            else if (isReceiveComment)
                                            {
                                                string activityStatus = friendActivity.data;
                                                myActivityAsideUserActivityLabelContent = "Добавил статус" + Environment.NewLine + "\"" + activityStatus + "\"";
                                            }
                                            else if (isAddGameToWishList)
                                            {
                                                string activityStatus = friendActivity.data;
                                                myActivityAsideUserActivityLabelContent = "Обновил свой список желаемого";
                                            }
                                            myActivityAsideUserActivityLabel.Text = myActivityAsideUserActivityLabelContent;
                                            myActivityAsideUserActivityLabel.Margin = new Thickness(15, 5, 15, 5);
                                            myActivityAside.Children.Add(myActivityAsideUserActivityLabel);
                                            myActivity.Children.Add(myActivityAside);
                                            myActivities.Children.Add(myActivity);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetFriendActivitySettings ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            Settings currentSettings = loadedContent.settings;
            FriendActivity currentFriendActivitySettings = currentSettings.friendActivity;
            bool isAddFriend = currentFriendActivitySettings.isAddFriend;
            bool isOpenAchievement = currentFriendActivitySettings.isOpenAchievement;
            bool isBuyGame = currentFriendActivitySettings.isBuyGame;
            bool isInviteGroup = currentFriendActivitySettings.isInviteGroup;
            bool isCreateGroup = currentFriendActivitySettings.isCreateGroup;
            bool isAddGameToWishList = currentFriendActivitySettings.isAddGameToWishList;
            bool isAddReview = currentFriendActivitySettings.isAddReview;
            bool isUploadScreenShot = currentFriendActivitySettings.isUploadScreenShot;
            bool isAddVideo = currentFriendActivitySettings.isAddVideo;
            bool isAddSubjectToFavorite = currentFriendActivitySettings.isAddSubjectToFavorite;
            bool isDoAdvertisiment = currentFriendActivitySettings.isDoAdvertisiment;
            bool isScheduleEvent = currentFriendActivitySettings.isScheduleEvent;
            bool isSelectPlayerOfWeek = currentFriendActivitySettings.isSelectPlayerOfWeek;
            bool isUpgradeUserToAdmin = currentFriendActivitySettings.isUpgradeUserToAdmin;
            bool isReceiveComment = currentFriendActivitySettings.isReceiveComment;
            bool isProductDoAdvertisiment = currentFriendActivitySettings.isProductDoAdvertisiment;
            bool isWorkShopDoAdvertisiment = currentFriendActivitySettings.isWorkShopDoAdvertisiment;
            bool isAddGameRecomendation = currentFriendActivitySettings.isAddGameRecomendation;
            bool isAddSubject = currentFriendActivitySettings.isAddSubject;
            bool isDetectFromScreenShot = currentFriendActivitySettings.isDetectFromScreenShot;
            friendActivitySettingsAddFriendCheckBox.IsChecked = isAddFriend;
            friendActivitySettingsOpenAchievementCheckBox.IsChecked = isOpenAchievement;
            friendActivitySettingsBuyGameCheckBox.IsChecked = isBuyGame;
            friendActivitySettingsInviteGroupCheckBox.IsChecked = isInviteGroup;
            friendActivitySettingsCreateGroupCheckBox.IsChecked = isCreateGroup;
            friendActivitySettingsAddGameToWishListCheckBox.IsChecked = isAddGameToWishList;
            friendActivitySettingsAddReviewCheckBox.IsChecked = isAddReview;
            friendActivitySettingsUploadScreenShotCheckBox.IsChecked = isUploadScreenShot;
            friendActivitySettingsAddVideoCheckBox.IsChecked = isAddVideo;
            friendActivitySettingsAddSubjectToFavoriteCheckBox.IsChecked = isAddSubjectToFavorite;
            friendActivitySettingsDoAdvertisimentCheckBox.IsChecked = isDoAdvertisiment;
            friendActivitySettingsScheduleEventCheckBox.IsChecked = isScheduleEvent;
            friendActivitySettingsSelectPlayerOfWeekCheckBox.IsChecked = isSelectPlayerOfWeek;
            friendActivitySettingsUpgradeUserToAdminCheckBox.IsChecked = isUpgradeUserToAdmin;
            friendActivitySettingsReceiveCommentCheckBox.IsChecked = isReceiveComment;
            friendActivitySettingsProductDoAdvertisimentCheckBox.IsChecked = isProductDoAdvertisiment;
            friendActivitySettingsWorkShopDoAdvertisimentCheckBox.IsChecked = isWorkShopDoAdvertisiment;
            friendActivitySettingsAddGameRecomendationCheckBox.IsChecked = isAddGameRecomendation;
            friendActivitySettingsAddSubjectCheckBox.IsChecked = isAddSubject;
            friendActivitySettingsDetectFromScreenShotCheckBox.IsChecked = isDetectFromScreenShot;
        }

        /*public void PublishActivityStatusHandler ()
        {
            PublishActivityStatus();
        }

        public void PublishActivityStatus ()
        {
            string activityStatusBoxContent = activityStatusBox.Text;
            try
            {
                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=receiveComment&data=" + activityStatusBoxContent);
                innerNestedWebRequest.Method = "GET";
                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                {
                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = innerNestedReader.ReadToEnd();
                        UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myInnerNestedObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            activityStatusBox.Text = "";
                            GetMyActivities();
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }*/

                            public void GetFriendsForPresent ()
        {
            string friendsForPresentBoxContent = friendsForPresentBox.Text;
            int friendsForPresentBoxContentLength = friendsForPresentBoxContent.Length;
            string insensitiveCaseFriendsForPresentBoxContent = friendsForPresentBoxContent.ToLower();
            bool isFilterDisabled = friendsForPresentBoxContentLength <= 0;
            friendsForPresent.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendRecords = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendRecord in friendRecords)
                            {
                                string localFriendId = friendRecord.friend;
                                friendsIds.Add(localFriendId);
                            }
                            int friendsCursor = -1;
                            foreach (Friend myFriend in friendRecords)
                            {
                                string friendId = myFriend.friend;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            User friend = myInnerObj.user;
                                            string myFriendName = friend.name;
                                            string insensitiveCaseFriendName = myFriendName.ToLower();
                                            bool isKeywordsMatch = insensitiveCaseFriendName.Contains(insensitiveCaseFriendsForPresentBoxContent);
                                            bool isFilterMatch = isFilterDisabled || isKeywordsMatch;
                                            if (isFilterMatch)
                                            {
                                                friendsCursor++;
                                                StackPanel friendForPresent = new StackPanel();
                                                friendForPresent.Orientation = Orientation.Horizontal;
                                                RadioButton friendForPresentRadioBtn = new RadioButton();
                                                friendForPresentRadioBtn.VerticalAlignment = VerticalAlignment.Center;
                                                friendForPresentRadioBtn.Margin = new Thickness(15, 0, 15, 0);
                                                bool isDefaultCheck = friendsCursor == 0;
                                                friendForPresentRadioBtn.IsChecked = isDefaultCheck;
                                                friendForPresentRadioBtn.Click += FriendForPresentCheckedHandler;
                                                friendForPresent.Children.Add(friendForPresentRadioBtn);
                                                Image friendForPresentAvatar = new Image();
                                                friendForPresentAvatar.Width = 35;
                                                friendForPresentAvatar.Height = 35;
                                                friendForPresentAvatar.Margin = new Thickness(5);
                                                friendForPresentAvatar.BeginInit();
                                                friendForPresentAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + friendId));
                                                friendForPresentAvatar.EndInit();
                                                friendForPresent.Children.Add(friendForPresentAvatar);
                                                TextBlock friendForPresentNameLabel = new TextBlock();
                                                friendForPresentNameLabel.Text = myFriendName;
                                                friendForPresent.Children.Add(friendForPresentNameLabel);
                                                friendsForPresent.Children.Add(friendForPresent);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void FriendForPresentCheckedHandler (object sender, RoutedEventArgs e)
        {
            RadioButton radioBtn = ((RadioButton)(sender));
            FriendForPresentChecked(radioBtn);
        }

        public void FriendForPresentChecked (RadioButton radioBtn)
        {
            object rawIsChecked = radioBtn.IsChecked;
            bool isChecked = ((bool)(rawIsChecked));
            if (isChecked)
            {
                foreach (StackPanel friendsForPresent in friendsForPresent.Children)
                {
                    UIElementCollection friendsForPresentChildren = friendsForPresent.Children;
                    UIElement rawSomeRadioButton = friendsForPresentChildren[0];
                    RadioButton someRadioButton = ((RadioButton)(rawSomeRadioButton));
                    someRadioButton.IsChecked = false;
                }
                radioBtn.IsChecked = true;
            }
        }

        public void GetGamesByTags()
        {
            GetIndiGames();
            GetActionGames();
            GetTravelGames();
            GetCasualGames();
            GetSimulatorGames();
        }

        public void GetIndiGames()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> genreGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameGenre = someGame.genre;
                                bool isGenreMatch = someGameGenre == "Инди";
                                return isGenreMatch;
                            }).ToList<GameResponseInfo>();
                            foreach (GameResponseInfo genreGame in genreGames)
                            {
                                string genreGameName = genreGame.name;
                                int genreGamePrice = genreGame.price;
                                StackPanel genreGamesItem = new StackPanel();
                                genreGamesItem.Margin = new Thickness(5, 15, 5, 15);
                                Image genreGamesItemThumbnail = new Image();
                                genreGamesItemThumbnail.Width = 250;
                                genreGamesItemThumbnail.Height = 100;
                                genreGamesItemThumbnail.BeginInit();
                                genreGamesItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + genreGameName));
                                genreGamesItemThumbnail.EndInit();
                                genreGamesItem.Children.Add(genreGamesItemThumbnail);
                                TextBlock genreGamesItemNameLabel = new TextBlock();
                                genreGamesItemNameLabel.Text = genreGameName;
                                genreGamesItem.Children.Add(genreGamesItemNameLabel);
                                TextBlock genreGamesItemPriceLabel = new TextBlock();
                                string rawGenreGamePrice = genreGamePrice.ToString();
                                string genreGamesItemPriceLabelContent = rawGenreGamePrice + " руб.";
                                bool isFreeGame = genreGamePrice <= 0;
                                if (isFreeGame)
                                {
                                    genreGamesItemPriceLabelContent = "Бесплатная";
                                }
                                genreGamesItemPriceLabel.Text = genreGamesItemPriceLabelContent;
                                genreGamesItem.Children.Add(genreGamesItemPriceLabel);
                                indiGames.Children.Add(genreGamesItem);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetActionGames()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> genreGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameGenre = someGame.genre;
                                bool isGenreMatch = someGameGenre == "Экшен";
                                return isGenreMatch;
                            }).ToList<GameResponseInfo>();
                            foreach (GameResponseInfo genreGame in genreGames)
                            {
                                string genreGameName = genreGame.name;
                                int genreGamePrice = genreGame.price;
                                StackPanel genreGamesItem = new StackPanel();
                                genreGamesItem.Margin = new Thickness(5, 15, 5, 15);
                                Image genreGamesItemThumbnail = new Image();
                                genreGamesItemThumbnail.Width = 250;
                                genreGamesItemThumbnail.Height = 100;
                                genreGamesItemThumbnail.BeginInit();
                                genreGamesItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + genreGameName));
                                genreGamesItemThumbnail.EndInit();
                                genreGamesItem.Children.Add(genreGamesItemThumbnail);
                                TextBlock genreGamesItemNameLabel = new TextBlock();
                                genreGamesItemNameLabel.Text = genreGameName;
                                genreGamesItem.Children.Add(genreGamesItemNameLabel);
                                TextBlock genreGamesItemPriceLabel = new TextBlock();
                                string rawGenreGamePrice = genreGamePrice.ToString();
                                string genreGamesItemPriceLabelContent = rawGenreGamePrice + " руб.";
                                bool isFreeGame = genreGamePrice <= 0;
                                if (isFreeGame)
                                {
                                    genreGamesItemPriceLabelContent = "Бесплатная";
                                }
                                genreGamesItemPriceLabel.Text = genreGamesItemPriceLabelContent;
                                genreGamesItem.Children.Add(genreGamesItemPriceLabel);
                                actionGames.Children.Add(genreGamesItem);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetTravelGames()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> genreGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameGenre = someGame.genre;
                                bool isGenreMatch = someGameGenre == "Приключение";
                                return isGenreMatch;
                            }).ToList<GameResponseInfo>();
                            foreach (GameResponseInfo genreGame in genreGames)
                            {
                                string genreGameName = genreGame.name;
                                int genreGamePrice = genreGame.price;
                                StackPanel genreGamesItem = new StackPanel();
                                genreGamesItem.Margin = new Thickness(5, 15, 5, 15);
                                Image genreGamesItemThumbnail = new Image();
                                genreGamesItemThumbnail.Width = 250;
                                genreGamesItemThumbnail.Height = 100;
                                genreGamesItemThumbnail.BeginInit();
                                genreGamesItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + genreGameName));
                                genreGamesItemThumbnail.EndInit();
                                genreGamesItem.Children.Add(genreGamesItemThumbnail);
                                TextBlock genreGamesItemNameLabel = new TextBlock();
                                genreGamesItemNameLabel.Text = genreGameName;
                                genreGamesItem.Children.Add(genreGamesItemNameLabel);
                                TextBlock genreGamesItemPriceLabel = new TextBlock();
                                string rawGenreGamePrice = genreGamePrice.ToString();
                                string genreGamesItemPriceLabelContent = rawGenreGamePrice + " руб.";
                                bool isFreeGame = genreGamePrice <= 0;
                                if (isFreeGame)
                                {
                                    genreGamesItemPriceLabelContent = "Бесплатная";
                                }
                                genreGamesItemPriceLabel.Text = genreGamesItemPriceLabelContent;
                                genreGamesItem.Children.Add(genreGamesItemPriceLabel);
                                travelGames.Children.Add(genreGamesItem);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetCasualGames()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> genreGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameGenre = someGame.genre;
                                bool isGenreMatch = someGameGenre == "Казуальная игра";
                                return isGenreMatch;
                            }).ToList<GameResponseInfo>();
                            foreach (GameResponseInfo genreGame in genreGames)
                            {
                                string genreGameName = genreGame.name;
                                int genreGamePrice = genreGame.price;
                                StackPanel genreGamesItem = new StackPanel();
                                genreGamesItem.Margin = new Thickness(5, 15, 5, 15);
                                Image genreGamesItemThumbnail = new Image();
                                genreGamesItemThumbnail.Width = 250;
                                genreGamesItemThumbnail.Height = 100;
                                genreGamesItemThumbnail.BeginInit();
                                genreGamesItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + genreGameName));
                                genreGamesItemThumbnail.EndInit();
                                genreGamesItem.Children.Add(genreGamesItemThumbnail);
                                TextBlock genreGamesItemNameLabel = new TextBlock();
                                genreGamesItemNameLabel.Text = genreGameName;
                                genreGamesItem.Children.Add(genreGamesItemNameLabel);
                                TextBlock genreGamesItemPriceLabel = new TextBlock();
                                string rawGenreGamePrice = genreGamePrice.ToString();
                                string genreGamesItemPriceLabelContent = rawGenreGamePrice + " руб.";
                                bool isFreeGame = genreGamePrice <= 0;
                                if (isFreeGame)
                                {
                                    genreGamesItemPriceLabelContent = "Бесплатная";
                                }
                                genreGamesItemPriceLabel.Text = genreGamesItemPriceLabelContent;
                                genreGamesItem.Children.Add(genreGamesItemPriceLabel);
                                casualGames.Children.Add(genreGamesItem);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetSimulatorGames()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> genreGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameGenre = someGame.genre;
                                bool isGenreMatch = someGameGenre == "Симулятор";
                                return isGenreMatch;
                            }).ToList<GameResponseInfo>();
                            foreach (GameResponseInfo genreGame in genreGames)
                            {
                                string genreGameName = genreGame.name;
                                int genreGamePrice = genreGame.price;
                                StackPanel genreGamesItem = new StackPanel();
                                genreGamesItem.Margin = new Thickness(5, 15, 5, 15);
                                Image genreGamesItemThumbnail = new Image();
                                genreGamesItemThumbnail.Width = 250;
                                genreGamesItemThumbnail.Height = 100;
                                genreGamesItemThumbnail.BeginInit();
                                genreGamesItemThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + genreGameName));
                                genreGamesItemThumbnail.EndInit();
                                genreGamesItem.Children.Add(genreGamesItemThumbnail);
                                TextBlock genreGamesItemNameLabel = new TextBlock();
                                genreGamesItemNameLabel.Text = genreGameName;
                                genreGamesItem.Children.Add(genreGamesItemNameLabel);
                                TextBlock genreGamesItemPriceLabel = new TextBlock();
                                string rawGenreGamePrice = genreGamePrice.ToString();
                                string genreGamesItemPriceLabelContent = rawGenreGamePrice + " руб.";
                                bool isFreeGame = genreGamePrice <= 0;
                                if (isFreeGame)
                                {
                                    genreGamesItemPriceLabelContent = "Бесплатная";
                                }
                                genreGamesItemPriceLabel.Text = genreGamesItemPriceLabelContent;
                                genreGamesItem.Children.Add(genreGamesItemPriceLabel);
                                simulatorGames.Children.Add(genreGamesItem);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public string GetMaxHoursForGame (List<string> userIds, string gameId)
        {
            try
            {
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = innerReader.ReadToEnd();
                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                        string status = myInnerObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameRelation> relations = myInnerObj.relations;
                            List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                            {
                                string localGameId = relation.game;
                                string localUserId = relation.user;
                                bool isMyGame = userIds.Contains(localUserId);
                                bool isCurrentGame = localGameId == gameId;
                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                return isLocalGamePayed;
                            }).ToList<GameRelation>();
                            List<GameRelation> orderedRelations = userGameRelations.OrderByDescending((GameRelation relation) =>
                            {
                                return relation.hours;
                            }).ToList<GameRelation>();
                            int countUserGameRelations = orderedRelations.Count;
                            bool isHaveRelations = countUserGameRelations >= 1;
                            if (isHaveRelations)
                            {
                                GameRelation userGameRelation = orderedRelations[0];
                                string hours = userGameRelation.hours;
                                return hours;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
            return "0";
        }

        public void GetPopularGamesForFriends ()
        {
            popularGamesForFriends.Children.Clear();
            DateTime currentDate = DateTime.Now;
            object rawSortType = popularGamesForFriendsPanel.DataContext;
            string sortType = rawSortType.ToString();
            bool isLastSessions = sortType == "last";
            bool isNotLastSessions = !isLastSessions;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendRecords = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendRecord in friendRecords)
                            {
                                string localFriendId = friendRecord.friend;
                                friendsIds.Add(localFriendId);
                            }
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/sessions/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GameSessionsResponseInfo myInnerObj = (GameSessionsResponseInfo)js.Deserialize(objText, typeof(GameSessionsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GameSession> sessions = myInnerObj.sessions;
                                        List<GameSession> friendRecommendations = sessions.Where<GameSession>((GameSession session) =>
                                        {
                                            DateTime sessionDate = session.date;
                                            string reviewUserId = session.user;
                                            bool isMyFriendRecommendation = friendsIds.Contains(reviewUserId);
                                            TimeSpan interval = currentDate.Subtract(sessionDate);
                                            double intervalDays = interval.TotalDays;
                                            bool isLastSession = intervalDays <= 14;
                                            bool isFilterMatch = (isNotLastSessions || isLastSessions && isLastSession);
                                            bool isNotMe = reviewUserId != currentUserId;
                                            bool isAddSession = isMyFriendRecommendation && isFilterMatch && isNotMe;
                                            return isAddSession;
                                        }).Distinct(new GameSessionComparer()).ToList<GameSession>();
                                        int friendRecommendationsCount = friendRecommendations.Count;
                                        string firstResultNumber = "0";
                                        bool isHaveResults = friendRecommendationsCount >= 1;
                                        if (isHaveResults)
                                        {
                                            firstResultNumber = "1";
                                        }
                                        int resultsCursor = 0;
                                        foreach (GameSession recommendation in friendRecommendations)
                                        {
                                            string recommendationId = recommendation._id;
                                            string recommendationUserId = recommendation.user;
                                            DateTime recommendationDate = recommendation.date;
                                            string recommendationGameId = recommendation.game;

                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + recommendationUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        User user = myNestedObj.user;
                                                        string userName = user.name;

                                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                        innerNestedWebRequest.Method = "GET";
                                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                        {
                                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                            {
                                                                js = new JavaScriptSerializer();
                                                                objText = innerNestedReader.ReadToEnd();
                                                                GamesListResponseInfo myInnerNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                status = myobj.status;
                                                                isOkStatus = status == "OK";
                                                                if (isOkStatus)
                                                                {
                                                                    List<GameResponseInfo> games = myInnerNestedObj.games;
                                                                    List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                                    {
                                                                        string gameId = game._id;
                                                                        bool isIdMatches = gameId == recommendationGameId;
                                                                        return isIdMatches;
                                                                    }).ToList<GameResponseInfo>();
                                                                    int countResults = gameResults.Count;
                                                                    bool isResultsFound = countResults >= 1;
                                                                    if (isResultsFound)
                                                                    {

                                                                        HttpWebRequest gameRelationWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                                        gameRelationWebRequest.Method = "GET";
                                                                        gameRelationWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse gameRelationWebResponse = (HttpWebResponse)gameRelationWebRequest.GetResponse())
                                                                        {
                                                                            using (var gameRelationReader = new StreamReader(gameRelationWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = gameRelationReader.ReadToEnd();
                                                                                GameRelationsResponseInfo myGameRelationObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                                                status = myGameRelationObj.status;
                                                                                isOkStatus = status == "OK";
                                                                                if (isOkStatus)
                                                                                {
                                                                                    List<GameRelation> relations = myGameRelationObj.relations;
                                                                                    List<GameRelation> userGameRelations = relations.Where<GameRelation>((GameRelation relation) =>
                                                                                    {
                                                                                        string localGameId = relation.game;
                                                                                        string localUserId = relation.user;
                                                                                        bool isMyGame = recommendationUserId == localUserId;
                                                                                        bool isCurrentGame = localGameId == recommendationGameId;
                                                                                        bool isLocalGamePayed = isMyGame && isCurrentGame;
                                                                                        return isLocalGamePayed;
                                                                                    }).ToList<GameRelation>();
                                                                                    int userGameRelationsCount = userGameRelations.Count;
                                                                                    bool isHaveRelations = userGameRelationsCount >= 1;
                                                                                    if (isHaveRelations)
                                                                                    {
                                                                                        string rawMaxHours = GetMaxHoursForGame(friendsIds, recommendationGameId);
                                                                                        Debugger.Log(0, "debug", Environment.NewLine + "rawMaxHours: " + rawMaxHours + Environment.NewLine);
                                                                                        int maxHours = Int32.Parse(rawMaxHours);
                                                                                        GameRelation userGameRelation = userGameRelations[0];
                                                                                        string rawHours = userGameRelation.hours;
                                                                                        int hours = Int32.Parse(rawHours);

                                                                                        resultsCursor++;
                                                                                        GameResponseInfo recommendationGame = gameResults[0];
                                                                                        string recommendationGameName = recommendationGame.name;
                                                                                        StackPanel friendRecommendation = new StackPanel();
                                                                                        friendRecommendation.Background = System.Windows.Media.Brushes.LightGray;
                                                                                        friendRecommendation.Margin = new Thickness(15);
                                                                                        friendRecommendation.Orientation = Orientation.Horizontal;
                                                                                        Image friendRecommendationThumbnail = new Image();
                                                                                        friendRecommendationThumbnail.Width = 100;
                                                                                        friendRecommendationThumbnail.Height = 100;
                                                                                        friendRecommendationThumbnail.Margin = new Thickness(15);
                                                                                        friendRecommendationThumbnail.BeginInit();
                                                                                        friendRecommendationThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recommendationGameName));
                                                                                        friendRecommendationThumbnail.EndInit();
                                                                                        friendRecommendation.Children.Add(friendRecommendationThumbnail);
                                                                                        Image friendRecommendationAvatar = new Image();
                                                                                        friendRecommendationAvatar.Width = 40;
                                                                                        friendRecommendationAvatar.Height = 40;
                                                                                        friendRecommendationAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                                        friendRecommendationAvatar.BeginInit();
                                                                                        friendRecommendationAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + recommendationUserId));
                                                                                        friendRecommendationAvatar.EndInit();
                                                                                        friendRecommendation.Children.Add(friendRecommendationAvatar);
                                                                                        ProgressBar friendRecommendationHoursBar = new ProgressBar();
                                                                                        friendRecommendationHoursBar.Margin = new Thickness(0, 5, 0, 5);
                                                                                        friendRecommendationHoursBar.Width = 150;
                                                                                        friendRecommendationHoursBar.Height = 25;
                                                                                        friendRecommendationHoursBar.Minimum = 0;
                                                                                        friendRecommendationHoursBar.Maximum = maxHours;
                                                                                        friendRecommendationHoursBar.Value = hours;
                                                                                        friendRecommendation.Children.Add(friendRecommendationHoursBar);
                                                                                        popularGamesForFriends.Children.Add(friendRecommendation);

                                                                                    }

                                                                                }
                                                                            }
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        string rawResultsCursor = resultsCursor.ToString();
                                        string popularGamesForFriendsResultsLabelContent = "Результаты " + firstResultNumber + "-" + rawResultsCursor + " из " + rawResultsCursor;
                                        popularGamesForFriendsResultsLabel.Text = popularGamesForFriendsResultsLabelContent;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SortPopularGamesForFriendsHandler (object sender, RoutedEventArgs e)
        {
            StackPanel sortTypePanel = ((StackPanel)(sender));
            object rawSortType = sortTypePanel.DataContext;
            string sortType = rawSortType.ToString();
            SortPopularGamesForFriends(sortType);
        }

        public void SortPopularGamesForFriends (string sortType)
        {
            popularGamesForFriendsPanel.DataContext = sortType;
            GetPopularGamesForFriends();
        }

        public void GetLastFriendRecommendations ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendRecords = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendRecord in friendRecords)
                            {
                                string localFriendId = friendRecord.friend;
                                friendsIds.Add(localFriendId);
                            }
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<Review> recommendations = myInnerObj.reviews;
                                        DateTime currentDate = DateTime.Now;
                                        List<Review> friendRecommendations = recommendations.Where<Review>((Review review) =>
                                        {
                                            string reviewUserId = review.user;
                                            DateTime reviewDate = review.date;
                                            bool isMyFriendRecommendation = friendsIds.Contains(reviewUserId);
                                            TimeSpan interval = currentDate.Subtract(reviewDate);
                                            double intervalDays = interval.TotalDays;
                                            bool isLastRecommendation = intervalDays <= 14;
                                            bool isLastFriendRecommendation = isMyFriendRecommendation && isLastRecommendation;
                                            return isLastFriendRecommendation;
                                        }).ToList<Review>();
                                        foreach (Review recommendation in friendRecommendations)
                                        {
                                            string recommendationId = recommendation._id;
                                            string recommendationUserId = recommendation.user;
                                            DateTime recommendationDate = recommendation.date;
                                            string recommendationDesc = recommendation.desc;
                                            string recommendationGameId = recommendation.game;

                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + recommendationUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        User user = myNestedObj.user;
                                                        string userName = user.name;

                                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                        innerNestedWebRequest.Method = "GET";
                                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                        {
                                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                            {
                                                                js = new JavaScriptSerializer();
                                                                objText = innerNestedReader.ReadToEnd();
                                                                GamesListResponseInfo myInnerNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                status = myobj.status;
                                                                isOkStatus = status == "OK";
                                                                if (isOkStatus)
                                                                {
                                                                    List<GameResponseInfo> games = myInnerNestedObj.games;
                                                                    List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                                    {
                                                                        string gameId = game._id;
                                                                        bool isIdMatches = gameId == recommendationGameId;
                                                                        return isIdMatches;
                                                                    }).ToList<GameResponseInfo>();
                                                                    int countResults = gameResults.Count;
                                                                    bool isResultsFound = countResults >= 1;
                                                                    if (isResultsFound)
                                                                    {
                                                                        GameResponseInfo recommendationGame = gameResults[0];
                                                                        string recommendationGameName = recommendationGame.name;
                                                                        StackPanel friendRecommendation = new StackPanel();
                                                                        friendRecommendation.Background = System.Windows.Media.Brushes.LightGray;
                                                                        friendRecommendation.Margin = new Thickness(15);
                                                                        friendRecommendation.Orientation = Orientation.Horizontal;
                                                                        Image friendRecommendationThumbnail = new Image();
                                                                        friendRecommendationThumbnail.Width = 100;
                                                                        friendRecommendationThumbnail.Height = 100;
                                                                        friendRecommendationThumbnail.Margin = new Thickness(15);
                                                                        friendRecommendationThumbnail.BeginInit();
                                                                        friendRecommendationThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recommendationGameName));
                                                                        friendRecommendationThumbnail.EndInit();
                                                                        friendRecommendation.Children.Add(friendRecommendationThumbnail);
                                                                        StackPanel friendRecommendationAside = new StackPanel();
                                                                        friendRecommendationAside.Margin = new Thickness(15, 0, 15, 0);
                                                                        StackPanel friendRecommendationAsideHeader = new StackPanel();
                                                                        friendRecommendationAsideHeader.Orientation = Orientation.Horizontal;
                                                                        Image friendRecommendationAsideHeaderAvatar = new Image();
                                                                        friendRecommendationAsideHeaderAvatar.Width = 40;
                                                                        friendRecommendationAsideHeaderAvatar.Height = 40;
                                                                        friendRecommendationAsideHeaderAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                        friendRecommendationAsideHeaderAvatar.BeginInit();
                                                                        friendRecommendationAsideHeaderAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + recommendationUserId));
                                                                        friendRecommendationAsideHeaderAvatar.EndInit();
                                                                        friendRecommendationAsideHeader.Children.Add(friendRecommendationAsideHeaderAvatar);
                                                                        StackPanel friendRecommendationAsideHeaderAside = new StackPanel();
                                                                        TextBlock friendRecommendationAsideHeaderAsideNameLabel = new TextBlock();
                                                                        friendRecommendationAsideHeaderAsideNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        friendRecommendationAsideHeaderAsideNameLabel.FontSize = 14;
                                                                        friendRecommendationAsideHeaderAsideNameLabel.Text = recommendationGameName;
                                                                        friendRecommendationAsideHeaderAside.Children.Add(friendRecommendationAsideHeaderAsideNameLabel);

                                                                        TextBlock friendRecommendationAsideHeaderAsideDateLabel = new TextBlock();
                                                                        friendRecommendationAsideHeaderAsideDateLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        friendRecommendationAsideHeaderAsideDateLabel.Text = recommendationDate.ToLongDateString();
                                                                        friendRecommendationAsideHeaderAside.Children.Add(friendRecommendationAsideHeaderAsideDateLabel);

                                                                        friendRecommendationAsideHeader.Children.Add(friendRecommendationAsideHeaderAside);
                                                                        friendRecommendationAside.Children.Add(friendRecommendationAsideHeader);
                                                                        TextBlock friendRecommendationAsideDescLabel = new TextBlock();
                                                                        friendRecommendationAsideDescLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        friendRecommendationAsideDescLabel.Text = recommendationDesc;
                                                                        friendRecommendationAsideDescLabel.FontSize = 16;
                                                                        friendRecommendationAside.Children.Add(friendRecommendationAsideDescLabel);
                                                                        TextBlock recentRunGameAsideDetailLabel = new TextBlock();
                                                                        recentRunGameAsideDetailLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        recentRunGameAsideDetailLabel.Text = "Просмотреть полную информацию";
                                                                        recentRunGameAsideDetailLabel.DataContext = recommendationId;
                                                                        recentRunGameAsideDetailLabel.MouseLeftButtonUp += SelectReviewFromRecommendationsHandler;
                                                                        friendRecommendationAside.Children.Add(recentRunGameAsideDetailLabel);
                                                                        friendRecommendation.Children.Add(friendRecommendationAside);
                                                                        lastFriendRecommendations.Children.Add(friendRecommendation);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetAllFriendRecommendations ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendRecords = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendRecord in friendRecords)
                            {
                                string localFriendId = friendRecord.friend;
                                friendsIds.Add(localFriendId);
                            }
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ReviewsResponseInfo myInnerObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<Review> recommendations = myInnerObj.reviews;
                                        List<Review> friendRecommendations = recommendations.Where<Review>((Review review) =>
                                        {
                                            string reviewUserId = review.user;
                                            bool isMyFriendRecommendation = friendsIds.Contains(reviewUserId);
                                            return isMyFriendRecommendation;
                                        }).ToList<Review>();
                                        foreach (Review recommendation in friendRecommendations)
                                        {
                                            string recommendationId = recommendation._id;
                                            string recommendationUserId = recommendation.user;
                                            DateTime recommendationDate = recommendation.date;
                                            string recommendationDesc = recommendation.desc;
                                            string recommendationGameId = recommendation.game;

                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + recommendationUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        User user = myNestedObj.user;
                                                        string userName = user.name;

                                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                        innerNestedWebRequest.Method = "GET";
                                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                        {
                                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                            {
                                                                js = new JavaScriptSerializer();
                                                                objText = innerNestedReader.ReadToEnd();
                                                                GamesListResponseInfo myInnerNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                status = myobj.status;
                                                                isOkStatus = status == "OK";
                                                                if (isOkStatus)
                                                                {
                                                                    List<GameResponseInfo> games = myInnerNestedObj.games;
                                                                    List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                                                    {
                                                                        string gameId = game._id;
                                                                        bool isIdMatches = gameId == recommendationGameId;
                                                                        return isIdMatches;
                                                                    }).ToList<GameResponseInfo>();
                                                                    int countResults = gameResults.Count;
                                                                    bool isResultsFound = countResults >= 1;
                                                                    if (isResultsFound)
                                                                    {
                                                                        GameResponseInfo recommendationGame = gameResults[0];
                                                                        string recommendationGameName = recommendationGame.name;
                                                                        StackPanel friendRecommendation = new StackPanel();
                                                                        friendRecommendation.Background = System.Windows.Media.Brushes.LightGray;
                                                                        friendRecommendation.Margin = new Thickness(15);
                                                                        friendRecommendation.Orientation = Orientation.Horizontal;
                                                                        Image friendRecommendationThumbnail = new Image();
                                                                        friendRecommendationThumbnail.Width = 100;
                                                                        friendRecommendationThumbnail.Height = 100;
                                                                        friendRecommendationThumbnail.Margin = new Thickness(15);
                                                                        friendRecommendationThumbnail.BeginInit();
                                                                        friendRecommendationThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recommendationGameName));
                                                                        friendRecommendationThumbnail.EndInit();
                                                                        friendRecommendation.Children.Add(friendRecommendationThumbnail);
                                                                        StackPanel friendRecommendationAside = new StackPanel();
                                                                        friendRecommendationAside.Margin = new Thickness(15, 0, 15, 0);
                                                                        StackPanel friendRecommendationAsideHeader = new StackPanel();
                                                                        friendRecommendationAsideHeader.Orientation = Orientation.Horizontal;
                                                                        Image friendRecommendationAsideHeaderAvatar = new Image();
                                                                        friendRecommendationAsideHeaderAvatar.Width = 40;
                                                                        friendRecommendationAsideHeaderAvatar.Height = 40;
                                                                        friendRecommendationAsideHeaderAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                        friendRecommendationAsideHeaderAvatar.BeginInit();
                                                                        friendRecommendationAsideHeaderAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + recommendationUserId));
                                                                        friendRecommendationAsideHeaderAvatar.EndInit();
                                                                        friendRecommendationAsideHeader.Children.Add(friendRecommendationAsideHeaderAvatar);
                                                                        StackPanel friendRecommendationAsideHeaderAside = new StackPanel();
                                                                        TextBlock friendRecommendationAsideHeaderAsideNameLabel = new TextBlock();
                                                                        friendRecommendationAsideHeaderAsideNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        friendRecommendationAsideHeaderAsideNameLabel.FontSize = 14;
                                                                        friendRecommendationAsideHeaderAsideNameLabel.Text = recommendationGameName;
                                                                        friendRecommendationAsideHeaderAside.Children.Add(friendRecommendationAsideHeaderAsideNameLabel);

                                                                        TextBlock friendRecommendationAsideHeaderAsideDateLabel = new TextBlock();
                                                                        friendRecommendationAsideHeaderAsideDateLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        friendRecommendationAsideHeaderAsideDateLabel.Text = recommendationDate.ToLongDateString();
                                                                        friendRecommendationAsideHeaderAside.Children.Add(friendRecommendationAsideHeaderAsideDateLabel);

                                                                        friendRecommendationAsideHeader.Children.Add(friendRecommendationAsideHeaderAside);
                                                                        friendRecommendationAside.Children.Add(friendRecommendationAsideHeader);
                                                                        TextBlock friendRecommendationAsideDescLabel = new TextBlock();
                                                                        friendRecommendationAsideDescLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        friendRecommendationAsideDescLabel.Text = recommendationDesc;
                                                                        friendRecommendationAsideDescLabel.FontSize = 16;
                                                                        friendRecommendationAside.Children.Add(friendRecommendationAsideDescLabel);
                                                                        TextBlock recentRunGameAsideDetailLabel = new TextBlock();
                                                                        recentRunGameAsideDetailLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                        recentRunGameAsideDetailLabel.Text = "Просмотреть полную информацию";
                                                                        recentRunGameAsideDetailLabel.DataContext = recommendationId;
                                                                        recentRunGameAsideDetailLabel.MouseLeftButtonUp += SelectReviewFromRecommendationsHandler;
                                                                        friendRecommendationAside.Children.Add(recentRunGameAsideDetailLabel);
                                                                        friendRecommendation.Children.Add(friendRecommendationAside);
                                                                        allFriendRecommendations.Children.Add(friendRecommendation);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectReviewFromRecommendationsHandler (object sender, RoutedEventArgs e)
        {
            TextBlock descLabel = ((TextBlock)(sender));
            object descLabelData = descLabel.DataContext;
            string id = ((string)(descLabelData));
            SelectReview(id);
        }

        public void GetGameRecommendationsInfo()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            gameRecommendationsAvatar.BeginInit();
                            gameRecommendationsAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));
                            gameRecommendationsAvatar.EndInit();
                            gameRecommendationsUserNameLabel.Text = userName;
                            GetRecentRunRecommendationGames();
                            GetAllRecommendationGames();
                            GetRecommendationReviewsInfo();
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetRecommendationReviewsInfo ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            int productsCount = currentGames.Count;
            string rawProductsCount = productsCount.ToString();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ReviewsResponseInfo myobj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Review> totalReviews = myobj.reviews;
                            List<Review> myReviews = totalReviews.Where<Review>((Review review) =>
                            {
                                string reviewUserId = review.user;
                                bool isMyReview = reviewUserId == currentUserId;
                                return isMyReview;
                            }).ToList<Review>();
                            int myReviewsCount = myReviews.Count;
                            string rawMyReviewsCount = myReviewsCount.ToString();
                            gameRecommendationsCountReviewsLabel.Text = rawMyReviewsCount;
                            gameRecommendationsCountProductsLabel.Text = rawProductsCount;
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetRecentRunRecommendationGames ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            DateTime currentDate = DateTime.Now;
            List<Game> recentGames = currentGames.Where<Game>((Game someGame) =>
            {
                string rawSomeGameDate = someGame.date;
                DateTime someGameDate = DateTime.Parse(rawSomeGameDate);
                TimeSpan interval = currentDate.Subtract(someGameDate);
                double intervalDays = interval.TotalDays;
                bool isRecent = intervalDays <= 14;
                return isRecent;
            }).ToList<Game>();
            foreach (Game recentGame in recentGames)
            {
                string recentRunGameName = recentGame.name;
                string recentRunGameHours = recentGame.hours;
                StackPanel recentRunGame = new StackPanel();
                recentRunGame.Background = System.Windows.Media.Brushes.LightGray;
                recentRunGame.Margin = new Thickness(15);
                recentRunGame.Orientation = Orientation.Horizontal;
                Image recentRunGameThumbnail = new Image();
                recentRunGameThumbnail.Width = 100;
                recentRunGameThumbnail.Height = 100;
                recentRunGameThumbnail.Margin = new Thickness(15);
                recentRunGameThumbnail.BeginInit();
                recentRunGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recentRunGameName));
                recentRunGameThumbnail.EndInit();
                recentRunGame.Children.Add(recentRunGameThumbnail);
                StackPanel recentRunGameAside = new StackPanel();
                recentRunGameAside.Margin = new Thickness(15, 0, 15, 0);
                TextBlock recentRunGameAsideNameLabel = new TextBlock();
                recentRunGameAsideNameLabel.Margin = new Thickness(0, 5, 0, 5);
                recentRunGameAsideNameLabel.FontSize = 16;
                recentRunGameAsideNameLabel.Text = recentRunGameName;
                recentRunGameAside.Children.Add(recentRunGameAsideNameLabel);
                TextBlock recentRunGameAsideHoursLabel = new TextBlock();
                recentRunGameAsideHoursLabel.Margin = new Thickness(0, 5, 0, 5);
                string recentRunGameAsideHoursLabelContent = recentRunGameHours + " ч.";
                recentRunGameAsideHoursLabel.Text = recentRunGameAsideHoursLabelContent;
                recentRunGameAside.Children.Add(recentRunGameAsideHoursLabel);
                StackPanel recentRunGameAsideFooter = new StackPanel();
                recentRunGameAsideFooter.Margin = new Thickness(0, 5, 0, 5);
                recentRunGameAsideFooter.Orientation = Orientation.Horizontal;
                ComboBox recentRunGameAsideFooterLinks = new ComboBox();
                recentRunGameAsideFooterLinks.Margin = new Thickness(0, 0, 15, 0);
                recentRunGameAsideFooterLinks.Width = 125;
                recentRunGameAsideFooterLinks.Height = 25;

                ComboBoxItem recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                recentRunGameAsideFooterLinksItem.Visibility = invisible;
                StackPanel recentRunGameAsideFooterLinksItemContent = new StackPanel();
                recentRunGameAsideFooterLinksItemContent.Orientation = Orientation.Horizontal;
                PackIcon recentRunGameAsideFooterLinksItemContentIcon = new PackIcon();
                recentRunGameAsideFooterLinksItemContentIcon.Kind = PackIconKind.Stairs;
                recentRunGameAsideFooterLinksItemContentIcon.Margin = new Thickness(5, 0, 5, 0);
                recentRunGameAsideFooterLinksItemContent.Children.Add(recentRunGameAsideFooterLinksItemContentIcon);
                TextBlock recentRunGameAsideFooterLinksItemContentLabel = new TextBlock();
                recentRunGameAsideFooterLinksItemContentLabel.Text = "Ссылки";
                recentRunGameAsideFooterLinksItemContentLabel.Margin = new Thickness(5, 0, 5, 0);
                recentRunGameAsideFooterLinksItemContent.Children.Add(recentRunGameAsideFooterLinksItemContentLabel);
                recentRunGameAsideFooterLinksItem.Content = recentRunGameAsideFooterLinksItemContent;
                recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                recentRunGameAsideFooterLinksItem.Content = "Перейти на страницу сообщества";
                recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                recentRunGameAsideFooterLinksItem.Content = "Посетить форумы";
                recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                recentRunGameAsideFooterLinksItem.Content = "Найти группы сообщества";
                recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                recentRunGameAsideFooterLinksItem.Content = "Посетить официальный сайт";
                recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                recentRunGameAsideFooterLinksItem.Content = "Прочитать последние новости";
                recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                recentRunGameAsideFooterLinks.SelectedIndex = 0;
                recentRunGameAsideFooterLinks.SelectionChanged += GameRecommendationsFooterLinksItemSelectedHandler;

                recentRunGameAsideFooter.Children.Add(recentRunGameAsideFooterLinks);
                ComboBox recentRunGameAsideFooterStats = new ComboBox();
                recentRunGameAsideFooterStats.Margin = new Thickness(15, 0, 15, 0);
                recentRunGameAsideFooterStats.Width = 125;
                recentRunGameAsideFooterStats.Height = 25;

                ComboBoxItem recentRunGameAsideFooterStatsItem = new ComboBoxItem();
                recentRunGameAsideFooterStatsItem.Visibility = invisible;
                StackPanel recentRunGameAsideFooterStatsItemContent = new StackPanel();
                recentRunGameAsideFooterStatsItemContent.Orientation = Orientation.Horizontal;
                PackIcon recentRunGameAsideFooterStatsItemContentIcon = new PackIcon();
                recentRunGameAsideFooterStatsItemContentIcon.Kind = PackIconKind.ChartBar;
                recentRunGameAsideFooterStatsItemContentIcon.Margin = new Thickness(5, 0, 5, 0);
                recentRunGameAsideFooterStatsItemContent.Children.Add(recentRunGameAsideFooterStatsItemContentIcon);
                TextBlock recentRunGameAsideFooterStatsItemContentLabel = new TextBlock();
                recentRunGameAsideFooterStatsItemContentLabel.Text = "Статистика";
                recentRunGameAsideFooterStatsItemContentLabel.Margin = new Thickness(5, 0, 5, 0);
                recentRunGameAsideFooterStatsItemContent.Children.Add(recentRunGameAsideFooterStatsItemContentLabel);
                recentRunGameAsideFooterStatsItem.Content = recentRunGameAsideFooterStatsItemContent;
                recentRunGameAsideFooterStats.Items.Add(recentRunGameAsideFooterStatsItem);
                recentRunGameAsideFooterStatsItem = new ComboBoxItem();
                recentRunGameAsideFooterStatsItem.Content = "Достижения";
                recentRunGameAsideFooterStats.Items.Add(recentRunGameAsideFooterStatsItem);
                recentRunGameAsideFooterStatsItem = new ComboBoxItem();
                recentRunGameAsideFooterStatsItem.Content = "Глобальные достижения";
                recentRunGameAsideFooterStats.Items.Add(recentRunGameAsideFooterStatsItem);
                recentRunGameAsideFooterStats.SelectedIndex = 0;
                recentRunGameAsideFooterStats.SelectionChanged += GameRecommendationsFooterStatsItemSelectedHandler;

                recentRunGameAsideFooter.Children.Add(recentRunGameAsideFooterStats);
                Button recentRunGameAsideFooterReview = new Button();
                recentRunGameAsideFooterReview.Margin = new Thickness(15, 0, 15, 0);
                recentRunGameAsideFooterReview.Width = 125;
                recentRunGameAsideFooterReview.Height = 25;
                StackPanel recentRunGameAsideFooterReviewContent = new StackPanel();
                recentRunGameAsideFooterReviewContent.Orientation = Orientation.Horizontal;
                PackIcon recentRunGameAsideFooterReviewContentIcon = new PackIcon();
                recentRunGameAsideFooterReviewContentIcon.Kind = PackIconKind.ThumbsUp;
                recentRunGameAsideFooterReviewContentIcon.Margin = new Thickness(5, 0, 5, 0);
                recentRunGameAsideFooterReviewContent.Children.Add(recentRunGameAsideFooterReviewContentIcon);
                TextBlock recentRunGameAsideFooterReviewContentLabel = new TextBlock();
                recentRunGameAsideFooterReviewContentLabel.Text = "Написать обзор";
                recentRunGameAsideFooterReviewContentLabel.Margin = new Thickness(5, 0, 5, 0);
                recentRunGameAsideFooterReviewContent.Children.Add(recentRunGameAsideFooterReviewContentLabel);
                recentRunGameAsideFooterReview.Content = recentRunGameAsideFooterReviewContent;
                recentRunGameAsideFooterReview.DataContext = recentRunGameName;
                recentRunGameAsideFooterReview.Click += OpenAddReviewFromRecommendationsHandler;
                recentRunGameAsideFooter.Children.Add(recentRunGameAsideFooterReview);
                recentRunGameAside.Children.Add(recentRunGameAsideFooter);
                recentRunGame.Children.Add(recentRunGameAside);
                recentRunGames.Children.Add(recentRunGame);

            }
        }

        public void OpenAddReviewFromRecommendationsHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string name = ((string)(btnData));
            OpenAddReview(name);
        }

        public void GetAllRecommendationGames ()
        {
            object rawSortData = sortAllGameRecommendationsPanel.DataContext;
            string sortData = rawSortData.ToString();
            bool isSortByHours = sortData == "hours";
            bool isSortByName = sortData == "name";
            bool isSortByAchievements = sortData == "achievements";
            allRecommendationGames.Children.Clear();
            string allRecommendationGamesBoxContent = allRecommendationGamesBox.Text;
            int allRecommendationGamesBoxContentLength = allRecommendationGamesBoxContent.Length;
            bool isFilterDisabled = allRecommendationGamesBoxContentLength <= 0;
            string insensitiveCaseAllRecommendationGamesBoxContent = allRecommendationGamesBoxContent.ToLower();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            if (isSortByHours)
            {
                currentGames = currentGames.OrderBy((Game someGame) =>
                {
                    return someGame.hours;
                }).ToList<Game>();
            }
            else if (isSortByName)
            {
                currentGames = currentGames.OrderBy((Game someGame) =>
                {
                    return someGame.name;
                }).ToList<Game>();
            }
            else if (isSortByAchievements)
            {
                currentGames = currentGames.OrderBy((Game someGame) =>
                {
                    return someGame.installDate;
                }).ToList<Game>();
            }
            foreach (Game recentGame in currentGames)
            {
                string recentRunGameName = recentGame.name;
                string insensitiveCaseRecentRunGameName = recentRunGameName;
                bool isKeywordsMatch = insensitiveCaseRecentRunGameName.Contains(insensitiveCaseAllRecommendationGamesBoxContent);
                bool isAddGame = isKeywordsMatch  || isFilterDisabled;
                if (isAddGame)
                {
                    string recentRunGameHours = recentGame.hours;
                    StackPanel recentRunGame = new StackPanel();
                    recentRunGame.Background = System.Windows.Media.Brushes.LightGray;
                    recentRunGame.Margin = new Thickness(15);
                    recentRunGame.Orientation = Orientation.Horizontal;
                    Image recentRunGameThumbnail = new Image();
                    recentRunGameThumbnail.Width = 100;
                    recentRunGameThumbnail.Height = 100;
                    recentRunGameThumbnail.Margin = new Thickness(15);
                    recentRunGameThumbnail.BeginInit();
                    recentRunGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recentRunGameName));
                    recentRunGameThumbnail.EndInit();
                    recentRunGame.Children.Add(recentRunGameThumbnail);
                    StackPanel recentRunGameAside = new StackPanel();
                    recentRunGameAside.Margin = new Thickness(15, 0, 15, 0);
                    TextBlock recentRunGameAsideNameLabel = new TextBlock();
                    recentRunGameAsideNameLabel.Margin = new Thickness(0, 5, 0, 5);
                    recentRunGameAsideNameLabel.FontSize = 16;
                    recentRunGameAsideNameLabel.Text = recentRunGameName;
                    recentRunGameAside.Children.Add(recentRunGameAsideNameLabel);
                    TextBlock recentRunGameAsideHoursLabel = new TextBlock();
                    recentRunGameAsideHoursLabel.Margin = new Thickness(0, 5, 0, 5);
                    string recentRunGameAsideHoursLabelContent = recentRunGameHours + " ч.";
                    recentRunGameAsideHoursLabel.Text = recentRunGameAsideHoursLabelContent;
                    recentRunGameAside.Children.Add(recentRunGameAsideHoursLabel);
                    StackPanel recentRunGameAsideFooter = new StackPanel();
                    recentRunGameAsideFooter.Margin = new Thickness(0, 5, 0, 5);
                    recentRunGameAsideFooter.Orientation = Orientation.Horizontal;
                    ComboBox recentRunGameAsideFooterLinks = new ComboBox();
                    recentRunGameAsideFooterLinks.Margin = new Thickness(0, 0, 15, 0);
                    recentRunGameAsideFooterLinks.Width = 125;
                    recentRunGameAsideFooterLinks.Height = 25;

                    ComboBoxItem recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                    recentRunGameAsideFooterLinksItem.Visibility = invisible;
                    StackPanel recentRunGameAsideFooterLinksItemContent = new StackPanel();
                    recentRunGameAsideFooterLinksItemContent.Orientation = Orientation.Horizontal;
                    PackIcon recentRunGameAsideFooterLinksItemContentIcon = new PackIcon();
                    recentRunGameAsideFooterLinksItemContentIcon.Kind = PackIconKind.Stairs;
                    recentRunGameAsideFooterLinksItemContentIcon.Margin = new Thickness(5, 0, 5, 0);
                    recentRunGameAsideFooterLinksItemContent.Children.Add(recentRunGameAsideFooterLinksItemContentIcon);
                    TextBlock recentRunGameAsideFooterLinksItemContentLabel = new TextBlock();
                    recentRunGameAsideFooterLinksItemContentLabel.Text = "Ссылки";
                    recentRunGameAsideFooterLinksItemContentLabel.Margin = new Thickness(5, 0, 5, 0);
                    recentRunGameAsideFooterLinksItemContent.Children.Add(recentRunGameAsideFooterLinksItemContentLabel);
                    recentRunGameAsideFooterLinksItem.Content = recentRunGameAsideFooterLinksItemContent;
                    recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                    recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                    recentRunGameAsideFooterLinksItem.Content = "Перейти на страницу сообщества";
                    recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                    recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                    recentRunGameAsideFooterLinksItem.Content = "Посетить форумы";
                    recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                    recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                    recentRunGameAsideFooterLinksItem.Content = "Найти группы сообщества";
                    recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                    recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                    recentRunGameAsideFooterLinksItem.Content = "Посетить официальный сайт";
                    recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                    recentRunGameAsideFooterLinksItem = new ComboBoxItem();
                    recentRunGameAsideFooterLinksItem.Content = "Прочитать последние новости";
                    recentRunGameAsideFooterLinks.Items.Add(recentRunGameAsideFooterLinksItem);
                    recentRunGameAsideFooterLinks.SelectedIndex = 0;
                    recentRunGameAsideFooterLinks.SelectionChanged += GameRecommendationsFooterLinksItemSelectedHandler;

                    recentRunGameAsideFooter.Children.Add(recentRunGameAsideFooterLinks);
                    ComboBox recentRunGameAsideFooterStats = new ComboBox();
                    recentRunGameAsideFooterStats.Margin = new Thickness(15, 0, 15, 0);
                    recentRunGameAsideFooterStats.Width = 125;
                    recentRunGameAsideFooterStats.Height = 25;

                    ComboBoxItem recentRunGameAsideFooterStatsItem = new ComboBoxItem();
                    recentRunGameAsideFooterStatsItem.Visibility = invisible;
                    StackPanel recentRunGameAsideFooterStatsItemContent = new StackPanel();
                    recentRunGameAsideFooterStatsItemContent.Orientation = Orientation.Horizontal;
                    PackIcon recentRunGameAsideFooterStatsItemContentIcon = new PackIcon();
                    recentRunGameAsideFooterStatsItemContentIcon.Kind = PackIconKind.ChartBar;
                    recentRunGameAsideFooterStatsItemContentIcon.Margin = new Thickness(5, 0, 5, 0);
                    recentRunGameAsideFooterStatsItemContent.Children.Add(recentRunGameAsideFooterStatsItemContentIcon);
                    TextBlock recentRunGameAsideFooterStatsItemContentLabel = new TextBlock();
                    recentRunGameAsideFooterStatsItemContentLabel.Text = "Статистика";
                    recentRunGameAsideFooterStatsItemContentLabel.Margin = new Thickness(5, 0, 5, 0);
                    recentRunGameAsideFooterStatsItemContent.Children.Add(recentRunGameAsideFooterStatsItemContentLabel);
                    recentRunGameAsideFooterStatsItem.Content = recentRunGameAsideFooterStatsItemContent;
                    recentRunGameAsideFooterStats.Items.Add(recentRunGameAsideFooterStatsItem);
                    recentRunGameAsideFooterStatsItem = new ComboBoxItem();
                    recentRunGameAsideFooterStatsItem.Content = "Достижения";
                    recentRunGameAsideFooterStats.Items.Add(recentRunGameAsideFooterStatsItem);
                    recentRunGameAsideFooterStatsItem = new ComboBoxItem();
                    recentRunGameAsideFooterStatsItem.Content = "Глобальные достижения";
                    recentRunGameAsideFooterStats.Items.Add(recentRunGameAsideFooterStatsItem);
                    recentRunGameAsideFooterStats.SelectedIndex = 0;
                    recentRunGameAsideFooterStats.SelectionChanged += GameRecommendationsFooterStatsItemSelectedHandler;

                    recentRunGameAsideFooter.Children.Add(recentRunGameAsideFooterStats);
                    Button recentRunGameAsideFooterReview = new Button();
                    recentRunGameAsideFooterReview.Margin = new Thickness(15, 0, 15, 0);
                    recentRunGameAsideFooterReview.Width = 125;
                    recentRunGameAsideFooterReview.Height = 25;
                    StackPanel recentRunGameAsideFooterReviewContent = new StackPanel();
                    recentRunGameAsideFooterReviewContent.Orientation = Orientation.Horizontal;
                    PackIcon recentRunGameAsideFooterReviewContentIcon = new PackIcon();
                    recentRunGameAsideFooterReviewContentIcon.Kind = PackIconKind.ThumbsUp;
                    recentRunGameAsideFooterReviewContentIcon.Margin = new Thickness(5, 0, 5, 0);
                    recentRunGameAsideFooterReviewContent.Children.Add(recentRunGameAsideFooterReviewContentIcon);
                    TextBlock recentRunGameAsideFooterReviewContentLabel = new TextBlock();
                    recentRunGameAsideFooterReviewContentLabel.Text = "Написать обзор";
                    recentRunGameAsideFooterReviewContentLabel.Margin = new Thickness(5, 0, 5, 0);
                    recentRunGameAsideFooterReviewContent.Children.Add(recentRunGameAsideFooterReviewContentLabel);
                    recentRunGameAsideFooterReview.Content = recentRunGameAsideFooterReviewContent;
                    recentRunGameAsideFooterReview.DataContext = recentRunGameName;
                    recentRunGameAsideFooterReview.Click += OpenAddReviewFromRecommendationsHandler;
                    recentRunGameAsideFooter.Children.Add(recentRunGameAsideFooterReview);
                    recentRunGameAside.Children.Add(recentRunGameAsideFooter);
                    recentRunGame.Children.Add(recentRunGameAside);
                    allRecommendationGames.Children.Add(recentRunGame);
                }
            }
        }


        public void SelectGameRecommendationsItemHandler (object sender, SelectionChangedEventArgs e)
        {
            SelectGameRecommendationsItem();
        }

        public void OpenGameSubs ()
        {
            OpenGameRecommendations();
            gameRecommendationsControl.SelectedIndex = 3;
        }

        public void SelectGameRecommendationsItem ()
        {
            int selectedIndex = gameRecommendationsControl.SelectedIndex;
            bool isWishList = selectedIndex == 4;
            if (isWishList)
            {
                mainControl.SelectedIndex = 0;
                gameRecommendationsControl.SelectedIndex = 0;
            }
        }

        private void GameRecommendationsFooterStatsItemSelectedHandler (object sender, SelectionChangedEventArgs e)
        {
            if (isAppInit)
            {
                ComboBox selector = ((ComboBox)(sender));
                GameRecommendationsFooterStatsItemSelected(selector);
            }
        }

        public void GameRecommendationsFooterStatsItemSelected (ComboBox selector)
        {
            int selectedIndex = selector.SelectedIndex;
            bool isAchievements = selectedIndex == 1;
            bool isGlobalAchievements = selectedIndex == 2;
            if (isAchievements)
            {

            }
            else if (isGlobalAchievements)
            {

            }
            selector.SelectedIndex = 0;
        }

        private void GameRecommendationsFooterLinksItemSelectedHandler(object sender, SelectionChangedEventArgs e)
        {
            if (isAppInit)
            {
                ComboBox selector = ((ComboBox)(sender));
                GameRecommendationsFooterLinksItemSelected(selector);
            }
        }

        public void GameRecommendationsFooterLinksItemSelected(ComboBox selector)
        {
            int selectedIndex = selector.SelectedIndex;
            bool isVisitStorePage = selectedIndex == 1;
            bool isVisitForums = selectedIndex == 2;
            bool isFindCommunityGroups = selectedIndex == 3;
            bool isVisitOfficialSite = selectedIndex == 4;
            bool isReadLastNews = selectedIndex == 5;
            if (isVisitStorePage)
            {

            }
            else if (isVisitForums)
            {

            }
            else if (isFindCommunityGroups)
            {

            }
            else if (isVisitOfficialSite)
            {

            }
            else if (isReadLastNews)
            {

            }
            selector.SelectedIndex = 0;
        }

        public void SetCarouselItems ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            List<GameResponseInfo> totalGames = myobj.games;
                            totalGames.Reverse();
                            bool isGamesExists = totalGames.Count >= 1;
                            if (isGamesExists)
                            {
                                carouselTimer = new DispatcherTimer();
                                carouselTimer.Interval = TimeSpan.FromSeconds(4);
                                carouselTimer.Tick += delegate
                                {
                                    MoveCarouselToRight();
                                };
                                carouselTimer.Start();
                                int gamesCursor = -1;
                                foreach (GameResponseInfo totalGamesItem in totalGames)
                                {
                                    bool isAddGame = gamesCursor <= 5;
                                    if (isAddGame)
                                    {
                                        gamesCursor++;
                                        string totalGamesItemName = totalGamesItem.name;
                                        int totalGamesItemPrice = totalGamesItem.price;
                                        string totalGamesItemPlatform = totalGamesItem.platform;
                                        ItemCollection carouselControlItems = carouselControl.Items;
                                        TabItem carouselControlItem = new TabItem();
                                        carouselControlItem.Visibility = invisible;
                                        DockPanel carouselControlItemBody = new DockPanel();
                                        carouselControlItemBody.Background = System.Windows.Media.Brushes.LightGray;
                                        Image carouselControlItemBodyThumbnail = new Image();
                                        carouselControlItemBodyThumbnail.Width = 500;
                                        carouselControlItemBodyThumbnail.Height = 500;
                                        carouselControlItemBodyThumbnail.Margin = new Thickness(15, 0, 15, 0);
                                        carouselControlItemBodyThumbnail.ImageFailed += SetDefaultThumbnailHandler;
                                        carouselControlItemBodyThumbnail.BeginInit();
                                        carouselControlItemBodyThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                        carouselControlItemBodyThumbnail.EndInit();
                                        carouselControlItemBody.Children.Add(carouselControlItemBodyThumbnail);
                                        StackPanel carouselControlItemBodyAside = new StackPanel();
                                        TextBlock carouselControlItemBodyNameLabel = new TextBlock();
                                        carouselControlItemBodyNameLabel.FontSize = 18;
                                        carouselControlItemBodyNameLabel.Margin = new Thickness(15);
                                        carouselControlItemBodyNameLabel.Text = totalGamesItemName;
                                        carouselControlItemBodyAside.Children.Add(carouselControlItemBodyNameLabel);
                                        DockPanel carouselControlItemBodyFooter = new DockPanel();
                                        TextBlock carouselControlItemBodyPriceLabel = new TextBlock();
                                        string rawTotalGamesItemPrice = totalGamesItemPrice.ToString();
                                        string carouselControlItemBodyPriceLabelContent = rawTotalGamesItemPrice + " Р";
                                        bool isFreeGame = totalGamesItemPrice <= 0;
                                        if (isFreeGame)
                                        {
                                            carouselControlItemBodyPriceLabelContent = "Бесплатно";
                                        }
                                        carouselControlItemBodyPriceLabel.Text = carouselControlItemBodyPriceLabelContent;
                                        carouselControlItemBodyPriceLabel.VerticalAlignment = VerticalAlignment.Center;
                                        carouselControlItemBodyFooter.Children.Add(carouselControlItemBodyPriceLabel);
                                        StackPanel carouselControlItemBodyPlatforms = new StackPanel();
                                        carouselControlItemBodyPlatforms.HorizontalAlignment = HorizontalAlignment.Right;
                                        carouselControlItemBodyPlatforms.Orientation = Orientation.Horizontal;
                                        bool isWindowsPlatform = totalGamesItemPlatform == "Windows";
                                        bool isMacOSPlatform = totalGamesItemPlatform == "macOS";
                                        bool isLinuxPlatform = totalGamesItemPlatform == "Linux";
                                        if (isWindowsPlatform)
                                        {
                                            Image carouselControlItemBodyPlatform = new Image();
                                            carouselControlItemBodyPlatform.Width = 25;
                                            carouselControlItemBodyPlatform.Height = 25;
                                            carouselControlItemBodyPlatform.Margin = new Thickness(15, 0, 15, 0);
                                            carouselControlItemBodyPlatform.BeginInit();
                                            carouselControlItemBodyPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-social-windows-128.png"));
                                            carouselControlItemBodyPlatform.EndInit();
                                            carouselControlItemBodyPlatforms.Children.Add(carouselControlItemBodyPlatform);
                                        }
                                        else if (isMacOSPlatform)
                                        {
                                            Image carouselControlItemBodyPlatform = new Image();
                                            carouselControlItemBodyPlatform.Width = 25;
                                            carouselControlItemBodyPlatform.Height = 25;
                                            carouselControlItemBodyPlatform.Margin = new Thickness(15, 0, 15, 0);
                                            carouselControlItemBodyPlatform.BeginInit();
                                            carouselControlItemBodyPlatform.Source = new BitmapImage(new Uri(@"https://cdn3.iconfinder.com/data/icons/picons-social/57/16-apple-128.png"));
                                            carouselControlItemBodyPlatform.EndInit();
                                            carouselControlItemBodyPlatforms.Children.Add(carouselControlItemBodyPlatform);
                                        }
                                        else if (isLinuxPlatform)
                                        {
                                            Image carouselControlItemBodyPlatform = new Image();
                                            carouselControlItemBodyPlatform.Width = 25;
                                            carouselControlItemBodyPlatform.Height = 25;
                                            carouselControlItemBodyPlatform.Margin = new Thickness(15, 0, 15, 0);
                                            carouselControlItemBodyPlatform.BeginInit();
                                            carouselControlItemBodyPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/proglyphs-free/512/Linux_-_Tux-128.png"));
                                            carouselControlItemBodyPlatform.EndInit();
                                            carouselControlItemBodyPlatforms.Children.Add(carouselControlItemBodyPlatform);
                                        }
                                        else
                                        {
                                            Image carouselControlItemBodyPlatform = new Image();
                                            carouselControlItemBodyPlatform.Width = 25;
                                            carouselControlItemBodyPlatform.Height = 25;
                                            carouselControlItemBodyPlatform.Margin = new Thickness(15, 0, 15, 0);
                                            carouselControlItemBodyPlatform.BeginInit();
                                            carouselControlItemBodyPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-social-windows-128.png"));
                                            carouselControlItemBodyPlatform.EndInit();
                                            carouselControlItemBodyPlatforms.Children.Add(carouselControlItemBodyPlatform);
                                            carouselControlItemBodyPlatform = new Image();
                                            carouselControlItemBodyPlatform.Width = 25;
                                            carouselControlItemBodyPlatform.Height = 25;
                                            carouselControlItemBodyPlatform.Margin = new Thickness(15, 0, 15, 0);
                                            carouselControlItemBodyPlatform.BeginInit();
                                            carouselControlItemBodyPlatform.Source = new BitmapImage(new Uri(@"https://cdn3.iconfinder.com/data/icons/picons-social/57/16-apple-128.png"));
                                            carouselControlItemBodyPlatform.EndInit();
                                            carouselControlItemBodyPlatforms.Children.Add(carouselControlItemBodyPlatform);
                                            carouselControlItemBodyPlatform = new Image();
                                            carouselControlItemBodyPlatform.Width = 25;
                                            carouselControlItemBodyPlatform.Height = 25;
                                            carouselControlItemBodyPlatform.Margin = new Thickness(15, 0, 15, 0);
                                            carouselControlItemBodyPlatform.BeginInit();
                                            carouselControlItemBodyPlatform.Source = new BitmapImage(new Uri(@"https://cdn4.iconfinder.com/data/icons/proglyphs-free/512/Linux_-_Tux-128.png"));
                                            carouselControlItemBodyPlatform.EndInit();
                                            carouselControlItemBodyPlatforms.Children.Add(carouselControlItemBodyPlatform);
                                        }
                                        carouselControlItemBodyFooter.Children.Add(carouselControlItemBodyPlatforms);
                                        carouselControlItemBodyAside.Children.Add(carouselControlItemBodyFooter);
                                        carouselControlItemBody.Children.Add(carouselControlItemBodyAside);
                                        carouselControlItem.Content = carouselControlItemBody;
                                        carouselControl.Items.Add(carouselControlItem);
                                        Button carouselShortcut = new Button();
                                        carouselShortcut.Width = 25;
                                        carouselShortcut.Height = 10;
                                        carouselShortcut.Margin = new Thickness(15);
                                        bool isFirstShortcut = gamesCursor == 0;
                                        if (isFirstShortcut)
                                        {
                                            carouselShortcut.Background = System.Windows.Media.Brushes.SkyBlue;
                                        }
                                        carouselShortcut.Click += SelectCarouselShortcutHandler;
                                        carouselShortcuts.Children.Add(carouselShortcut);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetFamilyView ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            Settings currentSettings = loadedContent.settings;
            bool isFamilyViewEnabled = currentSettings.familyView;
            if (isFamilyViewEnabled)
            {
                familyViewIcon.Visibility = visible;
                moreInfoFamilyViewBtn.Visibility = invisible;
                disableFamilyViewBtn.Visibility = visible;
            }
            else
            {
                familyViewIcon.Visibility = invisible;
                moreInfoFamilyViewBtn.Visibility = visible;
                disableFamilyViewBtn.Visibility = invisible;
            }
        }

        public void InitMail()
        {
            mailClient = new ImapClient("imap.gmail.com", true);
            bool isConnected = mailClient.Connect();
            bool isNotConnected = !isConnected;
            if (isNotConnected)
            {
                ClientClosed();
                this.Close();
            }
            else
            {
                bool isLogined = mailClient.Login(@"glebdyakov2000@gmail.com", @"ttolpqpdzbigrkhz");
                bool isNotLogined = !isLogined;
                if (isNotConnected)
                {
                    ClientClosed();
                    this.Close();
                }
            }
        }

        public void GetContent ()
        {
            GetScreenShots("", true);
            GetFavoriteScreenShotsContent();
            GetIllustrationsContent();
            GetFavoriteIllustrationsContent();
            GetVideoContent();
            GetStoreContent();
            GetCollectionsContent();
            GetManualsContent();
            GetFavoriteManualsContent();
        }

        public void GetIllustrationsContent ()
        {

            int selectedIndex = screenShotsFilter.SelectedIndex;
            object rawSelectedItem = screenShotsFilter.Items[selectedIndex];
            ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
            object rawFilter = selectedItem.DataContext;
            string filter = rawFilter.ToString();
            bool isFilterDisabled = filter == @"all games";
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IllustrationsResponseInfo myobj = (IllustrationsResponseInfo)js.Deserialize(objText, typeof(IllustrationsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Illustration> totalIllustrations = myobj.illustrations;
                            totalIllustrations = totalIllustrations.Where<Illustration>((Illustration content) =>
                            {
                                string contentGameId = content.game;
                                string userId = content.user;
                                bool isMyContent = userId == currentUserId;
                                bool isFilterMatch = filter == contentGameId;
                                bool isAddIllustration = isMyContent && (isFilterMatch || isFilterDisabled);
                                return isAddIllustration;
                            }).ToList<Illustration>();
                            contentIllustrations.Children.Clear();
                            int totalIllustrationsCount = totalIllustrations.Count;
                            bool isHaveIllustrations = totalIllustrationsCount >= 1;
                            if (isHaveIllustrations)
                            {
                                contentIllustrations.HorizontalAlignment = HorizontalAlignment.Left;
                                foreach (Illustration totalIllustrationsItem in totalIllustrations)
                                {
                                    string id = totalIllustrationsItem._id;
                                    string userId = totalIllustrationsItem.user;
                                    bool isMyContent = userId == currentUserId;
                                    if (isMyContent)
                                    {
                                        string title = totalIllustrationsItem.title;
                                        string desc = totalIllustrationsItem.desc;
                                        StackPanel illustration = new StackPanel();
                                        illustration.Width = 500;
                                        illustration.Margin = new Thickness(15);
                                        illustration.Background = System.Windows.Media.Brushes.LightGray;
                                        TextBlock illustrationTitleLabel = new TextBlock();
                                        illustrationTitleLabel.FontSize = 16;
                                        illustrationTitleLabel.Margin = new Thickness(15);
                                        illustrationTitleLabel.Text = title;
                                        illustration.Children.Add(illustrationTitleLabel);
                                        Image illustrationPhoto = new Image();
                                        illustrationPhoto.Margin = new Thickness(15);
                                        illustrationPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                        illustrationPhoto.Width = 50;
                                        illustrationPhoto.Height = 50;
                                        illustrationPhoto.BeginInit();
                                        illustrationPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/illustration/photo/?id=" + id));
                                        illustrationPhoto.EndInit();
                                        illustration.Children.Add(illustrationPhoto);
                                        TextBlock illustrationDescLabel = new TextBlock();
                                        illustrationDescLabel.Margin = new Thickness(15);
                                        illustrationDescLabel.Text = desc;
                                        illustration.Children.Add(illustrationDescLabel);
                                        contentIllustrations.Children.Add(illustration);
                                        illustration.DataContext = id;
                                        illustration.MouseLeftButtonUp += SelectIllustrationHandler;
                                    }
                                }
                            }
                            else
                            {
                                StackPanel notFound = new StackPanel();
                                notFound.Margin = new Thickness(0, 15, 0, 15);
                                TextBlock notFoundLabel = new TextBlock();
                                notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                notFoundLabel.TextAlignment = TextAlignment.Center;
                                notFoundLabel.FontSize = 18;
                                string newLine = Environment.NewLine;
                                notFoundLabel.Text = "На данный момент у вас нет иллюстраций, хранящихся в Steam" + newLine + "Cloud. Чтобы загрузить иллюстрацию, перейдите во вкладку" + newLine + "«Иллюстрации» в центре сообщества игры и найдите кнопку" + newLine + "«Загрузить иллюстрацию» справа вверху.";
                                notFound.Children.Add(notFoundLabel);
                                TextBlock notFoundSubLabel = new TextBlock();
                                notFoundSubLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                notFoundSubLabel.TextAlignment = TextAlignment.Center;
                                notFoundSubLabel.FontSize = 18;
                                notFoundSubLabel.Text = "Или нажмите кнопку «Загрузить иллюстрацию» ниже.";
                                notFound.Children.Add(notFoundSubLabel);
                                Button uploadBtn = new Button();
                                uploadBtn.Width = 175;
                                uploadBtn.Height = 25;
                                uploadBtn.Margin = new Thickness(15);
                                uploadBtn.Content = "Загрузить иллюстрацию";
                                notFound.Children.Add(uploadBtn);
                                contentIllustrations.HorizontalAlignment = HorizontalAlignment.Center;
                                contentIllustrations.Children.Add(notFound);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetVideoContent()
        {

        }
        public void GetStoreContent()
        {

        }
        public void GetCollectionsContent()
        {

        }

        public void GetFavoriteScreenShotsContent ()
        {

            int selectedIndex = screenShotsFilter.SelectedIndex;
            object rawSelectedItem = screenShotsFilter.Items[selectedIndex];
            ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
            object rawFilter = selectedItem.DataContext;
            string filter = rawFilter.ToString();
            bool isFilterDisabled = filter == @"all games";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ScreenShotsResponseInfo myobj = (ScreenShotsResponseInfo)js.Deserialize(objText, typeof(ScreenShotsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<ScreenShot> totalScreenShots = myobj.screenShots;
                            HttpWebRequest screenShotFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/favorites/all");
                            screenShotFavoriteRelationsWebRequest.Method = "GET";
                            screenShotFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse screenShotFavoriteRelationsWebResponse = (HttpWebResponse)screenShotFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var screenShotFavoriteRelationsReader = new StreamReader(screenShotFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = screenShotFavoriteRelationsReader.ReadToEnd();
                                    ScreenShotFavoriteRelationsResponseInfo myScreenShotFavoriteRelationsObj = (ScreenShotFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(ScreenShotFavoriteRelationsResponseInfo));
                                    status = myScreenShotFavoriteRelationsObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<ScreenShotFavoriteRelation> favoriteRelations = myScreenShotFavoriteRelationsObj.relations;
                                        List<ScreenShotFavoriteRelation> myFavoriteRelations = favoriteRelations.Where<ScreenShotFavoriteRelation>((ScreenShotFavoriteRelation relation) =>
                                        {
                                            string relatioIllustrationId = relation.screenShot;
                                            string relationUserId = relation.user;
                                            bool isCurrentUser = relationUserId == currentUserId;
                                            return isCurrentUser;
                                        }).ToList<ScreenShotFavoriteRelation>();
                                        List<string> myFavoriteRelationIds = new List<string>();
                                        foreach (ScreenShotFavoriteRelation myFavoriteRelation in myFavoriteRelations)
                                        {
                                            string myFavoriteRelationScreenShotId = myFavoriteRelation.screenShot;
                                            myFavoriteRelationIds.Add(myFavoriteRelationScreenShotId);
                                        }

                                        totalScreenShots = totalScreenShots.Where<ScreenShot>((ScreenShot content) =>
                                        {
                                            string contentGameId = content.game;
                                            string id = content._id;

                                            bool isFilterMatch = filter == contentGameId;
                                            bool isAddScreenShot = isFilterMatch || isFilterDisabled;

                                            bool isFavoriteScreenShot = myFavoriteRelationIds.Contains(id);
                                            // return isFavoriteScreenShot;
                                            return isFavoriteScreenShot && isAddScreenShot;
                                        }).ToList<ScreenShot>();
                                        contentFavoriteScreenShots.Children.Clear();
                                        int totalScreenShotsCount = totalScreenShots.Count;
                                        bool isHaveScreenShots = totalScreenShotsCount >= 1;
                                        if (isHaveScreenShots)
                                        {
                                            contentFavoriteScreenShots.HorizontalAlignment = HorizontalAlignment.Left;
                                            foreach (ScreenShot totalScreenShotsItem in totalScreenShots)
                                            {
                                                string id = totalScreenShotsItem._id;
                                                string userId = totalScreenShotsItem.user;
                                                string desc = totalScreenShotsItem.desc;
                                                StackPanel screenShot = new StackPanel();
                                                screenShot.Width = 500;
                                                screenShot.Margin = new Thickness(15);
                                                screenShot.Background = System.Windows.Media.Brushes.LightGray;
                                                Image screenShotPhoto = new Image();
                                                screenShotPhoto.Margin = new Thickness(15);
                                                screenShotPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                screenShotPhoto.Width = 50;
                                                screenShotPhoto.Height = 50;
                                                screenShotPhoto.BeginInit();
                                                screenShotPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/screenshot/photo/?id=" + id));
                                                screenShotPhoto.EndInit();
                                                screenShot.Children.Add(screenShotPhoto);
                                                TextBlock screenShotDescLabel = new TextBlock();
                                                screenShotDescLabel.Margin = new Thickness(15);
                                                screenShotDescLabel.Text = desc;
                                                screenShot.Children.Add(screenShotDescLabel);
                                                contentFavoriteScreenShots.Children.Add(screenShot);
                                                screenShot.DataContext = id;
                                                screenShot.MouseLeftButtonUp += SelectCommunityScreenShotHandler;
                                            }
                                        }
                                        else
                                        {
                                            StackPanel notFound = new StackPanel();
                                            notFound.Margin = new Thickness(0, 15, 0, 15);
                                            TextBlock notFoundLabel = new TextBlock();
                                            notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                            notFoundLabel.TextAlignment = TextAlignment.Center;
                                            notFoundLabel.FontSize = 18;
                                            string newLine = Environment.NewLine;
                                            notFoundLabel.Text = "Вы не добавили в избранное ни одного скриншота.";
                                            notFound.Children.Add(notFoundLabel);
                                            contentFavoriteScreenShots.HorizontalAlignment = HorizontalAlignment.Center;
                                            contentFavoriteScreenShots.Children.Add(notFound);
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetFavoriteIllustrationsContent ()
        {

            int selectedIndex = screenShotsFilter.SelectedIndex;
            object rawSelectedItem = screenShotsFilter.Items[selectedIndex];
            ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
            object rawFilter = selectedItem.DataContext;
            string filter = rawFilter.ToString();
            bool isFilterDisabled = filter == @"all games";
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IllustrationsResponseInfo myobj = (IllustrationsResponseInfo)js.Deserialize(objText, typeof(IllustrationsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Illustration> totalIllustrations = myobj.illustrations;

                            HttpWebRequest illustrationFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/favorites/all");
                            illustrationFavoriteRelationsWebRequest.Method = "GET";
                            illustrationFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse illustrationFavoriteRelationsWebResponse = (HttpWebResponse)illustrationFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var illustrationFavoriteRelationsReader = new StreamReader(illustrationFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = illustrationFavoriteRelationsReader.ReadToEnd();
                                    IllustrationFavoriteRelationsResponseInfo myIllustrationFavoriteRelationsObj = (IllustrationFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(IllustrationFavoriteRelationsResponseInfo));
                                    status = myIllustrationFavoriteRelationsObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        List<IllustrationFavoriteRelation> favoriteRelations = myIllustrationFavoriteRelationsObj.relations;
                                        List<IllustrationFavoriteRelation> myFavoriteRelations = favoriteRelations.Where<IllustrationFavoriteRelation>((IllustrationFavoriteRelation relation) =>
                                        {
                                            string relatioIllustrationId = relation.illustration;
                                            string relationUserId = relation.user;
                                            bool isCurrentUser = relationUserId == currentUserId;
                                            return isCurrentUser;
                                        }).ToList<IllustrationFavoriteRelation>();
                                        List<string> myFavoriteRelationIds = new List<string>();
                                        foreach (IllustrationFavoriteRelation myFavoriteRelation in myFavoriteRelations)
                                        {
                                            string myFavoriteRelationIllustrationId = myFavoriteRelation.illustration;
                                            myFavoriteRelationIds.Add(myFavoriteRelationIllustrationId);
                                        }

                                        totalIllustrations = totalIllustrations.Where<Illustration>((Illustration content) =>
                                        {
                                            string contentGameId = content.game;
                                            /*string userId = content.user;
                                            bool isMyContent = userId == currentUserId;*/
                                            bool isFilterMatch = filter == contentGameId;

                                            bool isAddIllustration = isFilterMatch || isFilterDisabled;

                                            string id = content._id;
                                            bool isFavoriteIllustration = myFavoriteRelationIds.Contains(id);
                                            // bool isAddIllustration = isMyContent && (isFilterMatch || isFilterDisabled);
                                            return isAddIllustration && isFavoriteIllustration;
                                            // return isFavoriteIllustration;
                                        }).ToList<Illustration>();
                                        contentFavoriteIllustrations.Children.Clear();
                                        int totalIllustrationsCount = totalIllustrations.Count;
                                        bool isHaveIllustrations = totalIllustrationsCount >= 1;
                                        if (isHaveIllustrations)
                                        {
                                            contentFavoriteIllustrations.HorizontalAlignment = HorizontalAlignment.Left;
                                            foreach (Illustration totalIllustrationsItem in totalIllustrations)
                                            {
                                                string id = totalIllustrationsItem._id;
                                                string title = totalIllustrationsItem.title;
                                                string desc = totalIllustrationsItem.desc;
                                                StackPanel illustration = new StackPanel();
                                                illustration.Width = 500;
                                                illustration.Margin = new Thickness(15);
                                                illustration.Background = System.Windows.Media.Brushes.LightGray;
                                                TextBlock illustrationTitleLabel = new TextBlock();
                                                illustrationTitleLabel.FontSize = 16;
                                                illustrationTitleLabel.Margin = new Thickness(15);
                                                illustrationTitleLabel.Text = title;
                                                illustration.Children.Add(illustrationTitleLabel);
                                                Image illustrationPhoto = new Image();
                                                illustrationPhoto.Margin = new Thickness(15);
                                                illustrationPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                illustrationPhoto.Width = 50;
                                                illustrationPhoto.Height = 50;
                                                illustrationPhoto.BeginInit();
                                                illustrationPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/illustration/photo/?id=" + id));
                                                illustrationPhoto.EndInit();
                                                illustration.Children.Add(illustrationPhoto);
                                                TextBlock illustrationDescLabel = new TextBlock();
                                                illustrationDescLabel.Margin = new Thickness(15);
                                                illustrationDescLabel.Text = desc;
                                                illustration.Children.Add(illustrationDescLabel);
                                                contentFavoriteIllustrations.Children.Add(illustration);
                                                illustration.DataContext = id;
                                                illustration.MouseLeftButtonUp += SelectIllustrationHandler;
                                            }
                                        }
                                        else
                                        {
                                            StackPanel notFound = new StackPanel();
                                            notFound.Margin = new Thickness(0, 15, 0, 15);
                                            TextBlock notFoundLabel = new TextBlock();
                                            notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                            notFoundLabel.TextAlignment = TextAlignment.Center;
                                            notFoundLabel.FontSize = 18;
                                            string newLine = Environment.NewLine;
                                            notFoundLabel.Text = "У вас нет избранных иллюстраций.";
                                            notFound.Children.Add(notFoundLabel);
                                            Button uploadBtn = new Button();
                                            uploadBtn.Width = 175;
                                            uploadBtn.Height = 25;
                                            uploadBtn.Margin = new Thickness(15);
                                            uploadBtn.Content = "Загрузить иллюстрацию";
                                            notFound.Children.Add(uploadBtn);
                                            contentFavoriteIllustrations.HorizontalAlignment = HorizontalAlignment.Center;
                                            contentFavoriteIllustrations.Children.Add(notFound);
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetFavoriteManualsContent ()
        {
            int selectedIndex = screenShotsFilter.SelectedIndex;
            object rawSelectedItem = screenShotsFilter.Items[selectedIndex];
            ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
            object rawFilter = selectedItem.DataContext;
            string filter = rawFilter.ToString();
            bool isFilterDisabled = filter == @"all games";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ManualsResponseInfo myobj = (ManualsResponseInfo)js.Deserialize(objText, typeof(ManualsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            HttpWebRequest manualFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/favorites/all");
                            manualFavoriteRelationsWebRequest.Method = "GET";
                            manualFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse manualFavoriteRelationsWebResponse = (HttpWebResponse)manualFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var manualFavoriteRelationsReader = new StreamReader(manualFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = manualFavoriteRelationsReader.ReadToEnd();
                                    ManualFavoriteRelationsResponseInfo myManualFavoriteRelationsObj = (ManualFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(ManualFavoriteRelationsResponseInfo));
                                    status = myManualFavoriteRelationsObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        List<ManualFavoriteRelation> favoriteRelations = myManualFavoriteRelationsObj.relations;
                                        List<ManualFavoriteRelation> myFavoriteRelations = favoriteRelations.Where<ManualFavoriteRelation>((ManualFavoriteRelation relation) =>
                                        {
                                            string relationManualId = relation.manual;
                                            string relationUserId = relation.user;
                                            bool isCurrentUser = relationUserId == currentUserId;
                                            return isCurrentUser;
                                        }).ToList<ManualFavoriteRelation>();
                                        List<string> myFavoriteRelationIds = new List<string>();
                                        foreach (ManualFavoriteRelation myFavoriteRelation in myFavoriteRelations)
                                        {
                                            string myFavoriteRelationManualId = myFavoriteRelation.manual;
                                            myFavoriteRelationIds.Add(myFavoriteRelationManualId);
                                        }

                                        List<Manual> totalManuals = myobj.manuals;
                                        totalManuals = totalManuals.Where<Manual>((Manual content) =>
                                        {
                                            string contentGameId = content.game;
                                            bool isFilterMatch = filter == contentGameId;
                                            bool isAddManual = isFilterMatch || isFilterDisabled;
                                            string id = content._id;
                                            bool isFavoriteManual = myFavoriteRelationIds.Contains(id);
                                            return isAddManual && isFavoriteManual;
                                        }).ToList<Manual>();
                                        contentFavoriteManuals.Children.Clear();
                                        int totalManualsCount = totalManuals.Count;
                                        bool isHaveManuals = totalManualsCount >= 1;
                                        if (isHaveManuals)
                                        {
                                            contentManuals.HorizontalAlignment = HorizontalAlignment.Left;
                                            foreach (Manual totalManualsItem in totalManuals)
                                            {
                                                string id = totalManualsItem._id;
                                                /*
                                                string userId = totalManualsItem.user;
                                                bool isMyContent = userId == currentUserId;
                                                bool isFavoriteManual = myFavoriteRelationIds.Contains(id);
                                                if (isFavoriteManual)
                                                {
                                                */
                                                    string title = totalManualsItem.title;
                                                    string desc = totalManualsItem.desc;
                                                    StackPanel manual = new StackPanel();
                                                    manual.Width = 500;
                                                    manual.Margin = new Thickness(15);
                                                    manual.Background = System.Windows.Media.Brushes.LightGray;
                                                    TextBlock manualTitleLabel = new TextBlock();
                                                    manualTitleLabel.FontSize = 16;
                                                    manualTitleLabel.Margin = new Thickness(15);
                                                    manualTitleLabel.Text = title;
                                                    manual.Children.Add(manualTitleLabel);
                                                    Image manualPhoto = new Image();
                                                    manualPhoto.Margin = new Thickness(15);
                                                    manualPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                    manualPhoto.Width = 50;
                                                    manualPhoto.Height = 50;
                                                    manualPhoto.BeginInit();
                                                    manualPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/manual/photo/?id=" + id));
                                                    manualPhoto.EndInit();
                                                    manual.Children.Add(manualPhoto);
                                                    TextBlock manualDescLabel = new TextBlock();
                                                    manualDescLabel.Margin = new Thickness(15);
                                                    manualDescLabel.Text = desc;
                                                    manual.Children.Add(manualDescLabel);
                                                    contentFavoriteManuals.Children.Add(manual);
                                                    manual.DataContext = id;
                                                    manual.MouseLeftButtonUp += SelectManualHandler;
                                                // }
                                            }
                                        }
                                        else
                                        {
                                            TextBlock notFoundLabel = new TextBlock();
                                            notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                            notFoundLabel.TextAlignment = TextAlignment.Center;
                                            notFoundLabel.FontSize = 18;
                                            notFoundLabel.Margin = new Thickness(15);
                                            notFoundLabel.Text = "Не найдено файлов, удовлетворяющих критериям запроса пользователя.";
                                            contentManuals.HorizontalAlignment = HorizontalAlignment.Center;
                                            contentFavoriteManuals.Children.Add(notFoundLabel);
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetManualsContent ()
        {

            object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
            bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));

            int selectedIndex = screenShotsFilter.SelectedIndex;
            object rawSelectedItem = screenShotsFilter.Items[selectedIndex];
            ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
            object rawFilter = selectedItem.DataContext;
            string filter = rawFilter.ToString();
            bool isFilterDisabled = filter == @"all games";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ManualsResponseInfo myobj = (ManualsResponseInfo)js.Deserialize(objText, typeof(ManualsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Manual> totalManuals = myobj.manuals;

                            /*HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/favorites/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ManualFavoriteRelationsResponseInfo myInnerObj = (ManualFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(ManualFavoriteRelationsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        List<ManualFavoriteRelation> relations = myInnerObj.relations;*/

                                        totalManuals = totalManuals.Where<Manual>((Manual content) =>
                                        {
                                            string contentGameId = content.game;
                                            string userId = content.user;
                                            bool isMyContent = userId == currentUserId;
                                            bool isFilterMatch = filter == contentGameId;
                                            bool isAddManual = isMyContent && (isFilterMatch || isFilterDisabled);
                                            return isAddManual;
                                        }).ToList<Manual>();
                                        /*if (mySelfContentRadioBtnIsChecked)
                                        {*/
                                            totalManuals = totalManuals.Where<Manual>((Manual content) =>
                                            {
                                                string contentGameId = content.game;
                                                string userId = content.user;
                                                bool isMyContent = userId == currentUserId;
                                                bool isFilterMatch = filter == contentGameId;
                                                bool isAddManual = isMyContent && (isFilterMatch || isFilterDisabled);
                                                return isAddManual;
                                            }).ToList<Manual>();
                                        /*}
                                        else
                                        {
                                            List<ManualFavoriteRelation> myRelations = relations.Where<ManualFavoriteRelation>((ManualFavoriteRelation relation) =>
                                            {
                                                string relationUserId = relation.user;
                                                bool isMyRelation = relationUserId == currentUserId;
                                                return isMyRelation;
                                            }).ToList<ManualFavoriteRelation>();
                                            List<string> myFavoriteManualIds = new List<string>();
                                            foreach (ManualFavoriteRelation relation in myRelations)
                                            {
                                                string myFavoriteManualId = relation.manual;
                                                myFavoriteManualIds.Add(myFavoriteManualId);
                                            }
                                            totalManuals = totalManuals.Where<Manual>((Manual content) =>
                                            {
                                                string contentManualId = content._id;
                                                string contentGameId = content.game;
                                                bool isMyFavoriteContent = myFavoriteManualIds.Contains(contentManualId);
                                                bool isFilterMatch = filter == contentGameId;
                                                bool isAddManual = isMyFavoriteContent && (isFilterMatch || isFilterDisabled);
                                                return isAddManual;
                                            }).ToList<Manual>();
                                        }*/

                                        contentManuals.Children.Clear();
                                        int totalManualsCount = totalManuals.Count;
                                        bool isHaveManuals = totalManualsCount >= 1;
                                        if (isHaveManuals)
                                        {
                                            contentManuals.HorizontalAlignment = HorizontalAlignment.Left;
                                            foreach (Manual totalManualsItem in totalManuals)
                                            {
                                                string id = totalManualsItem._id;
                                                string userId = totalManualsItem.user;
                                                bool isMyContent = userId == currentUserId;
                                                if (isMyContent)
                                                {
                                                    string title = totalManualsItem.title;
                                                    string desc = totalManualsItem.desc;
                                                    StackPanel manual = new StackPanel();
                                                    manual.Width = 500;
                                                    manual.Margin = new Thickness(15);
                                                    manual.Background = System.Windows.Media.Brushes.LightGray;
                                                    TextBlock manualTitleLabel = new TextBlock();
                                                    manualTitleLabel.FontSize = 16;
                                                    manualTitleLabel.Margin = new Thickness(15);
                                                    manualTitleLabel.Text = title;
                                                    manual.Children.Add(manualTitleLabel);
                                                    Image manualPhoto = new Image();
                                                    manualPhoto.Margin = new Thickness(15);
                                                    manualPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                    manualPhoto.Width = 50;
                                                    manualPhoto.Height = 50;
                                                    manualPhoto.BeginInit();
                                                    manualPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/manual/photo/?id=" + id));
                                                    manualPhoto.EndInit();
                                                    manual.Children.Add(manualPhoto);
                                                    TextBlock manualDescLabel = new TextBlock();
                                                    manualDescLabel.Margin = new Thickness(15);
                                                    manualDescLabel.Text = desc;
                                                    manual.Children.Add(manualDescLabel);
                                                    contentManuals.Children.Add(manual);
                                                    manual.DataContext = id;
                                                    manual.MouseLeftButtonUp += SelectManualHandler;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            TextBlock notFoundLabel = new TextBlock();
                                            notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                            notFoundLabel.TextAlignment = TextAlignment.Center;
                                            notFoundLabel.FontSize = 18;
                                            notFoundLabel.Margin = new Thickness(15);
                                            notFoundLabel.Text = "Не найдено файлов, удовлетворяющих критериям запроса пользователя.";
                                            contentManuals.HorizontalAlignment = HorizontalAlignment.Center;
                                            contentManuals.Children.Add(notFoundLabel);
                                        }

                                    /*}
                                }
                            }*/

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetExperiments ()
        {
            experiments.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/experiments/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ExperimentsResponseInfo myobj = (ExperimentsResponseInfo)js.Deserialize(objText, typeof(ExperimentsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Experiment> totalExperiments = myobj.experiments;
                            foreach (Experiment totalExperimentsItem in totalExperiments)
                            {
                                string id = totalExperimentsItem._id;
                                string title = totalExperimentsItem.title;
                                string desc = totalExperimentsItem.desc;
                                StackPanel experiment = new StackPanel();
                                experiment.Background = System.Windows.Media.Brushes.LightGray;
                                experiment.Margin = new Thickness(15);
                                experiment.Width = 850;
                                experiment.Height = 350;
                                Image experimentPhoto = new Image();
                                experimentPhoto.Width = 500;
                                experimentPhoto.Height = 300;
                                experimentPhoto.BeginInit();
                                experimentPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/experiment/photo/?id=" + id));
                                experimentPhoto.EndInit();
                                experiment.Children.Add(experimentPhoto);
                                TextBlock experimentTitleLabel = new TextBlock();
                                experimentTitleLabel.Margin = new Thickness(15);
                                experimentTitleLabel.FontSize = 20;
                                experimentTitleLabel.Text = title;
                                experiment.Children.Add(experimentTitleLabel);
                                TextBlock experimentDescLabel = new TextBlock();
                                experimentDescLabel.Margin = new Thickness(15);
                                experimentDescLabel.Text = desc;
                                experiment.Children.Add(experimentDescLabel);
                                experiments.Children.Add(experiment);
                                experiment.DataContext = id;
                                experiment.MouseLeftButtonUp += OpenExperimentHandler;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenExperimentHandler (object sender, RoutedEventArgs e)
        {
            StackPanel experiment = ((StackPanel)(sender));
            object experimentData = experiment.DataContext;
            string experimentId = ((string)(experimentData));
            OpenExperiment(experimentId);
        }

        public void OpenExperiment (string experimentId)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string appFolder = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\";
            string wordPath = appFolder + "index.doc";
            WebClient wc = new WebClient();
            wc.Headers.Add("User-Agent: Other");   //that is the simple line!
            wc.DownloadFileAsync(new Uri(@"http://localhost:4000/api/experiment/document/?id=" + experimentId), wordPath);
            wc.DownloadFileCompleted += new AsyncCompletedEventHandler(wc_DownloadFileCompleted);
        }

        private void wc_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
        {
            Exception downloadError = e.Error;
            bool isErrorsNotFound = downloadError == null;
            if (isErrorsNotFound)
            {
                activeExperiment.Document = null;
                bool isWordOpened = doc != null;
                if (isWordOpened)
                {
                    doc.Close();
                    doc = null;
                    bool isDocsOpened = wordApplication.Documents.Count >= 1;
                    if (isDocsOpened)
                    {
                        wordApplication.Documents.Close();
                        wordApplication.Quit();
                    }
                }
                bool isDocOpened = document != null;
                if (isDocOpened)
                {
                    document.Close();
                    document = null;
                }
                Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                string appFolder = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\";
                string xpsPath = appFolder + "index.xps";
                string wordPath = appFolder + "index.doc";
                // Create a WordApplication and add Document to it
                wordApplication = new Microsoft.Office.Interop.Word.Application();
                wordApplication.Documents.Add(wordPath);
                doc = wordApplication.ActiveDocument;
                bool isXpsExists = File.Exists(xpsPath);
                if (isXpsExists)
                {
                    File.Delete(xpsPath);
                }
                doc.SaveAs(xpsPath, Microsoft.Office.Interop.Word.WdSaveFormat.wdFormatXPS);
                document = new System.Windows.Xps.Packaging.XpsDocument(xpsPath, FileAccess.Read);
                activeExperiment.Document = document.GetFixedDocumentSequence();
                mainControl.SelectedIndex = 30;
            }
        }

        public void InitializeTray ()
        {
            System.Windows.Forms.NotifyIcon nIcon = new System.Windows.Forms.NotifyIcon();
            nIcon.Icon = new System.Drawing.Icon(@"C:\wpf_projects\AntiVirus\AntiVirus\Assets\application_icon.ico");
            nIcon.Visible = true;
            string nIconTitle = "Office ware game manager";
            nIcon.Text = nIconTitle;
        }

        public void GetCommunityInfo ()
        {
            GetCommunityRecentGames();
            GetCommunityTotalContent();
            GetCommunityScreenShots();
            GetIllustrations();
            GetManuals();
            GetReviews();
            GetAddCommunityItemsAction();
        }

        public void GetAddCommunityItemsAction ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            int currentGamesCount = currentGames.Count;
            bool isHaveInstalledGames = currentGamesCount >= 1;
            addCustomManualBtn.IsEnabled = isHaveInstalledGames;
            addCustomIllustrationBtn.IsEnabled = isHaveInstalledGames;
            addCustomReviewBtn.IsEnabled = isHaveInstalledGames;
        }

        public void GetCommunityRecentGames ()
        {
            RowDefinitionCollection rows = communityActivity.RowDefinitions;
            int rowsCount = rows.Count;
            bool isHaveRows = rowsCount >= 2;
            int lastRowIndex = 0;
            if (isHaveRows)
            {
                UIElementCollection communityActivityChildren = communityActivity.Children;
                int communityActivityChildrenCount = communityActivityChildren.Count;
                int countExceptExistedLabels = 2;
                int communityActivityChildrenCountExceptExistedLabels = communityActivityChildrenCount - countExceptExistedLabels;
                communityActivity.Children.RemoveRange(countExceptExistedLabels, communityActivityChildrenCountExceptExistedLabels);
                lastRowIndex = rowsCount - 1;
                communityActivity.RowDefinitions.RemoveRange(1, lastRowIndex);
            }
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            DateTime currentDate = DateTime.Now;
            List<Game> recentGames = currentGames.Where<Game>((Game someGame) =>
            {
                string rawSomeGameDate = someGame.date;
                DateTime someGameDate = DateTime.Parse(rawSomeGameDate);
                TimeSpan interval = currentDate.Subtract(someGameDate);
                double intervalDays = interval.TotalDays;
                bool isRecent = intervalDays <= 14;
                return isRecent;
            }).ToList<Game>();
            foreach (Game recentGame in recentGames)
            {
                string recentRunGameName = recentGame.name;
                string recentRunGameHours = recentGame.hours;
                RowDefinition row = new RowDefinition();
                communityActivity.RowDefinitions.Add(row);
                rows = communityActivity.RowDefinitions;
                rowsCount = rows.Count;
                lastRowIndex = rowsCount - 1;
                StackPanel recentRunGame = new StackPanel();
                recentRunGame.Background = System.Windows.Media.Brushes.LightGray;
                recentRunGame.Margin = new Thickness(15);
                recentRunGame.Orientation = Orientation.Horizontal;
                Image recentRunGameThumbnail = new Image();
                recentRunGameThumbnail.Width = 35;
                recentRunGameThumbnail.Height = 35;
                recentRunGameThumbnail.Margin = new Thickness(15, 5, 15, 5);
                recentRunGameThumbnail.BeginInit();
                recentRunGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + recentRunGameName));
                recentRunGameThumbnail.EndInit();
                recentRunGame.Children.Add(recentRunGameThumbnail);
                StackPanel recentRunGameAside = new StackPanel();
                recentRunGameAside.Margin = new Thickness(15, 0, 15, 0);
                TextBlock recentRunGameAsideNameLabel = new TextBlock();
                recentRunGameAsideNameLabel.Margin = new Thickness(0, 5, 0, 5);
                recentRunGameAsideNameLabel.FontSize = 14;
                recentRunGameAsideNameLabel.Text = recentRunGameName;
                recentRunGameAside.Children.Add(recentRunGameAsideNameLabel);
                TextBlock recentRunGameAsideHoursLabel = new TextBlock();
                recentRunGameAsideHoursLabel.Margin = new Thickness(0, 5, 0, 5);
                string recentRunGameAsideHoursLabelContent = recentRunGameHours + " ч.";
                recentRunGameAsideHoursLabel.Text = recentRunGameAsideHoursLabelContent;
                recentRunGameAside.Children.Add(recentRunGameAsideHoursLabel);
                recentRunGame.Children.Add(recentRunGameAside);
                communityActivity.Children.Add(recentRunGame);
                Grid.SetRow(recentRunGame, lastRowIndex);
                Grid.SetColumn(recentRunGame, 0);
            }
        }

        public void GetReviews ()
        {

            object communityActivityControlGameData = communityActivityControl.DataContext;
            bool isCommunityActivityControlGameDataExists = communityActivityControlGameData != null;
            string communityActivityControlGameId = "";
            if (isCommunityActivityControlGameDataExists)
            {
                communityActivityControlGameId = communityActivityControlGameData.ToString();
            }
            int communityActivityControlSelectedIndex = communityActivityControl.SelectedIndex;
            bool isTotalCommunity = communityActivityControlSelectedIndex == 0;
            bool isGameCommunity = !isTotalCommunity;

            object reviewsSortPanelData = reviewsSortPanel.DataContext;
            string sortType = reviewsSortPanelData.ToString();
            bool isPopularSortType = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ReviewsResponseInfo myobj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Review> totalReviews = myobj.reviews;
                            
                            if (isPopularSortType)
                            {
                                // totalReviews = totalReviews.OrderByDescending<Object, Int32>((Review review) => review.advices).ToList<Review>();
                                totalReviews = totalReviews.OrderByDescending((Review review) => review.advices).ToList<Review>();
                                // totalReviews.Sort(new ReviewAdviceComparer());
                            }
                            else
                            {
                                totalReviews = totalReviews.OrderByDescending((Review review) => review.date).ToList<Review>();
                                // totalReviews.Sort(new ReviewDateComparer());
                            }

                            reviews.Children.Clear();
                            int totalReviewsCount = totalReviews.Count;
                            bool isHaveReviews = totalReviewsCount >= 1;
                            if (isHaveReviews)
                            {
                                reviews.HorizontalAlignment = HorizontalAlignment.Left;
                                int communityItemsCursor = 0;
                                foreach (Review totalReviewsItem in totalReviews)
                                {
                                    string id = totalReviewsItem._id;
                                    string desc = totalReviewsItem.desc;
                                    string gameId = totalReviewsItem.game;
                                    DateTime date = totalReviewsItem.date;
                                    string hours = totalReviewsItem.hours;
                                    string author = totalReviewsItem.user;
                                    string visibility = totalReviewsItem.visibility;
                                    bool isForAll = visibility == "Для всех";
                                    bool isOnlyFriends = visibility == "Только для друзей";

                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                List<Friend> friendRecords = myInnerObj.friends.Where<Friend>((Friend joint) =>
                                                {
                                                    string userId = joint.user;
                                                    bool isMyFriend = userId == currentUserId;
                                                    return isMyFriend;
                                                }).ToList<Friend>();
                                                List<string> friendsIds = new List<string>();
                                                foreach (Friend friendRecord in friendRecords)
                                                {
                                                    string localFriendId = friendRecord.friend;
                                                    friendsIds.Add(localFriendId);
                                                }
                                                bool isAuthorFriend = friendsIds.Contains(author);
                                                bool isHaveAccess = isOnlyFriends && isAuthorFriend;
                                                bool isAuthor = currentUserId == author;
                                                bool isAddReview = isForAll || isHaveAccess || isAuthor;
                                                if (isAddReview)
                                                {

                                                    HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                    nestedWebRequest.Method = "GET";
                                                    nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                    {
                                                        using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = nestedReader.ReadToEnd();
                                                            GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                            string responseStatus = myNestedObj.status;
                                                            bool isOKStatus = responseStatus == "OK";
                                                            if (isOKStatus)
                                                            {
                                                                List<GameResponseInfo> totalGames = myNestedObj.games;
                                                                List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                                {
                                                                    string someGameId = someGame._id;
                                                                    bool isIdMatches = someGameId == gameId;
                                                                    return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity);
                                                                }).ToList<GameResponseInfo>();
                                                                int countResults = results.Count;
                                                                bool isHaveResults = countResults >= 1;
                                                                if (isHaveResults)
                                                                {

                                                                    communityItemsCursor++;

                                                                    HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/comments/all");
                                                                    innerNestedWebRequest.Method = "GET";
                                                                    innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                                    using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                                    {
                                                                        using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                        {
                                                                            js = new JavaScriptSerializer();
                                                                            objText = innerNestedReader.ReadToEnd();
                                                                            ReviewCommentsResponseInfo myInnerNestedObj = (ReviewCommentsResponseInfo)js.Deserialize(objText, typeof(ReviewCommentsResponseInfo));
                                                                            status = myInnerNestedObj.status;
                                                                            isOkStatus = status == "OK";
                                                                            if (isOkStatus)
                                                                            {
                                                                                List<ReviewComment> reviewComments = myInnerNestedObj.comments;
                                                                                List<ReviewComment> currentReviewComments = reviewComments.Where<ReviewComment>((ReviewComment comment) =>
                                                                                {
                                                                                    string commentReviewId = comment.review;
                                                                                    bool isCurrentReview = commentReviewId == id;
                                                                                    return isCurrentReview;
                                                                                }).ToList<ReviewComment>();
                                                                                int countComments = currentReviewComments.Count;
                                                                                string rawCountComments = countComments.ToString();

                                                                                GameResponseInfo reviewGame = results[0];
                                                                                string reviewGameName = reviewGame.name;
                                                                                string rawDate = date.ToLongDateString();
                                                                                StackPanel review = new StackPanel();
                                                                                review.Width = 500;
                                                                                review.Margin = new Thickness(15);
                                                                                review.Background = System.Windows.Media.Brushes.LightGray;
                                                                                TextBlock reviewAdvicesLabel = new TextBlock();
                                                                                reviewAdvicesLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                int countAdvices = 0;
                                                                                string rawCountAdvices = countAdvices.ToString();
                                                                                string reviewAdvicesLabelContent = "Пользователей, посчитавших обзор полезным: " + rawCountAdvices;
                                                                                reviewAdvicesLabel.Text = reviewAdvicesLabelContent;
                                                                                review.Children.Add(reviewAdvicesLabel);
                                                                                TextBlock reviewFunsLabel = new TextBlock();
                                                                                reviewFunsLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                int countFuns = 0;
                                                                                string rawCountFuns = countFuns.ToString();
                                                                                string reviewFunsLabelContent = "Пользователей, посчитавших обзор забавным: " + rawCountFuns;
                                                                                reviewFunsLabel.Text = reviewFunsLabelContent;
                                                                                review.Children.Add(reviewFunsLabel);
                                                                                StackPanel reviewHeader = new StackPanel();
                                                                                reviewHeader.Orientation = Orientation.Horizontal;
                                                                                PackIcon reviewIcon = new PackIcon();
                                                                                reviewIcon.Margin = new Thickness(15);
                                                                                reviewIcon.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                reviewIcon.Width = 50;
                                                                                reviewIcon.Height = 50;
                                                                                reviewIcon.Kind = PackIconKind.ThumbsUp;
                                                                                reviewHeader.Children.Add(reviewIcon);
                                                                                StackPanel reviewHeaderAside = new StackPanel();
                                                                                reviewHeaderAside.Margin = new Thickness(15);

                                                                                TextBlock reviewHeaderAsideRecommendationLabel = new TextBlock();
                                                                                reviewHeaderAsideRecommendationLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                reviewHeaderAsideRecommendationLabel.FontSize = 16;
                                                                                reviewHeaderAsideRecommendationLabel.Text = "Рекомендую";
                                                                                reviewHeaderAside.Children.Add(reviewHeaderAsideRecommendationLabel);
                                                                                TextBlock reviewHeaderAsideHoursLabel = new TextBlock();
                                                                                string rawHours = hours.ToString();
                                                                                string reviewHeaderAsideHoursLabelContent = rawHours + " ч. всего";
                                                                                reviewHeaderAsideHoursLabel.Text = reviewHeaderAsideHoursLabelContent;
                                                                                reviewHeaderAside.Children.Add(reviewHeaderAsideHoursLabel);

                                                                                reviewHeader.Children.Add(reviewHeaderAside);
                                                                                review.Children.Add(reviewHeader);
                                                                                TextBlock reviewDateLabel = new TextBlock();
                                                                                reviewDateLabel.Margin = new Thickness(15);
                                                                                string reviewDateLabelContent = "Опубликовано: " + rawDate;
                                                                                reviewDateLabel.Foreground = System.Windows.Media.Brushes.Orange;
                                                                                reviewDateLabel.Text = reviewDateLabelContent;
                                                                                review.Children.Add(reviewDateLabel);
                                                                                TextBlock reviewDescLabel = new TextBlock();
                                                                                reviewDescLabel.Margin = new Thickness(15);
                                                                                reviewDescLabel.Text = desc;
                                                                                reviewDescLabel.FontSize = 14;
                                                                                review.Children.Add(reviewDescLabel);
                                                                                Separator reviewSeparator = new Separator();
                                                                                review.Children.Add(reviewSeparator);
                                                                                DockPanel reviewFooter = new DockPanel();
                                                                                reviewFooter.Margin = new Thickness(15);
                                                                                TextBlock reviewFooterGameNameLabel = new TextBlock();
                                                                                reviewFooterGameNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                                                                reviewFooterGameNameLabel.Text = reviewGameName;
                                                                                reviewFooter.Children.Add(reviewFooterGameNameLabel);
                                                                                StackPanel reviewFooterComments = new StackPanel();
                                                                                reviewFooterComments.Margin = new Thickness(15, 0, 15, 0);
                                                                                reviewFooterComments.Orientation = Orientation.Horizontal;
                                                                                reviewFooterComments.HorizontalAlignment = HorizontalAlignment.Right;
                                                                                PackIcon reviewFooterCommentsIcon = new PackIcon();
                                                                                reviewFooterCommentsIcon.Kind = PackIconKind.Chat;
                                                                                reviewFooterCommentsIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                reviewFooterComments.Children.Add(reviewFooterCommentsIcon);
                                                                                TextBlock reviewFooterCountCommentsLabel = new TextBlock();
                                                                                reviewFooterCountCommentsLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                reviewFooterCountCommentsLabel.Text = rawCountComments;
                                                                                reviewFooterComments.Children.Add(reviewFooterCountCommentsLabel);
                                                                                reviewFooter.Children.Add(reviewFooterComments);
                                                                                review.Children.Add(reviewFooter);
                                                                                reviews.Children.Add(review);
                                                                                review.DataContext = id;
                                                                                review.MouseLeftButtonUp += SelectReviewHandler;

                                                                            }
                                                                        }
                                                                    }

                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                                
                                            }
                                        }
                                    }
                                }

                                bool isNotCommunityItems = communityItemsCursor <= 0;
                                if (isNotCommunityItems)
                                {
                                    TextBlock notFoundLabel = new TextBlock();
                                    notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                    notFoundLabel.TextAlignment = TextAlignment.Center;
                                    notFoundLabel.FontSize = 18;
                                    notFoundLabel.Text = "Обзоров не найдено";
                                    reviews.HorizontalAlignment = HorizontalAlignment.Center;
                                    reviews.Children.Add(notFoundLabel);
                                }

                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectReviewHandler (object sender, RoutedEventArgs e)
        {
            StackPanel review = ((StackPanel)(sender));
            object reviewData = review.DataContext;
            string reviewId = ((string)(reviewData));
            SelectReview(reviewId);
        }

        public void SelectReview (string id)
        {
            mainReviewComments.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ReviewResponseInfo myobj = (ReviewResponseInfo)js.Deserialize(objText, typeof(ReviewResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Review review = myobj.review;
                            string userId = review.user;
                            string currentGameId = review.game;
                            string desc = review.desc;
                            DateTime date = review.date;
                            string hours = review.hours;
                            int advices = review.advices;
                            int funs = review.funs;
                            bool isCommentsEnabled = review.isCommentsEnabled;
                            string visibility = review.visibility;
                            bool isFreeProduct = review.isFreeProduct;
                            string rawDate = date.ToLongDateString();
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GamesListResponseInfo myInnerObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GameResponseInfo> games = myInnerObj.games;
                                        List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                        {
                                            string gameId = game._id;
                                            bool isIdMatches = gameId == currentGameId;
                                            return isIdMatches;
                                        }).ToList<GameResponseInfo>();
                                        int countResults = gameResults.Count;
                                        bool isResultsFound = countResults >= 1;
                                        if (isResultsFound)
                                        {
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        User user = myNestedObj.user;
                                                        string userName = user.name;
                                                        string hoursMeasure = "часов";
                                                        string mainReviewGameHoursLabelContent = hours + " " + hoursMeasure;
                                                        mainReviewGameHoursLabel.Text = mainReviewGameHoursLabelContent;
                                                        mainReviewUserNameLabel.Text = userName;
                                                        mainReviewUserAvatar.BeginInit();
                                                        mainReviewUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + userId));
                                                        mainReviewUserAvatar.EndInit();
                                                        GameResponseInfo foundedGame = gameResults[0];
                                                        string foundedGameName = foundedGame.name;
                                                        Debugger.Log(0, "debug", Environment.NewLine + "foundedGameName: " + foundedGameName + Environment.NewLine);
                                                        mainReviewGameThumbnail.BeginInit();
                                                        // mainReviewGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + foundedGameName));
                                                        mainReviewGameThumbnail.Source = new BitmapImage(new Uri(@"https://cdn3.iconfinder.com/data/icons/solid-locations-icon-set/64/Games_2-256.png"));
                                                        mainReviewGameThumbnail.EndInit();
                                                        mainReviewGameLabel.Text = foundedGameName;
                                                        mainReviewDescLabel.Text = desc;
                                                        string mainReviewDateLabelContent = "Опубликовано: " + rawDate;
                                                        mainReviewDateLabel.Text = mainReviewDateLabelContent;
                                                        mainReviewDateLabel.Text = mainReviewDateLabelContent;
                                                        string rawAdvices = advices.ToString();
                                                        string mainReviewAdvicesLabelContent = "Пользователей, посчитавших обзор полезным: " + rawAdvices;
                                                        mainReviewAdvicesLabel.Text = mainReviewAdvicesLabelContent;
                                                        string rawFuns = funs.ToString();
                                                        string mainReviewFunsLabelContent = "Пользователей, посчитавших обзор забавным: " + rawFuns;
                                                        mainReviewFunsLabel.Text = mainReviewFunsLabelContent;
                                                        if (isCommentsEnabled)
                                                        {
                                                            mainReviewDisabledCommentsPanel.Visibility = invisible;
                                                            mainReviewEnabledCommentsPanel.Visibility = visible;
                                                            mainReviewSendCommentPanel.Visibility = visible;

                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/comments/all");
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    ReviewCommentsResponseInfo myInnerNestedObj = (ReviewCommentsResponseInfo)js.Deserialize(objText, typeof(ReviewCommentsResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        List<ReviewComment> reviewComments = myInnerNestedObj.comments;
                                                                        List<ReviewComment> currentReviewComments = reviewComments.Where<ReviewComment>((ReviewComment comment) =>
                                                                        {
                                                                            string commentReviewId = comment.review;
                                                                            bool isCurrentReview = commentReviewId == id;
                                                                            return isCurrentReview;
                                                                        }).ToList<ReviewComment>();
                                                                        int countComments = currentReviewComments.Count;
                                                                        string rawCountComments = countComments.ToString();
                                                                        string mainReviewEnabledCommentsPanelCountLabelContent = "Комментариев: " + rawCountComments;
                                                                        mainReviewEnabledCommentsPanelCountLabel.Text = mainReviewEnabledCommentsPanelCountLabelContent;

                                                                        foreach (ReviewComment comment in currentReviewComments)
                                                                        {
                                                                            string commentUserId = comment.user;
                                                                            HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + commentUserId);
                                                                            userWebRequest.Method = "GET";
                                                                            userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                            using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                            {
                                                                                using (StreamReader userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                                {
                                                                                    js = new JavaScriptSerializer();
                                                                                    objText = userReader.ReadToEnd();
                                                                                    UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                    status = myUserObj.status;
                                                                                    isOkStatus = status == "OK";
                                                                                    if (isOkStatus)
                                                                                    {
                                                                                        User commentUser = myUserObj.user;
                                                                                        string commentUserName = commentUser.name;
                                                                                        DateTime commentDate = comment.date;
                                                                                        string commentContent = comment.content;
                                                                                        string rawCommentDate = commentDate.ToLongDateString();
                                                                                        StackPanel mainReviewComment = new StackPanel();
                                                                                        mainReviewComment.Orientation = Orientation.Horizontal;
                                                                                        mainReviewComment.Margin = new Thickness(15);
                                                                                        Image mainReviewCommentUserAvatar = new Image();
                                                                                        mainReviewCommentUserAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                                        mainReviewCommentUserAvatar.Width = 40;
                                                                                        mainReviewCommentUserAvatar.Height = 40;
                                                                                        mainReviewCommentUserAvatar.BeginInit();
                                                                                        mainReviewCommentUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + commentUserId));
                                                                                        mainReviewCommentUserAvatar.EndInit();
                                                                                        mainReviewComment.Children.Add(mainReviewCommentUserAvatar);
                                                                                        StackPanel mainReviewCommentAside = new StackPanel();
                                                                                        mainReviewCommentAside.Margin = new Thickness(15, 0, 15, 0);
                                                                                        StackPanel mainReviewCommentAsideHeader = new StackPanel();
                                                                                        mainReviewCommentAsideHeader.Orientation = Orientation.Horizontal;
                                                                                        TextBlock mainReviewCommentAsideHeaderUserNameLabel = new TextBlock();
                                                                                        mainReviewCommentAsideHeaderUserNameLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                        mainReviewCommentAsideHeaderUserNameLabel.Text = commentUserName;
                                                                                        mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderUserNameLabel);
                                                                                        TextBlock mainReviewCommentAsideHeaderDateLabel = new TextBlock();
                                                                                        mainReviewCommentAsideHeaderDateLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                        mainReviewCommentAsideHeaderDateLabel.Text = rawCommentDate;
                                                                                        mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderDateLabel);
                                                                                        mainReviewCommentAside.Children.Add(mainReviewCommentAsideHeader);
                                                                                        TextBlock mainReviewCommentContentLabel = new TextBlock();
                                                                                        mainReviewCommentContentLabel.Margin = new Thickness(5, 10, 5, 0);
                                                                                        mainReviewCommentContentLabel.Text = commentContent;
                                                                                        mainReviewCommentAside.Children.Add(mainReviewCommentContentLabel);
                                                                                        mainReviewComment.Children.Add(mainReviewCommentAside);
                                                                                        mainReviewComments.Children.Add(mainReviewComment);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            mainReviewDisabledCommentsPanel.Visibility = visible;
                                                            mainReviewEnabledCommentsPanel.Visibility = invisible;
                                                            mainReviewSendCommentPanel.Visibility = invisible;
                                                        }
                                                        if (isFreeProduct)
                                                        {
                                                            mainReviewFreeProductLabel.Visibility = visible;
                                                        }
                                                        else
                                                        {
                                                            mainReviewFreeProductLabel.Visibility = invisible;
                                                        }
                                                        mainReview.DataContext = id;
                                                        mainControl.SelectedIndex = 27;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetCommunityScreenShots ()
        {

            object communityActivityControlGameData = communityActivityControl.DataContext;
            bool isCommunityActivityControlGameDataExists = communityActivityControlGameData != null;
            string communityActivityControlGameId = "";
            if (isCommunityActivityControlGameDataExists)
            {
                communityActivityControlGameId = communityActivityControlGameData.ToString();
            }
            int communityActivityControlSelectedIndex = communityActivityControl.SelectedIndex;
            bool isTotalCommunity = communityActivityControlSelectedIndex == 0;
            bool isGameCommunity = !isTotalCommunity;

            object screenShotsSortPanelData = screenShotsSortPanel.DataContext;
            string sortType = screenShotsSortPanelData.ToString();
            bool isPopularSortType = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ScreenShotsResponseInfo myobj = (ScreenShotsResponseInfo)js.Deserialize(objText, typeof(ScreenShotsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            List<ScreenShot> totalCommunityScreenShots = myobj.screenShots;

                            if (isPopularSortType)
                            {
                                totalCommunityScreenShots.Sort(new ScreenShotLikesComparer());
                            }
                            else
                            {
                                totalCommunityScreenShots.Sort(new ScreenShotDateComparer());
                            }

                            communityScreenShots.Children.Clear();
                            int totalCommunityScreenShotsCount = totalCommunityScreenShots.Count;
                            bool isHaveCommunityScreenShots = totalCommunityScreenShotsCount >= 1;
                            if (isHaveCommunityScreenShots)
                            {
                                communityScreenShots.HorizontalAlignment = HorizontalAlignment.Left;
                                int communityItemsCursor = 0;
                                foreach (ScreenShot totalCommunityScreenShotsItem in totalCommunityScreenShots)
                                {
                                    string id = totalCommunityScreenShotsItem._id;
                                    string userId = totalCommunityScreenShotsItem.user;

                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {

                                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                nestedWebRequest.Method = "GET";
                                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                {
                                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = nestedReader.ReadToEnd();
                                                        GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                        string responseStatus = myNestedObj.status;
                                                        bool isOKStatus = responseStatus == "OK";
                                                        if (isOKStatus)
                                                        {

                                                            string gameId = totalCommunityScreenShotsItem.game;

                                                            List<GameResponseInfo> totalGames = myNestedObj.games;
                                                            List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                            {
                                                                string someGameId = someGame._id;
                                                                bool isIdMatches = someGameId == gameId;
                                                                return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity);
                                                            }).ToList<GameResponseInfo>();
                                                            int countResults = results.Count;
                                                            bool isHaveResults = countResults >= 1;
                                                            if (isHaveResults)
                                                            {
                                                                communityItemsCursor++;
                                                                GameResponseInfo screenShotGame = results[0];

                                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/comments/all");
                                                                innerNestedWebRequest.Method = "GET";
                                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                                {
                                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                    {
                                                                        js = new JavaScriptSerializer();
                                                                        objText = innerNestedReader.ReadToEnd();
                                                                        CommunityScreenShotCommentsResponseInfo myInnerNestedObj = (CommunityScreenShotCommentsResponseInfo)js.Deserialize(objText, typeof(CommunityScreenShotCommentsResponseInfo));
                                                                        status = myInnerNestedObj.status;
                                                                        isOkStatus = status == "OK";
                                                                        if (isOkStatus)
                                                                        {

                                                                            int likes = totalCommunityScreenShotsItem.likes;

                                                                            string screenShotGameName = screenShotGame.name;

                                                                            List<CommunityScreenShotComment> communityScreenShotsComments = myInnerNestedObj.comments;
                                                                            List<CommunityScreenShotComment> currentCommunityScreenShotComments = communityScreenShotsComments.Where<CommunityScreenShotComment>((CommunityScreenShotComment comment) =>
                                                                            {
                                                                                string commentCommunityScreenShotId = comment.screenShot;
                                                                                bool isCurrentScreenShot = commentCommunityScreenShotId == id;
                                                                                return isCurrentScreenShot;
                                                                            }).ToList<CommunityScreenShotComment>();
                                                                            int countComments = currentCommunityScreenShotComments.Count;
                                                                            string rawCountComments = countComments.ToString(); ;
                                                                            string rawCountLikes = likes.ToString();
                                                                            User author = myInnerObj.user;
                                                                            string authorName = author.name;

                                                                            StackPanel communityScreenShot = new StackPanel();
                                                                            communityScreenShot.Width = 500;
                                                                            communityScreenShot.Margin = new Thickness(15);
                                                                            communityScreenShot.Background = System.Windows.Media.Brushes.LightGray;
                                                                            Image communityScreenShotPhoto = new Image();
                                                                            communityScreenShotPhoto.Margin = new Thickness(15);
                                                                            communityScreenShotPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                            communityScreenShotPhoto.Width = 500;
                                                                            communityScreenShotPhoto.Height = 425;
                                                                            communityScreenShotPhoto.BeginInit();
                                                                            communityScreenShotPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/screenshot/photo/?id=" + id));
                                                                            communityScreenShotPhoto.EndInit();
                                                                            communityScreenShot.Children.Add(communityScreenShotPhoto);
                                                                            DockPanel communityScreenShotFooter = new DockPanel();
                                                                            // communityScreenShotFooter.Orientation = Orientation.Horizontal;
                                                                            PackIcon communityScreenShotFooterItemIcon = new PackIcon();
                                                                            communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                            communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooter.Children.Add(communityScreenShotFooterItemIcon);
                                                                            communityScreenShotFooterItemIcon = new PackIcon();
                                                                            communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbDown;
                                                                            communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooter.Children.Add(communityScreenShotFooterItemIcon);
                                                                            StackPanel communityScreenShotFooterItem = new StackPanel();
                                                                            communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                            communityScreenShotFooterItemIcon = new PackIcon();
                                                                            communityScreenShotFooterItemIcon.Kind = PackIconKind.Medal;
                                                                            communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                            TextBlock communityScreenShotFooterItemLabel = new TextBlock();
                                                                            communityScreenShotFooterItemLabel.Text = "Наградить";
                                                                            communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                            communityScreenShotFooter.Children.Add(communityScreenShotFooterItem);
                                                                            StackPanel communityScreenShotFooterAside = new StackPanel();
                                                                            communityScreenShotFooterAside.Orientation = Orientation.Horizontal;
                                                                            communityScreenShotFooterAside.HorizontalAlignment = HorizontalAlignment.Right;

                                                                            communityScreenShotFooterItem = new StackPanel();
                                                                            communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                            communityScreenShotFooterItemIcon = new PackIcon();
                                                                            communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                            communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                            communityScreenShotFooterItemLabel = new TextBlock();
                                                                            communityScreenShotFooterItemLabel.Text = rawCountLikes;
                                                                            communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                            communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                            communityScreenShotFooterItem = new StackPanel();
                                                                            communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                            communityScreenShotFooterItemIcon = new PackIcon();
                                                                            communityScreenShotFooterItemIcon.Kind = PackIconKind.Medal;
                                                                            communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                            communityScreenShotFooterItemLabel = new TextBlock();
                                                                            communityScreenShotFooterItemLabel.Text = "0";
                                                                            communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                            communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                            communityScreenShotFooterItem = new StackPanel();
                                                                            communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                            communityScreenShotFooterItemIcon = new PackIcon();
                                                                            communityScreenShotFooterItemIcon.Kind = PackIconKind.Chat;
                                                                            communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                            communityScreenShotFooterItemLabel = new TextBlock();
                                                                            communityScreenShotFooterItemLabel.Text = rawCountComments;
                                                                            communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                            communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);

                                                                            communityScreenShotFooter.Children.Add(communityScreenShotFooterAside);
                                                                            communityScreenShot.Children.Add(communityScreenShotFooter);

                                                                            TextBlock communityScreenShotAuthorLabel = new TextBlock();
                                                                            communityScreenShotAuthorLabel.Text = authorName;
                                                                            communityScreenShotAuthorLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShot.Children.Add(communityScreenShotAuthorLabel);
                                                                            Separator communityScreenShotSeparator = new Separator();
                                                                            communityScreenShot.Children.Add(communityScreenShotSeparator);
                                                                            TextBlock communityScreenShotGameNameLabel = new TextBlock();
                                                                            communityScreenShotGameNameLabel.Text = screenShotGameName;
                                                                            communityScreenShotGameNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            communityScreenShot.Children.Add(communityScreenShotGameNameLabel);

                                                                            communityScreenShots.Children.Add(communityScreenShot);
                                                                            communityScreenShot.DataContext = id;
                                                                            communityScreenShot.MouseLeftButtonUp += SelectCommunityScreenShotHandler;

                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                                bool isNotCommunityItems = communityItemsCursor <= 0;
                                if (isNotCommunityItems)
                                {
                                    TextBlock notFoundLabel = new TextBlock();
                                    notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                    notFoundLabel.TextAlignment = TextAlignment.Center;
                                    notFoundLabel.FontSize = 18;
                                    notFoundLabel.Text = "Скриншотов не найдено";
                                    communityScreenShots.HorizontalAlignment = HorizontalAlignment.Center;
                                    communityScreenShots.Children.Add(notFoundLabel);
                                }

                            }
                            /*else
                            {
                                TextBlock notFoundLabel = new TextBlock();
                                notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                notFoundLabel.TextAlignment = TextAlignment.Center;
                                notFoundLabel.FontSize = 18;
                                notFoundLabel.Text = "Скриншотов не найдено";
                                communityScreenShots.HorizontalAlignment = HorizontalAlignment.Center;
                                communityScreenShots.Children.Add(notFoundLabel);
                            }*/
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectCommunityScreenShotHandler (object sender, RoutedEventArgs e)
        {
            StackPanel screenShot = ((StackPanel)(sender));
            object screenShotData = screenShot.DataContext;
            string screenShotId = ((string)(screenShotData));
            SelectCommunityScreenShot(screenShotId);
        }

        public void SelectCommunityScreenShot (string id)
        {
            mainCommunityScreenShotComments.Children.Clear();
            mainControl.SelectedIndex = 25;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ScreenShotResponseInfo myobj = (ScreenShotResponseInfo)js.Deserialize(objText, typeof(ScreenShotResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            ScreenShot communityScreenShot = myobj.screenShot;
                            string userId = communityScreenShot.user;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + userId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        
                                        User user = myInnerObj.user;
                                        string gameId = communityScreenShot.game;

                                        HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                        nestedWebRequest.Method = "GET";
                                        nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                        {
                                            using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = nestedReader.ReadToEnd();
                                                GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                string responseStatus = myNestedObj.status;
                                                bool isOKStatus = responseStatus == "OK";
                                                if (isOKStatus)
                                                {
                                                    List<GameResponseInfo> totalGames = myNestedObj.games;
                                                    List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                    {
                                                        string someGameId = someGame._id;
                                                        bool isIdMatches = someGameId == gameId;
                                                        return isIdMatches;
                                                    }).ToList<GameResponseInfo>();
                                                    int countResults = results.Count;
                                                    bool isHaveResults = countResults >= 1;
                                                    if (isHaveResults)
                                                    {
                                                        GameResponseInfo screenShotGame = results[0];
                                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/comments/all");
                                                        innerNestedWebRequest.Method = "GET";
                                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                        {
                                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                            {
                                                                js = new JavaScriptSerializer();
                                                                objText = innerNestedReader.ReadToEnd();
                                                                CommunityScreenShotCommentsResponseInfo myInnerNestedObj = (CommunityScreenShotCommentsResponseInfo)js.Deserialize(objText, typeof(CommunityScreenShotCommentsResponseInfo));
                                                                status = myInnerNestedObj.status;
                                                                isOkStatus = status == "OK";
                                                                if (isOkStatus)
                                                                {
                                                                    string screenShotGameName = screenShotGame.name;

                                                                    string desc = communityScreenShot.desc;
                                                                    
                                                                    List<CommunityScreenShotComment> screenShotComments = myInnerNestedObj.comments;
                                                                    List<CommunityScreenShotComment> currentCommunityScreenShotComments = screenShotComments.Where<CommunityScreenShotComment>((CommunityScreenShotComment comment) =>
                                                                    {
                                                                        string commentCommunityScreenShotId = comment.screenShot;
                                                                        bool isCurrentScreenShot = commentCommunityScreenShotId == id;
                                                                        return isCurrentScreenShot;
                                                                    }).ToList<CommunityScreenShotComment>();
                                                                    int likes = communityScreenShot.likes;
                                                                    int countComments = currentCommunityScreenShotComments.Count;
                                                                    string rawCountComments = countComments.ToString();
                                                                    string rawCountLikes = likes.ToString();

                                                                    mainCommunityScreenShotPhoto.BeginInit();
                                                                    mainCommunityScreenShotPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/screenshot/photo/?id=" + id));
                                                                    mainCommunityScreenShotPhoto.EndInit();

                                                                    string mainCommunityScreenShotCommentsLabelContent = "Просмотреть описание и комментарии (" + rawCountComments + ")";
                                                                    mainCommunityScreenShotCommentsLabel.Text = mainCommunityScreenShotCommentsLabelContent;

                                                                    string mainCommunityScreenShotTagsLabelContent = "Метки: " + rawCountComments;
                                                                    mainCommunityScreenShotTagsLabel.Text = mainCommunityScreenShotTagsLabelContent;

                                                                    string rawLikes = likes.ToString();
                                                                    mainCommunityScreenShotCountLikesLabel.Text = rawLikes;

                                                                    mainCommunityScreenShot.DataContext = id;

                                                                    string userName = user.name;
                                                                    string userStatus = user.status;

                                                                    mainCommunityScreenShotUserNameLabel.Text = userName;
                                                                    mainCommunityScreenShotUserStatusLabel.Text = userStatus;

                                                                    mainCommunityScreenShotTitleLabel.Text = desc;

                                                                    foreach (CommunityScreenShotComment comment in currentCommunityScreenShotComments)
                                                                    {
                                                                        string commentUserId = comment.user;
                                                                        HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + commentUserId);
                                                                        userWebRequest.Method = "GET";
                                                                        userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                        {
                                                                            using (StreamReader userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = userReader.ReadToEnd();
                                                                                UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                status = myUserObj.status;
                                                                                isOkStatus = status == "OK";
                                                                                if (isOkStatus)
                                                                                {
                                                                                    User commentUser = myUserObj.user;
                                                                                    string commentUserName = commentUser.name;
                                                                                    DateTime commentDate = comment.date;
                                                                                    string commentContent = comment.content;
                                                                                    string rawCommentDate = commentDate.ToLongDateString();
                                                                                    StackPanel mainReviewComment = new StackPanel();
                                                                                    mainReviewComment.Orientation = Orientation.Horizontal;
                                                                                    mainReviewComment.Margin = new Thickness(15);
                                                                                    Image mainReviewCommentUserAvatar = new Image();
                                                                                    mainReviewCommentUserAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                                    mainReviewCommentUserAvatar.Width = 40;
                                                                                    mainReviewCommentUserAvatar.Height = 40;
                                                                                    mainReviewCommentUserAvatar.BeginInit();
                                                                                    mainReviewCommentUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + commentUserId));
                                                                                    mainReviewCommentUserAvatar.EndInit();
                                                                                    mainReviewComment.Children.Add(mainReviewCommentUserAvatar);
                                                                                    StackPanel mainReviewCommentAside = new StackPanel();
                                                                                    mainReviewCommentAside.Margin = new Thickness(15, 0, 15, 0);
                                                                                    StackPanel mainReviewCommentAsideHeader = new StackPanel();
                                                                                    mainReviewCommentAsideHeader.Orientation = Orientation.Horizontal;
                                                                                    TextBlock mainReviewCommentAsideHeaderUserNameLabel = new TextBlock();
                                                                                    mainReviewCommentAsideHeaderUserNameLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                    mainReviewCommentAsideHeaderUserNameLabel.Text = commentUserName;
                                                                                    mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderUserNameLabel);
                                                                                    TextBlock mainReviewCommentAsideHeaderDateLabel = new TextBlock();
                                                                                    mainReviewCommentAsideHeaderDateLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                    mainReviewCommentAsideHeaderDateLabel.Text = rawCommentDate;
                                                                                    mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderDateLabel);
                                                                                    mainReviewCommentAside.Children.Add(mainReviewCommentAsideHeader);
                                                                                    TextBlock mainReviewCommentContentLabel = new TextBlock();
                                                                                    mainReviewCommentContentLabel.Margin = new Thickness(5, 10, 5, 0);
                                                                                    mainReviewCommentContentLabel.Text = commentContent;
                                                                                    mainReviewCommentAside.Children.Add(mainReviewCommentContentLabel);
                                                                                    mainReviewComment.Children.Add(mainReviewCommentAside);
                                                                                    mainCommunityScreenShotComments.Children.Add(mainReviewComment);
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    mainCommunityScreenShotGameThumbnail.BeginInit();
                                                                    mainCommunityScreenShotGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + screenShotGameName));
                                                                    mainCommunityScreenShotGameThumbnail.EndInit();

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
            GetScreenShotCommunityContentSettings(id);
        }


        public void GetCommunityTotalContent ()
        {

            object communityActivityControlGameData = communityActivityControl.DataContext;
            bool isCommunityActivityControlGameDataExists = communityActivityControlGameData != null;
            string communityActivityControlGameId = "";
            if (isCommunityActivityControlGameDataExists)
            {
                communityActivityControlGameId = communityActivityControlGameData.ToString();
            }
            int communityActivityControlSelectedIndex = communityActivityControl.SelectedIndex;
            bool isTotalCommunity = communityActivityControlSelectedIndex == 0;
            bool isGameCommunity = !isTotalCommunity;

            object communityContentSortPanelData = communityContentSortPanel.DataContext;
            string sortType = communityContentSortPanelData.ToString();
            bool isPopularSortType = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";

            // List<UIElement> communityElements = new List<UIElement>();
            List<CommunityContent> communityElements = new List<CommunityContent>();

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IllustrationsResponseInfo myobj = (IllustrationsResponseInfo)js.Deserialize(objText, typeof(IllustrationsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Illustration> totalIllustrations = myobj.illustrations;
                            illustrations.Children.Clear();
                            int totalIllustrationsCount = totalIllustrations.Count;
                            illustrations.HorizontalAlignment = HorizontalAlignment.Left;
                            foreach (Illustration totalIllustrationsItem in totalIllustrations)
                            {
                                string id = totalIllustrationsItem._id;
                                string userId = totalIllustrationsItem.user;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                    string responseStatus = myNestedObj.status;
                                                    bool isOKStatus = responseStatus == "OK";
                                                    if (isOKStatus)
                                                    {
                                                        string gameId = totalIllustrationsItem.game;
                                                        List<GameResponseInfo> totalGames = myNestedObj.games;
                                                        List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                        {
                                                            string someGameId = someGame._id;
                                                            bool isIdMatches = someGameId == gameId;
                                                            return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity); ;
                                                        }).ToList<GameResponseInfo>();
                                                        int countResults = results.Count;
                                                        bool isHaveResults = countResults >= 1;
                                                        if (isHaveResults)
                                                        {
                                                            GameResponseInfo illustrationGame = results[0];
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/comments/all");
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    IllustrationCommentsResponseInfo myInnerNestedObj = (IllustrationCommentsResponseInfo)js.Deserialize(objText, typeof(IllustrationCommentsResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        HttpWebRequest friendWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                                                        friendWebRequest.Method = "GET";
                                                                        friendWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse friendWebResponse = (HttpWebResponse)friendWebRequest.GetResponse())
                                                                        {
                                                                            using (var friendReader = new StreamReader(friendWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = friendReader.ReadToEnd();
                                                                                FriendsResponseInfo myFriendObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                                                                status = myFriendObj.status;
                                                                                isOkStatus = status == "OK";
                                                                                if (isOkStatus)
                                                                                {
                                                                                    List<Friend> friendRecords = myFriendObj.friends.Where<Friend>((Friend joint) =>
                                                                                    {
                                                                                        string localUserId = joint.user;
                                                                                        bool isMyFriend = localUserId == userId;
                                                                                        return isMyFriend;
                                                                                    }).ToList<Friend>();
                                                                                    List<string> friendsIds = new List<string>();
                                                                                    foreach (Friend friendRecord in friendRecords)
                                                                                    {
                                                                                        string localFriendId = friendRecord.friend;
                                                                                        friendsIds.Add(localFriendId);
                                                                                    }
                                                                                    string visibility = totalIllustrationsItem.visibility;
                                                                                    bool isForFriends = visibility == "Для друзей";
                                                                                    bool isForMe = visibility == "Для себя";
                                                                                    bool isDontShow = visibility == "не показывать";
                                                                                    bool isShow = !isDontShow;
                                                                                    bool isAuthor = currentUserId == userId;
                                                                                    bool isFriend = friendsIds.Contains(currentUserId);
                                                                                    bool isAddIllustration = isShow && ((isAuthor && isForMe) || (isFriend && isForFriends) || isAuthor);
                                                                                    if (isAddIllustration)
                                                                                    {
                                                                                        string illustrationGameName = illustrationGame.name;
                                                                                        int likes = totalIllustrationsItem.likes;
                                                                                        List<IllustrationComment> illustrationComments = myInnerNestedObj.comments;
                                                                                        List<IllustrationComment> currentIllustrationComments = illustrationComments.Where<IllustrationComment>((IllustrationComment comment) =>
                                                                                        {
                                                                                            string commentIllustrationId = comment.illustration;
                                                                                            bool isCurrentIllustration = commentIllustrationId == id;
                                                                                            return isCurrentIllustration;
                                                                                        }).ToList<IllustrationComment>();
                                                                                        int countComments = currentIllustrationComments.Count;
                                                                                        string rawCountComments = countComments.ToString(); ;
                                                                                        string rawCountLikes = likes.ToString();
                                                                                        User author = myInnerObj.user;
                                                                                        string authorName = author.name;
                                                                                        string title = totalIllustrationsItem.title;
                                                                                        string desc = totalIllustrationsItem.desc;
                                                                                        StackPanel illustration = new StackPanel();
                                                                                        illustration.Width = 500;
                                                                                        illustration.Margin = new Thickness(15);
                                                                                        illustration.Background = System.Windows.Media.Brushes.LightGray;
                                                                                        TextBlock illustrationTitleLabel = new TextBlock();
                                                                                        illustrationTitleLabel.FontSize = 16;
                                                                                        illustrationTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationTitleLabel.Text = title;
                                                                                        illustration.Children.Add(illustrationTitleLabel);
                                                                                        Image illustrationPhoto = new Image();
                                                                                        illustrationPhoto.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                        illustrationPhoto.Width = 500;
                                                                                        illustrationPhoto.Height = 425;
                                                                                        illustrationPhoto.BeginInit();
                                                                                        illustrationPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/illustration/photo/?id=" + id));
                                                                                        illustrationPhoto.EndInit();
                                                                                        illustration.Children.Add(illustrationPhoto);
                                                                                        TextBlock illustrationDescLabel = new TextBlock();
                                                                                        illustrationDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationDescLabel.Text = desc;
                                                                                        illustration.Children.Add(illustrationDescLabel);
                                                                                        DockPanel illustrationFooter = new DockPanel();
                                                                                        PackIcon illustrationFooterItemIcon = new PackIcon();
                                                                                        illustrationFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                        illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooter.Children.Add(illustrationFooterItemIcon);
                                                                                        illustrationFooterItemIcon = new PackIcon();
                                                                                        illustrationFooterItemIcon.Kind = PackIconKind.ThumbDown;
                                                                                        illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooter.Children.Add(illustrationFooterItemIcon);
                                                                                        StackPanel illustrationFooterItem = new StackPanel();
                                                                                        illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                        illustrationFooterItemIcon = new PackIcon();
                                                                                        illustrationFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                        illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                        TextBlock illustrationFooterItemLabel = new TextBlock();
                                                                                        illustrationFooterItemLabel.Text = "Наградить";
                                                                                        illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                        illustrationFooter.Children.Add(illustrationFooterItem);
                                                                                        StackPanel illustrationFooterAside = new StackPanel();
                                                                                        illustrationFooterAside.Orientation = Orientation.Horizontal;
                                                                                        illustrationFooterAside.HorizontalAlignment = HorizontalAlignment.Right;
                                                                                        illustrationFooterItem = new StackPanel();
                                                                                        illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                        illustrationFooterItemIcon = new PackIcon();
                                                                                        illustrationFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                        illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                        illustrationFooterItemLabel = new TextBlock();
                                                                                        illustrationFooterItemLabel.Text = rawCountLikes;
                                                                                        illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                        illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                        illustrationFooterItem = new StackPanel();
                                                                                        illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                        illustrationFooterItemIcon = new PackIcon();
                                                                                        illustrationFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                        illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                        illustrationFooterItemLabel = new TextBlock();
                                                                                        illustrationFooterItemLabel.Text = "0";
                                                                                        illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                        illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                        illustrationFooterItem = new StackPanel();
                                                                                        illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                        illustrationFooterItemIcon = new PackIcon();
                                                                                        illustrationFooterItemIcon.Kind = PackIconKind.Chat;
                                                                                        illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                        illustrationFooterItemLabel = new TextBlock();
                                                                                        illustrationFooterItemLabel.Text = rawCountComments;
                                                                                        illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                        illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                        illustrationFooter.Children.Add(illustrationFooterAside);
                                                                                        illustration.Children.Add(illustrationFooter);
                                                                                        TextBlock illustrationAuthorLabel = new TextBlock();
                                                                                        illustrationAuthorLabel.Text = authorName;
                                                                                        illustrationAuthorLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustration.Children.Add(illustrationAuthorLabel);
                                                                                        Separator illustrationSeparator = new Separator();
                                                                                        illustration.Children.Add(illustrationSeparator);
                                                                                        TextBlock illustrationGameNameLabel = new TextBlock();
                                                                                        illustrationGameNameLabel.Text = illustrationGameName;
                                                                                        illustrationGameNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                        illustration.Children.Add(illustrationGameNameLabel);

                                                                                        // communityElements.Add(illustration);
                                                                                        totalIllustrationsItem.body = illustration;
                                                                                        communityElements.Add(totalIllustrationsItem);
                                                                                        
                                                                                        illustration.DataContext = id;
                                                                                        illustration.MouseLeftButtonUp += SelectIllustrationHandler;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ManualsResponseInfo myobj = (ManualsResponseInfo)js.Deserialize(objText, typeof(ManualsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Manual> totalManuals = myobj.manuals;
                            manuals.Children.Clear();
                            int totalManualsCount = totalManuals.Count;
                            bool isHaveManuals = totalManualsCount >= 1;
                            manuals.HorizontalAlignment = HorizontalAlignment.Left;
                            foreach (Manual totalManualsItem in totalManuals)
                            {
                                string gameId = totalManualsItem.game;
                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                nestedWebRequest.Method = "GET";
                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                {
                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = nestedReader.ReadToEnd();
                                        GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                        string responseStatus = myNestedObj.status;
                                        bool isOKStatus = responseStatus == "OK";
                                        if (isOKStatus)
                                        {
                                            List<GameResponseInfo> totalGames = myNestedObj.games;
                                            List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                            {
                                                string someGameId = someGame._id;
                                                bool isIdMatches = someGameId == gameId;
                                                return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity); ;
                                            }).ToList<GameResponseInfo>();
                                            int countResults = results.Count;
                                            bool isHaveResults = countResults >= 1;
                                            if (isHaveResults)
                                            {
                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/comments/all");
                                                innerNestedWebRequest.Method = "GET";
                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                {
                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = innerNestedReader.ReadToEnd();
                                                        ManualCommentsResponseInfo myInnerNestedObj = (ManualCommentsResponseInfo)js.Deserialize(objText, typeof(ManualCommentsResponseInfo));
                                                        status = myInnerNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            string id = totalManualsItem._id;
                                                            List<ManualComment> reviewComments = myInnerNestedObj.comments;
                                                            List<ManualComment> currentManualComments = reviewComments.Where<ManualComment>((ManualComment comment) =>
                                                            {
                                                                string commentManualId = comment.manual;
                                                                bool isCurrentManual = commentManualId == id;
                                                                return isCurrentManual;
                                                            }).ToList<ManualComment>();
                                                            int countComments = currentManualComments.Count;
                                                            string rawCountComments = countComments.ToString();
                                                            GameResponseInfo manualGame = results[0];
                                                            string manualGameName = manualGame.name;
                                                            string title = totalManualsItem.title;
                                                            string desc = totalManualsItem.desc;
                                                            int likes = totalManualsItem.likes;
                                                            int dislikes = totalManualsItem.dislikes;
                                                            StackPanel manual = new StackPanel();
                                                            manual.Width = 500;
                                                            manual.Margin = new Thickness(15);
                                                            manual.Background = System.Windows.Media.Brushes.LightGray;
                                                            TextBlock manualTitleLabel = new TextBlock();
                                                            manualTitleLabel.FontSize = 16;
                                                            manualTitleLabel.Margin = new Thickness(15);
                                                            manualTitleLabel.Text = title;
                                                            manual.Children.Add(manualTitleLabel);
                                                            StackPanel manualPhotoWrap = new StackPanel();
                                                            manualPhotoWrap.Orientation = Orientation.Horizontal;
                                                            manualPhotoWrap.Background = System.Windows.Media.Brushes.LightSlateGray;
                                                            manualPhotoWrap.Margin = new Thickness(15);
                                                            Image manualPhoto = new Image();
                                                            manualPhoto.Margin = new Thickness(15);
                                                            manualPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                            manualPhoto.Width = 50;
                                                            manualPhoto.Height = 50;
                                                            manualPhoto.BeginInit();
                                                            manualPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/manual/photo/?id=" + id));
                                                            manualPhoto.EndInit();
                                                            manualPhotoWrap.Children.Add(manualPhoto);
                                                            manual.Children.Add(manualPhotoWrap);
                                                            TextBlock manualDescLabel = new TextBlock();
                                                            manualDescLabel.Margin = new Thickness(15);
                                                            manualDescLabel.Text = desc;
                                                            manual.Children.Add(manualDescLabel);
                                                            Separator manualSeparator = new Separator();
                                                            manual.Children.Add(manualSeparator);
                                                            DockPanel manualFooter = new DockPanel();
                                                            PackIcon manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Star;
                                                            manualFooter.Children.Add(manualFooterItemIcon);
                                                            manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Star;
                                                            manualFooter.Children.Add(manualFooterItemIcon);
                                                            manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Star;
                                                            manualFooter.Children.Add(manualFooterItemIcon);
                                                            manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Star;
                                                            manualFooter.Children.Add(manualFooterItemIcon);
                                                            manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Star;
                                                            manualFooter.Children.Add(manualFooterItemIcon);
                                                            TextBlock manualFooterItemLabel = new TextBlock();
                                                            manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                            int feedBack = likes + dislikes;
                                                            string rawFeedBack = feedBack.ToString();
                                                            manualFooterItemLabel.Text = "Оценок: " + rawFeedBack;
                                                            manualFooter.Children.Add(manualFooterItemLabel);
                                                            StackPanel manualFooterItem = new StackPanel();
                                                            manualFooterItem.Orientation = Orientation.Horizontal;
                                                            manualFooterItem.HorizontalAlignment = HorizontalAlignment.Right;
                                                            manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Medal;
                                                            manualFooterItem.Children.Add(manualFooterItemIcon);
                                                            manualFooterItemLabel = new TextBlock();
                                                            manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemLabel.Text = "0";
                                                            manualFooterItem.Children.Add(manualFooterItemLabel);
                                                            manualFooterItemIcon = new PackIcon();
                                                            manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemIcon.Kind = PackIconKind.Chat;
                                                            manualFooterItem.Children.Add(manualFooterItemIcon);
                                                            manualFooterItemLabel = new TextBlock();
                                                            manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                            manualFooterItemLabel.Text = rawCountComments;
                                                            manualFooterItem.Children.Add(manualFooterItemLabel);
                                                            manualFooter.Children.Add(manualFooterItem);
                                                            manual.Children.Add(manualFooter);
                                                            TextBlock manualGameNameLabel = new TextBlock();
                                                            manualGameNameLabel.Margin = new Thickness(15);
                                                            manualGameNameLabel.Text = manualGameName;
                                                            manual.Children.Add(manualGameNameLabel);
                                                            totalManualsItem.body = manual;
                                                            communityElements.Add(totalManualsItem);
                                                            manual.DataContext = id;
                                                            manual.MouseLeftButtonUp += SelectManualHandler;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ScreenShotsResponseInfo myobj = (ScreenShotsResponseInfo)js.Deserialize(objText, typeof(ScreenShotsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<ScreenShot> totalCommunityScreenShots = myobj.screenShots;
                            communityScreenShots.Children.Clear();
                            int totalCommunityScreenShotsCount = totalCommunityScreenShots.Count;
                            communityScreenShots.HorizontalAlignment = HorizontalAlignment.Left;
                            foreach (ScreenShot totalCommunityScreenShotsItem in totalCommunityScreenShots)
                            {
                                string id = totalCommunityScreenShotsItem._id;
                                string userId = totalCommunityScreenShotsItem.user;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                    string responseStatus = myNestedObj.status;
                                                    bool isOKStatus = responseStatus == "OK";
                                                    if (isOKStatus)
                                                    {
                                                        string gameId = totalCommunityScreenShotsItem.game;
                                                        List<GameResponseInfo> totalGames = myNestedObj.games;
                                                        List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                        {
                                                            string someGameId = someGame._id;
                                                            bool isIdMatches = someGameId == gameId;
                                                            return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity); ;
                                                        }).ToList<GameResponseInfo>();
                                                        int countResults = results.Count;
                                                        bool isHaveResults = countResults >= 1;
                                                        if (isHaveResults)
                                                        {
                                                            GameResponseInfo screenShotGame = results[0];
                                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/comments/all");
                                                            innerNestedWebRequest.Method = "GET";
                                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                            {
                                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = innerNestedReader.ReadToEnd();
                                                                    CommunityScreenShotCommentsResponseInfo myInnerNestedObj = (CommunityScreenShotCommentsResponseInfo)js.Deserialize(objText, typeof(CommunityScreenShotCommentsResponseInfo));
                                                                    status = myInnerNestedObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        int likes = totalCommunityScreenShotsItem.likes;
                                                                        string screenShotGameName = screenShotGame.name;
                                                                        List<CommunityScreenShotComment> communityScreenShotsComments = myInnerNestedObj.comments;
                                                                        List<CommunityScreenShotComment> currentCommunityScreenShotComments = communityScreenShotsComments.Where<CommunityScreenShotComment>((CommunityScreenShotComment comment) =>
                                                                        {
                                                                            string commentCommunityScreenShotId = comment.screenShot;
                                                                            bool isCurrentScreenShot = commentCommunityScreenShotId == id;
                                                                            return isCurrentScreenShot;
                                                                        }).ToList<CommunityScreenShotComment>();
                                                                        int countComments = currentCommunityScreenShotComments.Count;
                                                                        string rawCountComments = countComments.ToString(); ;
                                                                        string rawCountLikes = likes.ToString();
                                                                        User author = myInnerObj.user;
                                                                        string authorName = author.name;
                                                                        StackPanel communityScreenShot = new StackPanel();
                                                                        communityScreenShot.Width = 500;
                                                                        communityScreenShot.Margin = new Thickness(15);
                                                                        communityScreenShot.Background = System.Windows.Media.Brushes.LightGray;
                                                                        Image communityScreenShotPhoto = new Image();
                                                                        communityScreenShotPhoto.Margin = new Thickness(15);
                                                                        communityScreenShotPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                        communityScreenShotPhoto.Width = 500;
                                                                        communityScreenShotPhoto.Height = 425;
                                                                        communityScreenShotPhoto.BeginInit();
                                                                        communityScreenShotPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/screenshot/photo/?id=" + id));
                                                                        communityScreenShotPhoto.EndInit();
                                                                        communityScreenShot.Children.Add(communityScreenShotPhoto);
                                                                        DockPanel communityScreenShotFooter = new DockPanel();
                                                                        PackIcon communityScreenShotFooterItemIcon = new PackIcon();
                                                                        communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                        communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooter.Children.Add(communityScreenShotFooterItemIcon);
                                                                        communityScreenShotFooterItemIcon = new PackIcon();
                                                                        communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbDown;
                                                                        communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooter.Children.Add(communityScreenShotFooterItemIcon);
                                                                        StackPanel communityScreenShotFooterItem = new StackPanel();
                                                                        communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                        communityScreenShotFooterItemIcon = new PackIcon();
                                                                        communityScreenShotFooterItemIcon.Kind = PackIconKind.Medal;
                                                                        communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                        TextBlock communityScreenShotFooterItemLabel = new TextBlock();
                                                                        communityScreenShotFooterItemLabel.Text = "Наградить";
                                                                        communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                        communityScreenShotFooter.Children.Add(communityScreenShotFooterItem);
                                                                        StackPanel communityScreenShotFooterAside = new StackPanel();
                                                                        communityScreenShotFooterAside.Orientation = Orientation.Horizontal;
                                                                        communityScreenShotFooterAside.HorizontalAlignment = HorizontalAlignment.Right;
                                                                        communityScreenShotFooterItem = new StackPanel();
                                                                        communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                        communityScreenShotFooterItemIcon = new PackIcon();
                                                                        communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                        communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                        communityScreenShotFooterItemLabel = new TextBlock();
                                                                        communityScreenShotFooterItemLabel.Text = rawCountLikes;
                                                                        communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                        communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                        communityScreenShotFooterItem = new StackPanel();
                                                                        communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                        communityScreenShotFooterItemIcon = new PackIcon();
                                                                        communityScreenShotFooterItemIcon.Kind = PackIconKind.Medal;
                                                                        communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                        communityScreenShotFooterItemLabel = new TextBlock();
                                                                        communityScreenShotFooterItemLabel.Text = "0";
                                                                        communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                        communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                        communityScreenShotFooterItem = new StackPanel();
                                                                        communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                        communityScreenShotFooterItemIcon = new PackIcon();
                                                                        communityScreenShotFooterItemIcon.Kind = PackIconKind.Chat;
                                                                        communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                        communityScreenShotFooterItemLabel = new TextBlock();
                                                                        communityScreenShotFooterItemLabel.Text = rawCountComments;
                                                                        communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                        communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                        communityScreenShotFooter.Children.Add(communityScreenShotFooterAside);
                                                                        communityScreenShot.Children.Add(communityScreenShotFooter);
                                                                        TextBlock communityScreenShotAuthorLabel = new TextBlock();
                                                                        communityScreenShotAuthorLabel.Text = authorName;
                                                                        communityScreenShotAuthorLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShot.Children.Add(communityScreenShotAuthorLabel);
                                                                        Separator communityScreenShotSeparator = new Separator();
                                                                        communityScreenShot.Children.Add(communityScreenShotSeparator);
                                                                        TextBlock communityScreenShotGameNameLabel = new TextBlock();
                                                                        communityScreenShotGameNameLabel.Text = screenShotGameName;
                                                                        communityScreenShotGameNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                        communityScreenShot.Children.Add(communityScreenShotGameNameLabel);
                                                                        totalCommunityScreenShotsItem.body = communityScreenShot;
                                                                        communityElements.Add(totalCommunityScreenShotsItem);
                                                                        communityScreenShot.DataContext = id;
                                                                        communityScreenShot.MouseLeftButtonUp += SelectCommunityScreenShotHandler;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ReviewsResponseInfo myobj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Review> totalReviews = myobj.reviews;
                            reviews.Children.Clear();
                            int totalReviewsCount = totalReviews.Count;
                            bool isHaveReviews = totalReviewsCount >= 1;
                            reviews.HorizontalAlignment = HorizontalAlignment.Left;
                            foreach (Review totalReviewsItem in totalReviews)
                            {
                                string id = totalReviewsItem._id;
                                string desc = totalReviewsItem.desc;
                                string gameId = totalReviewsItem.game;
                                DateTime date = totalReviewsItem.date;
                                string hours = totalReviewsItem.hours;
                                string author = totalReviewsItem.user;
                                string visibility = totalReviewsItem.visibility;
                                bool isForAll = visibility == "Для всех";
                                bool isOnlyFriends = visibility == "Только для друзей";

                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            List<Friend> friendRecords = myInnerObj.friends.Where<Friend>((Friend joint) =>
                                            {
                                                string userId = joint.user;
                                                bool isMyFriend = userId == currentUserId;
                                                return isMyFriend;
                                            }).ToList<Friend>();
                                            List<string> friendsIds = new List<string>();
                                            foreach (Friend friendRecord in friendRecords)
                                            {
                                                string localFriendId = friendRecord.friend;
                                                friendsIds.Add(localFriendId);
                                            }
                                            bool isAuthorFriend = friendsIds.Contains(author);
                                            bool isHaveAccess = isOnlyFriends && isAuthorFriend;
                                            bool isAuthor = currentUserId == author;
                                            bool isAddReview = isForAll || isHaveAccess || isAuthor;
                                            if (isAddReview)
                                            {

                                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                nestedWebRequest.Method = "GET";
                                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                {
                                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = nestedReader.ReadToEnd();
                                                        GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                        string responseStatus = myNestedObj.status;
                                                        bool isOKStatus = responseStatus == "OK";
                                                        if (isOKStatus)
                                                        {
                                                            List<GameResponseInfo> totalGames = myNestedObj.games;
                                                            List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                            {
                                                                string someGameId = someGame._id;
                                                                bool isIdMatches = someGameId == gameId;
                                                                return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity); ;
                                                            }).ToList<GameResponseInfo>();
                                                            int countResults = results.Count;
                                                            bool isHaveResults = countResults >= 1;
                                                            if (isHaveResults)
                                                            {

                                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/comments/all");
                                                                innerNestedWebRequest.Method = "GET";
                                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                                {
                                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                    {
                                                                        js = new JavaScriptSerializer();
                                                                        objText = innerNestedReader.ReadToEnd();
                                                                        ReviewCommentsResponseInfo myInnerNestedObj = (ReviewCommentsResponseInfo)js.Deserialize(objText, typeof(ReviewCommentsResponseInfo));
                                                                        status = myInnerNestedObj.status;
                                                                        isOkStatus = status == "OK";
                                                                        if (isOkStatus)
                                                                        {
                                                                            List<ReviewComment> reviewComments = myInnerNestedObj.comments;
                                                                            List<ReviewComment> currentReviewComments = reviewComments.Where<ReviewComment>((ReviewComment comment) =>
                                                                            {
                                                                                string commentReviewId = comment.review;
                                                                                bool isCurrentReview = commentReviewId == id;
                                                                                return isCurrentReview;
                                                                            }).ToList<ReviewComment>();
                                                                            int countComments = currentReviewComments.Count;
                                                                            string rawCountComments = countComments.ToString();

                                                                            GameResponseInfo reviewGame = results[0];
                                                                            string reviewGameName = reviewGame.name;
                                                                            string rawDate = date.ToLongDateString();
                                                                            StackPanel review = new StackPanel();
                                                                            review.Width = 500;
                                                                            review.Margin = new Thickness(15);
                                                                            review.Background = System.Windows.Media.Brushes.LightGray;
                                                                            TextBlock reviewAdvicesLabel = new TextBlock();
                                                                            reviewAdvicesLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            int countAdvices = 0;
                                                                            string rawCountAdvices = countAdvices.ToString();
                                                                            string reviewAdvicesLabelContent = "Пользователей, посчитавших обзор полезным: " + rawCountAdvices;
                                                                            reviewAdvicesLabel.Text = reviewAdvicesLabelContent;
                                                                            review.Children.Add(reviewAdvicesLabel);
                                                                            TextBlock reviewFunsLabel = new TextBlock();
                                                                            reviewFunsLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                            int countFuns = 0;
                                                                            string rawCountFuns = countFuns.ToString();
                                                                            string reviewFunsLabelContent = "Пользователей, посчитавших обзор забавным: " + rawCountFuns;
                                                                            reviewFunsLabel.Text = reviewFunsLabelContent;
                                                                            review.Children.Add(reviewFunsLabel);
                                                                            StackPanel reviewHeader = new StackPanel();
                                                                            reviewHeader.Orientation = Orientation.Horizontal;
                                                                            PackIcon reviewIcon = new PackIcon();
                                                                            reviewIcon.Margin = new Thickness(15);
                                                                            reviewIcon.HorizontalAlignment = HorizontalAlignment.Left;
                                                                            reviewIcon.Width = 50;
                                                                            reviewIcon.Height = 50;
                                                                            reviewIcon.Kind = PackIconKind.ThumbsUp;
                                                                            reviewHeader.Children.Add(reviewIcon);
                                                                            StackPanel reviewHeaderAside = new StackPanel();
                                                                            reviewHeaderAside.Margin = new Thickness(15);

                                                                            TextBlock reviewHeaderAsideRecommendationLabel = new TextBlock();
                                                                            reviewHeaderAsideRecommendationLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                            reviewHeaderAsideRecommendationLabel.FontSize = 16;
                                                                            reviewHeaderAsideRecommendationLabel.Text = "Рекомендую";
                                                                            reviewHeaderAside.Children.Add(reviewHeaderAsideRecommendationLabel);
                                                                            TextBlock reviewHeaderAsideHoursLabel = new TextBlock();
                                                                            string rawHours = hours.ToString();
                                                                            string reviewHeaderAsideHoursLabelContent = rawHours + " ч. всего";
                                                                            reviewHeaderAsideHoursLabel.Text = reviewHeaderAsideHoursLabelContent;
                                                                            reviewHeaderAside.Children.Add(reviewHeaderAsideHoursLabel);

                                                                            reviewHeader.Children.Add(reviewHeaderAside);
                                                                            review.Children.Add(reviewHeader);
                                                                            TextBlock reviewDateLabel = new TextBlock();
                                                                            reviewDateLabel.Margin = new Thickness(15);
                                                                            string reviewDateLabelContent = "Опубликовано: " + rawDate;
                                                                            reviewDateLabel.Foreground = System.Windows.Media.Brushes.Orange;
                                                                            reviewDateLabel.Text = reviewDateLabelContent;
                                                                            review.Children.Add(reviewDateLabel);
                                                                            TextBlock reviewDescLabel = new TextBlock();
                                                                            reviewDescLabel.Margin = new Thickness(15);
                                                                            reviewDescLabel.Text = desc;
                                                                            reviewDescLabel.FontSize = 14;
                                                                            review.Children.Add(reviewDescLabel);
                                                                            Separator reviewSeparator = new Separator();
                                                                            review.Children.Add(reviewSeparator);
                                                                            DockPanel reviewFooter = new DockPanel();
                                                                            reviewFooter.Margin = new Thickness(15);
                                                                            TextBlock reviewFooterGameNameLabel = new TextBlock();
                                                                            reviewFooterGameNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                                                            reviewFooterGameNameLabel.Text = reviewGameName;
                                                                            reviewFooter.Children.Add(reviewFooterGameNameLabel);
                                                                            StackPanel reviewFooterComments = new StackPanel();
                                                                            reviewFooterComments.Margin = new Thickness(15, 0, 15, 0);
                                                                            reviewFooterComments.Orientation = Orientation.Horizontal;
                                                                            reviewFooterComments.HorizontalAlignment = HorizontalAlignment.Right;
                                                                            PackIcon reviewFooterCommentsIcon = new PackIcon();
                                                                            reviewFooterCommentsIcon.Kind = PackIconKind.Chat;
                                                                            reviewFooterCommentsIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                            reviewFooterComments.Children.Add(reviewFooterCommentsIcon);
                                                                            TextBlock reviewFooterCountCommentsLabel = new TextBlock();
                                                                            reviewFooterCountCommentsLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                            reviewFooterCountCommentsLabel.Text = rawCountComments;
                                                                            reviewFooterComments.Children.Add(reviewFooterCountCommentsLabel);
                                                                            reviewFooter.Children.Add(reviewFooterComments);
                                                                            review.Children.Add(reviewFooter);

                                                                            // communityElements.Add(review);
                                                                            totalReviewsItem.body = review;
                                                                            communityElements.Add(totalReviewsItem);

                                                                            review.DataContext = id;
                                                                            review.MouseLeftButtonUp += SelectReviewHandler;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            /*
            if (isPopularSortType)
            {
                communityElements.Reverse();
            }
            */
            if (isPopularSortType)
            {
                // communityElements.Sort(new CommunityContentLikeComparer());
                communityElements = communityElements.OrderByDescending((CommunityContent x) =>
                {
                    int xLikes = 0;
                    if (x is Review)
                    {
                        Review xReview = x as Review;
                        xLikes = xReview.advices;
                    }
                    else if (x is Manual)
                    {
                        Manual xManual = x as Manual;
                        xLikes = xManual.likes;
                    }
                    else if (x is Illustration)
                    {
                        Illustration xIllustration = x as Illustration;
                        xLikes = xIllustration.likes;
                    }
                    else if (x is ScreenShot)
                    {
                        ScreenShot xScreenShot = x as ScreenShot;
                        xLikes = xScreenShot.likes;
                    }
                    return xLikes;
                }).ToList<CommunityContent>();
            }
            else
            {
                communityElements = communityElements.OrderByDescending((CommunityContent x) =>
                {
                    DateTime xDate = DateTime.Now;
                    if (x is Review)
                    {
                        Review xReview = x as Review;
                        xDate = xReview.date;
                    }
                    else if (x is Manual)
                    {
                        Manual xManual = x as Manual;
                        xDate = xManual.date;
                    }
                    else if (x is Illustration)
                    {
                        Illustration xIllustration = x as Illustration;
                        xDate = xIllustration.date;
                    }
                    else if (x is ScreenShot)
                    {
                        ScreenShot xScreenShot = x as ScreenShot;
                        xDate = xScreenShot.date;
                    }
                    DateTimeOffset xDateTime = new DateTimeOffset(xDate);
                    long xUnixTimeMilliseconds = xDateTime.ToUnixTimeMilliseconds();
                    return xUnixTimeMilliseconds;
                }).ToList<CommunityContent>();
            }

            communityTotalContent.Children.Clear();
            int communityElementsCount = communityElements.Count;
            bool isHaveElements = communityElementsCount >= 1;
            if (isHaveElements)
            {
                communityTotalContent.HorizontalAlignment = HorizontalAlignment.Left;
                foreach (CommunityContent communityElement in communityElements)
                {
                    UIElement communityElementBody = communityElement.body;
                    communityTotalContent.Children.Add(communityElementBody);
                }
            }
            else
            {
                TextBlock notFoundLabel = new TextBlock();
                notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                notFoundLabel.TextAlignment = TextAlignment.Center;
                notFoundLabel.FontSize = 18;
                notFoundLabel.Text = "Иллюстраций не найдено";
                communityTotalContent.HorizontalAlignment = HorizontalAlignment.Center;
                communityTotalContent.Children.Add(notFoundLabel);
            }
        }

        public void GetIllustrations ()
        {

            object communityActivityControlGameData = communityActivityControl.DataContext;
            bool isCommunityActivityControlGameDataExists = communityActivityControlGameData != null;
            string communityActivityControlGameId = "";
            if (isCommunityActivityControlGameDataExists)
            {
                communityActivityControlGameId = communityActivityControlGameData.ToString();
            }
            int communityActivityControlSelectedIndex = communityActivityControl.SelectedIndex;
            bool isTotalCommunity = communityActivityControlSelectedIndex == 0;
            bool isGameCommunity = !isTotalCommunity;

            object illustrationsSortPanelData = illustrationsSortPanel.DataContext;
            string sortType = illustrationsSortPanelData.ToString();
            bool isPopularSortType = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IllustrationsResponseInfo myobj = (IllustrationsResponseInfo)js.Deserialize(objText, typeof(IllustrationsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Illustration> totalIllustrations = myobj.illustrations;

                            if (isPopularSortType)
                            {
                                totalIllustrations.Sort(new IllustrationLikesComparer());
                            }
                            else
                            {
                                totalIllustrations.Sort(new IllustrationDateComparer());
                            }

                            illustrations.Children.Clear();
                            int totalIllustrationsCount = totalIllustrations.Count;
                            bool isHaveIllustrations = totalIllustrationsCount >= 1;
                            if (isHaveIllustrations)
                            {
                                illustrations.HorizontalAlignment = HorizontalAlignment.Left;
                                int illustrationsCursor = 0;
                                foreach (Illustration totalIllustrationsItem in totalIllustrations)
                                {
                                    string id = totalIllustrationsItem._id;
                                    string userId = totalIllustrationsItem.user;

                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                
                                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                nestedWebRequest.Method = "GET";
                                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                {
                                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = nestedReader.ReadToEnd();
                                                        GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                        string responseStatus = myNestedObj.status;
                                                        bool isOKStatus = responseStatus == "OK";
                                                        if (isOKStatus)
                                                        {

                                                            string gameId = totalIllustrationsItem.game;

                                                            List<GameResponseInfo> totalGames = myNestedObj.games;
                                                            List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                            {
                                                                string someGameId = someGame._id;
                                                                bool isIdMatches = someGameId == gameId;
                                                                return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity);
                                                            }).ToList<GameResponseInfo>();
                                                            int countResults = results.Count;
                                                            bool isHaveResults = countResults >= 1;
                                                            if (isHaveResults)
                                                            {

                                                                GameResponseInfo illustrationGame = results[0];

                                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/comments/all");
                                                                innerNestedWebRequest.Method = "GET";
                                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                                {
                                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                    {
                                                                        js = new JavaScriptSerializer();
                                                                        objText = innerNestedReader.ReadToEnd();
                                                                        IllustrationCommentsResponseInfo myInnerNestedObj = (IllustrationCommentsResponseInfo)js.Deserialize(objText, typeof(IllustrationCommentsResponseInfo));
                                                                        status = myInnerNestedObj.status;
                                                                        isOkStatus = status == "OK";
                                                                        if (isOkStatus)
                                                                        {

                                                                            HttpWebRequest friendWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                                                            friendWebRequest.Method = "GET";
                                                                            friendWebRequest.UserAgent = ".NET Framework Test Client";
                                                                            using (HttpWebResponse friendWebResponse = (HttpWebResponse)friendWebRequest.GetResponse())
                                                                            {
                                                                                using (var friendReader = new StreamReader(friendWebResponse.GetResponseStream()))
                                                                                {
                                                                                    js = new JavaScriptSerializer();
                                                                                    objText = friendReader.ReadToEnd();
                                                                                    FriendsResponseInfo myFriendObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                                                                    status = myFriendObj.status;
                                                                                    isOkStatus = status == "OK";
                                                                                    if (isOkStatus)
                                                                                    {
                                                                                        List<Friend> friendRecords = myFriendObj.friends.Where<Friend>((Friend joint) =>
                                                                                        {
                                                                                            string localUserId = joint.user;
                                                                                            bool isMyFriend = localUserId == userId;
                                                                                            return isMyFriend;
                                                                                        }).ToList<Friend>();
                                                                                        List<string> friendsIds = new List<string>();
                                                                                        foreach (Friend friendRecord in friendRecords)
                                                                                        {
                                                                                            string localFriendId = friendRecord.friend;
                                                                                            friendsIds.Add(localFriendId);
                                                                                        }

                                                                                        string visibility = totalIllustrationsItem.visibility;
                                                                                        bool isForFriends = visibility == "Для друзей";
                                                                                        bool isForMe = visibility == "Для себя";
                                                                                        bool isDontShow = visibility == "не показывать";
                                                                                        bool isShow = !isDontShow;
                                                                                        bool isAuthor = currentUserId == userId;
                                                                                        bool isFriend = friendsIds.Contains(currentUserId);
                                                                                        bool isAddIllustration = isShow && ((isAuthor && isForMe) || (isFriend && isForFriends) || isAuthor);
                                                                                        if (isAddIllustration)
                                                                                        {

                                                                                            illustrationsCursor++;

                                                                                            string illustrationGameName = illustrationGame.name;

                                                                                            int likes = totalIllustrationsItem.likes;

                                                                                            List<IllustrationComment> illustrationComments = myInnerNestedObj.comments;
                                                                                            List<IllustrationComment> currentIllustrationComments = illustrationComments.Where<IllustrationComment>((IllustrationComment comment) =>
                                                                                            {
                                                                                                string commentIllustrationId = comment.illustration;
                                                                                                bool isCurrentIllustration = commentIllustrationId == id;
                                                                                                return isCurrentIllustration;
                                                                                            }).ToList<IllustrationComment>();
                                                                                            int countComments = currentIllustrationComments.Count;
                                                                                            string rawCountComments = countComments.ToString(); ;

                                                                                            string rawCountLikes = likes.ToString();

                                                                                            User author = myInnerObj.user;
                                                                                            string authorName = author.name;
                                                                                            string title = totalIllustrationsItem.title;
                                                                                            string desc = totalIllustrationsItem.desc;
                                                                                            StackPanel illustration = new StackPanel();
                                                                                            illustration.Width = 500;
                                                                                            illustration.Margin = new Thickness(15);
                                                                                            illustration.Background = System.Windows.Media.Brushes.LightGray;
                                                                                            TextBlock illustrationTitleLabel = new TextBlock();
                                                                                            illustrationTitleLabel.FontSize = 16;
                                                                                            illustrationTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationTitleLabel.Text = title;
                                                                                            illustration.Children.Add(illustrationTitleLabel);
                                                                                            Image illustrationPhoto = new Image();
                                                                                            illustrationPhoto.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                            illustrationPhoto.Width = 500;
                                                                                            illustrationPhoto.Height = 425;
                                                                                            illustrationPhoto.BeginInit();
                                                                                            illustrationPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/illustration/photo/?id=" + id));
                                                                                            illustrationPhoto.EndInit();
                                                                                            illustration.Children.Add(illustrationPhoto);
                                                                                            TextBlock illustrationDescLabel = new TextBlock();
                                                                                            illustrationDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationDescLabel.Text = desc;
                                                                                            illustration.Children.Add(illustrationDescLabel);

                                                                                            DockPanel illustrationFooter = new DockPanel();
                                                                                            PackIcon illustrationFooterItemIcon = new PackIcon();
                                                                                            illustrationFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                            illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooter.Children.Add(illustrationFooterItemIcon);
                                                                                            illustrationFooterItemIcon = new PackIcon();
                                                                                            illustrationFooterItemIcon.Kind = PackIconKind.ThumbDown;
                                                                                            illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooter.Children.Add(illustrationFooterItemIcon);
                                                                                            StackPanel illustrationFooterItem = new StackPanel();
                                                                                            illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                            illustrationFooterItemIcon = new PackIcon();
                                                                                            illustrationFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                            illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                            TextBlock illustrationFooterItemLabel = new TextBlock();
                                                                                            illustrationFooterItemLabel.Text = "Наградить";
                                                                                            illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                            illustrationFooter.Children.Add(illustrationFooterItem);
                                                                                            StackPanel illustrationFooterAside = new StackPanel();
                                                                                            illustrationFooterAside.Orientation = Orientation.Horizontal;
                                                                                            illustrationFooterAside.HorizontalAlignment = HorizontalAlignment.Right;

                                                                                            illustrationFooterItem = new StackPanel();
                                                                                            illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                            illustrationFooterItemIcon = new PackIcon();
                                                                                            illustrationFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                            illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                            illustrationFooterItemLabel = new TextBlock();
                                                                                            illustrationFooterItemLabel.Text = rawCountLikes;
                                                                                            illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                            illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                            illustrationFooterItem = new StackPanel();
                                                                                            illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                            illustrationFooterItemIcon = new PackIcon();
                                                                                            illustrationFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                            illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                            illustrationFooterItemLabel = new TextBlock();
                                                                                            illustrationFooterItemLabel.Text = "0";
                                                                                            illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                            illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                            illustrationFooterItem = new StackPanel();
                                                                                            illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                            illustrationFooterItemIcon = new PackIcon();
                                                                                            illustrationFooterItemIcon.Kind = PackIconKind.Chat;
                                                                                            illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                            illustrationFooterItemLabel = new TextBlock();
                                                                                            illustrationFooterItemLabel.Text = rawCountComments;
                                                                                            illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                            illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                            illustrationFooter.Children.Add(illustrationFooterAside);
                                                                                            illustration.Children.Add(illustrationFooter);
                                                                                            TextBlock illustrationAuthorLabel = new TextBlock();
                                                                                            illustrationAuthorLabel.Text = authorName;
                                                                                            illustrationAuthorLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustration.Children.Add(illustrationAuthorLabel);
                                                                                            Separator illustrationSeparator = new Separator();
                                                                                            illustration.Children.Add(illustrationSeparator);
                                                                                            TextBlock illustrationGameNameLabel = new TextBlock();
                                                                                            illustrationGameNameLabel.Text = illustrationGameName;
                                                                                            illustrationGameNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                            illustration.Children.Add(illustrationGameNameLabel);

                                                                                            illustrations.Children.Add(illustration);
                                                                                            illustration.DataContext = id;
                                                                                            illustration.MouseLeftButtonUp += SelectIllustrationHandler;

                                                                                        }

                                                                                    }
                                                                                }
                                                                            }

                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                    
                                }
                                isHaveIllustrations = illustrationsCursor >= 1;
                                if (isHaveIllustrations)
                                {
                                    illustrations.HorizontalAlignment = HorizontalAlignment.Left;
                                }
                                else
                                {
                                    TextBlock notFoundLabel = new TextBlock();
                                    notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                    notFoundLabel.TextAlignment = TextAlignment.Center;
                                    notFoundLabel.FontSize = 18;
                                    notFoundLabel.Text = "Иллюстраций не найдено";
                                    illustrations.HorizontalAlignment = HorizontalAlignment.Center;
                                    illustrations.Children.Add(notFoundLabel);
                                }
                            }
                            
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetManuals ()
        {

            object communityActivityControlGameData = communityActivityControl.DataContext;
            bool isCommunityActivityControlGameDataExists = communityActivityControlGameData != null;
            string communityActivityControlGameId = "";
            if (isCommunityActivityControlGameDataExists)
            {
                communityActivityControlGameId = communityActivityControlGameData.ToString();
            }
            int communityActivityControlSelectedIndex = communityActivityControl.SelectedIndex;
            bool isTotalCommunity = communityActivityControlSelectedIndex == 0;
            bool isGameCommunity = !isTotalCommunity;

            object manualsSortPanelData = manualsSortPanel.DataContext;
            string sortType = manualsSortPanelData.ToString();
            bool isPopularSortType = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ManualsResponseInfo myobj = (ManualsResponseInfo)js.Deserialize(objText, typeof(ManualsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Manual> totalManuals = myobj.manuals;

                            if (isPopularSortType)
                            {
                                totalManuals.Sort(new ManualLikeComparer());
                            }
                            else
                            {
                                totalManuals.Sort(new ManualDateComparer());
                            }

                            manuals.Children.Clear();
                            int totalManualsCount = totalManuals.Count;
                            bool isHaveManuals = totalManualsCount >= 1;
                            if (isHaveManuals)
                            {
                                manuals.HorizontalAlignment = HorizontalAlignment.Left;
                                int communityItemsCursor = 0;
                                foreach (Manual totalManualsItem in totalManuals)
                                {
                                    string gameId = totalManualsItem.game;

                                    HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                    nestedWebRequest.Method = "GET";
                                    nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                    {
                                        using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = nestedReader.ReadToEnd();
                                            GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                            string responseStatus = myNestedObj.status;
                                            bool isOKStatus = responseStatus == "OK";
                                            if (isOKStatus)
                                            {
                                                List<GameResponseInfo> totalGames = myNestedObj.games;
                                                List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                {
                                                    string someGameId = someGame._id;
                                                    bool isIdMatches = someGameId == gameId;
                                                    return isIdMatches && ((isGameCommunity && someGameId == communityActivityControlGameId) || isTotalCommunity);
                                                }).ToList<GameResponseInfo>();
                                                int countResults = results.Count;
                                                bool isHaveResults = countResults >= 1;
                                                if (isHaveResults)
                                                {
                                                    communityItemsCursor++;
                                                    HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/comments/all");
                                                    innerNestedWebRequest.Method = "GET";
                                                    innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                    {
                                                        using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = innerNestedReader.ReadToEnd();
                                                            ManualCommentsResponseInfo myInnerNestedObj = (ManualCommentsResponseInfo)js.Deserialize(objText, typeof(ManualCommentsResponseInfo));
                                                            status = myInnerNestedObj.status;
                                                            isOkStatus = status == "OK";
                                                            if (isOkStatus)
                                                            {

                                                                string id = totalManualsItem._id;

                                                                List<ManualComment> reviewComments = myInnerNestedObj.comments;
                                                                List<ManualComment> currentManualComments = reviewComments.Where<ManualComment>((ManualComment comment) =>
                                                                {
                                                                    string commentManualId = comment.manual;
                                                                    bool isCurrentManual = commentManualId == id;
                                                                    return isCurrentManual;
                                                                }).ToList<ManualComment>();
                                                                int countComments = currentManualComments.Count;
                                                                string rawCountComments = countComments.ToString();
                                                    
                                                                GameResponseInfo manualGame = results[0];
                                                                string manualGameName = manualGame.name;
                                                                string title = totalManualsItem.title;
                                                                string desc = totalManualsItem.desc;
                                                                int likes = totalManualsItem.likes;
                                                                int dislikes = totalManualsItem.dislikes;
                                                                StackPanel manual = new StackPanel();
                                                                manual.Width = 500;
                                                                manual.Margin = new Thickness(15);
                                                                manual.Background = System.Windows.Media.Brushes.LightGray;
                                                                TextBlock manualTitleLabel = new TextBlock();
                                                                manualTitleLabel.FontSize = 16;
                                                                manualTitleLabel.Margin = new Thickness(15);
                                                                manualTitleLabel.Text = title;
                                                                manual.Children.Add(manualTitleLabel);
                                                                StackPanel manualPhotoWrap = new StackPanel();
                                                                manualPhotoWrap.Orientation = Orientation.Horizontal;
                                                                manualPhotoWrap.Background = System.Windows.Media.Brushes.LightSlateGray;
                                                                manualPhotoWrap.Margin = new Thickness(15);
                                                                Image manualPhoto = new Image();
                                                                manualPhoto.Margin = new Thickness(15);
                                                                manualPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                manualPhoto.Width = 50;
                                                                manualPhoto.Height = 50;
                                                                manualPhoto.BeginInit();
                                                                manualPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/manual/photo/?id=" + id));
                                                                manualPhoto.EndInit();
                                                                manualPhotoWrap.Children.Add(manualPhoto);
                                                                manual.Children.Add(manualPhotoWrap);
                                                                TextBlock manualDescLabel = new TextBlock();
                                                                manualDescLabel.Margin = new Thickness(15);
                                                                manualDescLabel.Text = desc;
                                                                manual.Children.Add(manualDescLabel);
                                                                Separator manualSeparator = new Separator();
                                                                manual.Children.Add(manualSeparator);
                                                                DockPanel manualFooter = new DockPanel();
                                                                PackIcon manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                manualFooter.Children.Add(manualFooterItemIcon);
                                                                manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                manualFooter.Children.Add(manualFooterItemIcon);
                                                                manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                manualFooter.Children.Add(manualFooterItemIcon);
                                                                manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                manualFooter.Children.Add(manualFooterItemIcon);
                                                                manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                manualFooter.Children.Add(manualFooterItemIcon);
                                                                TextBlock manualFooterItemLabel = new TextBlock();
                                                                manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                int feedBack = likes + dislikes;
                                                                string rawFeedBack = feedBack.ToString();
                                                                manualFooterItemLabel.Text = "Оценок: " + rawFeedBack;
                                                                manualFooter.Children.Add(manualFooterItemLabel);
                                                                StackPanel manualFooterItem = new StackPanel();
                                                                manualFooterItem.Orientation = Orientation.Horizontal;
                                                                manualFooterItem.HorizontalAlignment = HorizontalAlignment.Right;
                                                                manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Medal;
                                                                manualFooterItem.Children.Add(manualFooterItemIcon);
                                                                manualFooterItemLabel = new TextBlock();
                                                                manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemLabel.Text = "0";
                                                                manualFooterItem.Children.Add(manualFooterItemLabel);
                                                                manualFooterItemIcon = new PackIcon();
                                                                manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemIcon.Kind = PackIconKind.Chat;
                                                                manualFooterItem.Children.Add(manualFooterItemIcon);
                                                                manualFooterItemLabel = new TextBlock();
                                                                manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                manualFooterItemLabel.Text = rawCountComments;
                                                                manualFooterItem.Children.Add(manualFooterItemLabel);
                                                                manualFooter.Children.Add(manualFooterItem);

                                                                manual.Children.Add(manualFooter);
                                                                TextBlock manualGameNameLabel = new TextBlock();
                                                                manualGameNameLabel.Margin = new Thickness(15);
                                                                manualGameNameLabel.Text = manualGameName;
                                                                manual.Children.Add(manualGameNameLabel);
                                                                manuals.Children.Add(manual);
                                                                manual.DataContext = id;
                                                                manual.MouseLeftButtonUp += SelectManualHandler;

                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }

                                bool isNotCommunityItems = communityItemsCursor <= 0;
                                if (isNotCommunityItems)
                                {
                                    TextBlock notFoundLabel = new TextBlock();
                                    notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                    notFoundLabel.TextAlignment = TextAlignment.Center;
                                    notFoundLabel.FontSize = 18;
                                    notFoundLabel.Text = "Руководств не найдено";
                                    manuals.HorizontalAlignment = HorizontalAlignment.Center;
                                    manuals.Children.Add(notFoundLabel);
                                }

                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectManualHandler (object sender, RoutedEventArgs e)
        {
            StackPanel manual = ((StackPanel)(sender));
            object manualData = manual.DataContext;
            string manualId = ((string)(manualData));
            SelectManual(manualId);
        }

        public void SelectManual (string manualId)
        {
            mainManualComments.Children.Clear();
            mainControl.SelectedIndex = 22;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/get/?id=" + manualId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ManualResponseInfo myobj = (ManualResponseInfo)js.Deserialize(objText, typeof(ManualResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Manual manual = myobj.manual;
                            string userId = manual.user;

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + userId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        User user = myInnerObj.user;
                                        string userName = user.name;
                                        string userStatus = user.status;
                                        string title = manual.title;
                                        string desc = manual.desc;
                                        int likes = manual.likes;
                                        int dislikes = manual.dislikes;
                                        string categories = manual.categories;
                                        string lang = manual.lang;
                                        DateTime date = manual.date;
                                        int favorites = manual.favorites;
                                        mainManualPhoto.BeginInit();
                                        mainManualPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/manual/photo/?id=" + manualId));
                                        mainManualPhoto.EndInit();
                                        mainManualTitleLabel.Text = title;
                                        mainManualDescLabel.Text = desc;

                                        string mainManualFromUserLabelContent = "от " + userName;
                                        mainManualFromUserLabel.Text = mainManualFromUserLabelContent;
                                        int totalFeedback = likes + dislikes;
                                        string rawTotalFeedback = totalFeedback.ToString();
                                        string mainManualFeedbackLabelContent = "Оценок: " + rawTotalFeedback;
                                        mainManualFeedbackLabel.Text = mainManualFeedbackLabelContent;
                                        mainManualAuthorAvatar.BeginInit();
                                        mainManualAuthorAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + userId));
                                        mainManualAuthorAvatar.EndInit();
                                        mainManualAuthorNameLabel.Text = userName;
                                        mainManualAuthorStatusLabel.Text = userStatus;
                                        string[] parsedCategories = categories.Split(new Char[] { '|' });
                                        List<string> categoriesList = parsedCategories.ToList<string>();
                                        string mainManualCategoriesLabelContent = "Категории: ";
                                        foreach (string parsedCategoriesItem in categoriesList)
                                        {
                                            mainManualCategoriesLabelContent += parsedCategoriesItem;
                                            int index = categoriesList.IndexOf(parsedCategoriesItem);
                                            bool isNotLastItem = index < categoriesList.Count - 1;
                                            if (isNotLastItem)
                                            {
                                                mainManualCategoriesLabelContent += ", ";
                                            }
                                        }
                                        mainManualCategoriesLabel.Text = mainManualCategoriesLabelContent;
                                        string mainManualLanguagesLabelContent = "Языки: " + lang;
                                        mainManualLanguagesLabel.Text = mainManualLanguagesLabelContent;
                                        string rawDate = date.ToLongDateString();
                                        string mainManualDateLabelContent = "Добавлен " + rawDate;
                                        mainManualDateLabel.Text = mainManualDateLabelContent;

                                        string rawFavorites = favorites.ToString();
                                        string mainManualFavoritesLabelContent = rawFavorites + " добавили в избранное";
                                        mainManualFavoritesLabel.Text = mainManualFavoritesLabelContent;

                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/comments/all");
                                        innerNestedWebRequest.Method = "GET";
                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                        {
                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerNestedReader.ReadToEnd();
                                                ManualCommentsResponseInfo myInnerNestedObj = (ManualCommentsResponseInfo)js.Deserialize(objText, typeof(ManualCommentsResponseInfo));
                                                status = myInnerNestedObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {

                                                    HttpWebRequest getVisitsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/visits/all");
                                                    getVisitsWebRequest.Method = "GET";
                                                    getVisitsWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse getVisitsWebResponse = (HttpWebResponse)getVisitsWebRequest.GetResponse())
                                                    {
                                                        using (var getVisitsReader = new StreamReader(getVisitsWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = getVisitsReader.ReadToEnd();
                                                            ManualVisitsResponseInfo myGetVisitsObj = (ManualVisitsResponseInfo)js.Deserialize(objText, typeof(ManualVisitsResponseInfo));
                                                            status = myGetVisitsObj.status;
                                                            isOkStatus = status == "OK";
                                                            if (isOkStatus)
                                                            {

                                                                HttpWebRequest manualFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/favorites/all");
                                                                manualFavoriteRelationsWebRequest.Method = "GET";
                                                                manualFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                                                                using (HttpWebResponse manualFavoriteRelationsWebResponse = (HttpWebResponse)manualFavoriteRelationsWebRequest.GetResponse())
                                                                {
                                                                    using (var manualFavoriteRelationsReader = new StreamReader(manualFavoriteRelationsWebResponse.GetResponseStream()))
                                                                    {
                                                                        js = new JavaScriptSerializer();
                                                                        objText = manualFavoriteRelationsReader.ReadToEnd();
                                                                        ManualFavoriteRelationsResponseInfo myManualFavoriteRelationsObj = (ManualFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(ManualFavoriteRelationsResponseInfo));
                                                                        status = myManualFavoriteRelationsObj.status;
                                                                        isOkStatus = status == "OK";
                                                                        if (isOkStatus)
                                                                        {

                                                                            List<ManualVisit> visits = myGetVisitsObj.visits;
                                                                            List<ManualVisit> currentManualVisits = visits.Where<ManualVisit>((ManualVisit visit) =>
                                                                            {
                                                                                string visitManualId = visit.manual;
                                                                                bool isCurrentManual = visitManualId == manualId;
                                                                                return isCurrentManual;
                                                                            }).ToList<ManualVisit>();
                                                                            int countCurrentManualVisits = currentManualVisits.Count;
                                                                            List<string> currentManualVisitUsers = new List<string>();
                                                                            foreach (ManualVisit currentManualVisit in currentManualVisits)
                                                                            {
                                                                                string currentManualVisitUserId = currentManualVisit.user;
                                                                                currentManualVisitUsers.Add(currentManualVisitUserId);
                                                                            }
                                                                            bool isNotAddVisit = currentManualVisitUsers.Contains(currentUserId);
                                                                            bool isNotAuthor = currentUserId != userId;
                                                                            bool isAddVisit = !isNotAddVisit && isNotAuthor;
                                                                            if (isAddVisit)
                                                                            {
                                                                                countCurrentManualVisits++;
                                                                                HttpWebRequest addVisitWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/visits/add/?user=" + currentUserId + @"&id=" + manualId);
                                                                                addVisitWebRequest.Method = "GET";
                                                                                addVisitWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                using (HttpWebResponse addVisitWebResponse = (HttpWebResponse)addVisitWebRequest.GetResponse())
                                                                                {
                                                                                    using (var addVisitReader = new StreamReader(addVisitWebResponse.GetResponseStream()))
                                                                                    {
                                                                                        js = new JavaScriptSerializer();
                                                                                        objText = addVisitReader.ReadToEnd();
                                                                                        UserResponseInfo myAddVisitObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                        status = myAddVisitObj.status;
                                                                                        isOkStatus = status == "OK";
                                                                                    }
                                                                                }
                                                                            }

                                                                            string rawManualVisitsCount = countCurrentManualVisits.ToString();
                                                                            string mainManualVisitsLabelContent = rawManualVisitsCount + " уникальных посетителей";
                                                                            mainManualVisitsLabel.Text = mainManualVisitsLabelContent;

                                                                            List<ManualComment> reviewComments = myInnerNestedObj.comments;
                                                                            List<ManualComment> currentManualComments = reviewComments.Where<ManualComment>((ManualComment comment) =>
                                                                            {
                                                                                string commentManualId = comment.manual;
                                                                                bool isCurrentManual = commentManualId == manualId;
                                                                                return isCurrentManual;
                                                                            }).ToList<ManualComment>();
                                                                            int countComments = currentManualComments.Count;
                                                                            string rawCountComments = countComments.ToString();
                                                                            string mainManualCountCommentsLabelContent = "Комментариев: " + rawCountComments;
                                                                            mainManualCountCommentsLabel.Text = mainManualCountCommentsLabelContent;

                                                                            foreach (ManualComment comment in currentManualComments)
                                                                            {
                                                                                string commentUserId = comment.user;
                                                                                HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + commentUserId);
                                                                                userWebRequest.Method = "GET";
                                                                                userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                                {
                                                                                    using (StreamReader userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                                    {
                                                                                        js = new JavaScriptSerializer();
                                                                                        objText = userReader.ReadToEnd();
                                                                                        UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                        status = myUserObj.status;
                                                                                        isOkStatus = status == "OK";
                                                                                        if (isOkStatus)
                                                                                        {
                                                                                            User commentUser = myUserObj.user;
                                                                                            string commentUserName = commentUser.name;
                                                                                            DateTime commentDate = comment.date;
                                                                                            string commentContent = comment.content;
                                                                                            string rawCommentDate = commentDate.ToLongDateString();
                                                                                            StackPanel mainReviewComment = new StackPanel();
                                                                                            mainReviewComment.Orientation = Orientation.Horizontal;
                                                                                            mainReviewComment.Margin = new Thickness(15);
                                                                                            Image mainReviewCommentUserAvatar = new Image();
                                                                                            mainReviewCommentUserAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                                            mainReviewCommentUserAvatar.Width = 40;
                                                                                            mainReviewCommentUserAvatar.Height = 40;
                                                                                            mainReviewCommentUserAvatar.BeginInit();
                                                                                            mainReviewCommentUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + commentUserId));
                                                                                            mainReviewCommentUserAvatar.EndInit();
                                                                                            mainReviewComment.Children.Add(mainReviewCommentUserAvatar);
                                                                                            StackPanel mainReviewCommentAside = new StackPanel();
                                                                                            mainReviewCommentAside.Margin = new Thickness(15, 0, 15, 0);
                                                                                            StackPanel mainReviewCommentAsideHeader = new StackPanel();
                                                                                            mainReviewCommentAsideHeader.Orientation = Orientation.Horizontal;
                                                                                            TextBlock mainReviewCommentAsideHeaderUserNameLabel = new TextBlock();
                                                                                            mainReviewCommentAsideHeaderUserNameLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                            mainReviewCommentAsideHeaderUserNameLabel.Text = commentUserName;
                                                                                            mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderUserNameLabel);
                                                                                            TextBlock mainReviewCommentAsideHeaderDateLabel = new TextBlock();
                                                                                            mainReviewCommentAsideHeaderDateLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                            mainReviewCommentAsideHeaderDateLabel.Text = rawCommentDate;
                                                                                            mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderDateLabel);
                                                                                            mainReviewCommentAside.Children.Add(mainReviewCommentAsideHeader);
                                                                                            TextBlock mainReviewCommentContentLabel = new TextBlock();
                                                                                            mainReviewCommentContentLabel.Margin = new Thickness(5, 10, 5, 0);
                                                                                            mainReviewCommentContentLabel.Text = commentContent;
                                                                                            mainReviewCommentAside.Children.Add(mainReviewCommentContentLabel);
                                                                                            mainReviewComment.Children.Add(mainReviewCommentAside);
                                                                                            mainManualComments.Children.Add(mainReviewComment);

                                                                                        }
                                                                                    }
                                                                                }
                                                                            }

                                                                            List<ManualFavoriteRelation> favoriteRelations = myManualFavoriteRelationsObj.relations;
                                                                            List<ManualFavoriteRelation> myFavoriteRelations = favoriteRelations.Where<ManualFavoriteRelation>((ManualFavoriteRelation relation) =>
                                                                            {
                                                                                string relationManualId = relation.manual;
                                                                                string relationUserId = relation.user;
                                                                                bool isCurrentManual = relationManualId == manualId;
                                                                                bool isCurrentUser = relationUserId == currentUserId;
                                                                                bool isMyFavoriteRelation = isCurrentManual && isCurrentUser;
                                                                                return isMyFavoriteRelation;
                                                                            }).ToList<ManualFavoriteRelation>();
                                                                            int countMyFavoriteRelations = myFavoriteRelations.Count;
                                                                            bool isFavorite = countMyFavoriteRelations >= 1;
                                                                            if (isFavorite)
                                                                            {
                                                                                mainManualFavoriteBtnContentLabel.Text = "В избранном";
                                                                                mainManualFavoriteBtn.Click -= IncreaseManualFavoritesHandler;
                                                                                mainManualFavoriteBtn.Click += RemoveManualFavoritesHandler;
                                                                                mainManualFavoriteBtn.MouseEnter += ShowRemoveContentMainManualFavoriteBtnHandler;
                                                                                mainManualFavoriteBtn.MouseLeave += HideRemoveContentMainManualFavoriteBtnHandler;
                                                                            }
                                                                            else
                                                                            {
                                                                                mainManualFavoriteBtnContentLabel.Text = "В избранное";
                                                                                mainManualFavoriteBtn.Click -= RemoveManualFavoritesHandler;
                                                                                mainManualFavoriteBtn.Click += IncreaseManualFavoritesHandler;
                                                                            }

                                                                            mainManual.DataContext = manualId;

                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }


                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectIllustrationHandler(object sender, RoutedEventArgs e)
        {
            StackPanel illustration = ((StackPanel)(sender));
            object illustrationData = illustration.DataContext;
            string illustrationId = ((string)(illustrationData));
            SelectIllustration(illustrationId);
        }

        public void SelectIllustration (string illustrationId)
        {
            mainIllustrationComments.Children.Clear();
            mainControl.SelectedIndex = 24;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/get/?id=" + illustrationId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IllustrationResponseInfo myobj = (IllustrationResponseInfo)js.Deserialize(objText, typeof(IllustrationResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Illustration illustration = myobj.illustration;
                            string userId = illustration.user;

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + userId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        User user = myInnerObj.user;
                                        string gameId = illustration.game;

                                        HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                        nestedWebRequest.Method = "GET";
                                        nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                        {
                                            using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = nestedReader.ReadToEnd();
                                                GamesListResponseInfo myNestedObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                string responseStatus = myNestedObj.status;
                                                bool isOKStatus = responseStatus == "OK";
                                                if (isOKStatus)
                                                {
                                                    List<GameResponseInfo> totalGames = myNestedObj.games;
                                                    List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                    {
                                                        string someGameId = someGame._id;
                                                        bool isIdMatches = someGameId == gameId;
                                                        return isIdMatches;
                                                    }).ToList<GameResponseInfo>();
                                                    int countResults = results.Count;
                                                    bool isHaveResults = countResults >= 1;
                                                    if (isHaveResults)
                                                    {
                                                        GameResponseInfo illustrationGame = results[0];
                                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/comments/all");
                                                        innerNestedWebRequest.Method = "GET";
                                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                        {
                                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                            {
                                                                js = new JavaScriptSerializer();
                                                                objText = innerNestedReader.ReadToEnd();
                                                                IllustrationCommentsResponseInfo myInnerNestedObj = (IllustrationCommentsResponseInfo)js.Deserialize(objText, typeof(IllustrationCommentsResponseInfo));
                                                                status = myInnerNestedObj.status;
                                                                isOkStatus = status == "OK";
                                                                if (isOkStatus)
                                                                {

                                                                    string illustrationGameName = illustrationGame.name;

                                                                    string userName = user.name;
                                                                    string userStatus = user.status;

                                                                    string title = illustration.title;
                                                                    string desc = illustration.desc;
                                                                    int likes = illustration.likes;

                                                                    mainIllustrationPhoto.BeginInit();
                                                                    mainIllustrationPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/illustration/photo/?id=" + illustrationId));
                                                                    mainIllustrationPhoto.EndInit();
                                                                    mainIllustrationTitleLabel.Text = title;
                                                                    mainIllustrationDescLabel.Text = desc;
                                                                    mainIllustrationUserNameLabel.Text = userName;
                                                                    mainIllustrationUserStatusLabel.Text = userStatus;

                                                                    List<IllustrationComment> reviewComments = myInnerNestedObj.comments;
                                                                    List<IllustrationComment> currentIllustrationComments = reviewComments.Where<IllustrationComment>((IllustrationComment comment) =>
                                                                    {
                                                                        string commentIllustrationId = comment.illustration;
                                                                        bool isCurrentIllustration = commentIllustrationId == illustrationId;
                                                                        return isCurrentIllustration;
                                                                    }).ToList<IllustrationComment>();
                                                                    int countComments = currentIllustrationComments.Count;
                                                                    string rawCountComments = countComments.ToString();

                                                                    mainIllustrationGameThumbnail.BeginInit();
                                                                    mainIllustrationGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + illustrationGameName));
                                                                    mainIllustrationGameThumbnail.EndInit();

                                                                    foreach (IllustrationComment comment in currentIllustrationComments)
                                                                    {
                                                                        string commentUserId = comment.user;
                                                                        HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + commentUserId);
                                                                        userWebRequest.Method = "GET";
                                                                        userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                        {
                                                                            using (StreamReader userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = userReader.ReadToEnd();
                                                                                UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                status = myUserObj.status;
                                                                                isOkStatus = status == "OK";
                                                                                if (isOkStatus)
                                                                                {
                                                                                    User commentUser = myUserObj.user;
                                                                                    string commentUserName = commentUser.name;
                                                                                    DateTime commentDate = comment.date;
                                                                                    string commentContent = comment.content;
                                                                                    string rawCommentDate = commentDate.ToLongDateString();
                                                                                    StackPanel mainReviewComment = new StackPanel();
                                                                                    mainReviewComment.Orientation = Orientation.Horizontal;
                                                                                    mainReviewComment.Margin = new Thickness(15);
                                                                                    Image mainReviewCommentUserAvatar = new Image();
                                                                                    mainReviewCommentUserAvatar.Margin = new Thickness(15, 0, 15, 0);
                                                                                    mainReviewCommentUserAvatar.Width = 40;
                                                                                    mainReviewCommentUserAvatar.Height = 40;
                                                                                    mainReviewCommentUserAvatar.BeginInit();
                                                                                    mainReviewCommentUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + commentUserId));
                                                                                    mainReviewCommentUserAvatar.EndInit();
                                                                                    mainReviewComment.Children.Add(mainReviewCommentUserAvatar);
                                                                                    StackPanel mainReviewCommentAside = new StackPanel();
                                                                                    mainReviewCommentAside.Margin = new Thickness(15, 0, 15, 0);
                                                                                    StackPanel mainReviewCommentAsideHeader = new StackPanel();
                                                                                    mainReviewCommentAsideHeader.Orientation = Orientation.Horizontal;
                                                                                    TextBlock mainReviewCommentAsideHeaderUserNameLabel = new TextBlock();
                                                                                    mainReviewCommentAsideHeaderUserNameLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                    mainReviewCommentAsideHeaderUserNameLabel.Text = commentUserName;
                                                                                    mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderUserNameLabel);
                                                                                    TextBlock mainReviewCommentAsideHeaderDateLabel = new TextBlock();
                                                                                    mainReviewCommentAsideHeaderDateLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                    mainReviewCommentAsideHeaderDateLabel.Text = rawCommentDate;
                                                                                    mainReviewCommentAsideHeader.Children.Add(mainReviewCommentAsideHeaderDateLabel);
                                                                                    mainReviewCommentAside.Children.Add(mainReviewCommentAsideHeader);
                                                                                    TextBlock mainReviewCommentContentLabel = new TextBlock();
                                                                                    mainReviewCommentContentLabel.Margin = new Thickness(5, 10, 5, 0);
                                                                                    mainReviewCommentContentLabel.Text = commentContent;
                                                                                    mainReviewCommentAside.Children.Add(mainReviewCommentContentLabel);
                                                                                    mainReviewComment.Children.Add(mainReviewCommentAside);
                                                                                    mainIllustrationComments.Children.Add(mainReviewComment);

                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    string mainIllustrationCommentsLabelContent = "Просмотреть описание и комментарии (" + rawCountComments + ")";
                                                                    mainIllustrationCommentsLabel.Text = mainIllustrationCommentsLabelContent;

                                                                    string mainIllustrationTagsLabelContent = "Метки: " + rawCountComments;
                                                                    mainIllustrationTagsLabel.Text = mainIllustrationTagsLabelContent;

                                                                    string rawLikes = likes.ToString();
                                                                    mainIllustrationCountLikesLabel.Text = rawLikes;

                                                                    mainIllustration.DataContext = illustrationId;

                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
            GetIllustrationCommunityContentSettings(illustrationId);
        }



        public void GetGroupRequests()
        {
            foreach (Popup groupRequest in groupRequests.Children)
            {
                groupRequest.IsOpen = false;
            }
            groupRequests.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/requests/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GroupRequestsResponseInfo myobj = (GroupRequestsResponseInfo)js.Deserialize(objText, typeof(GroupRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GroupRequest> myRequests = new List<GroupRequest>();
                            List<GroupRequest> requests = myobj.requests;
                            foreach (GroupRequest request in requests)
                            {
                                string recepientId = request.user;
                                bool isRequestForMe = currentUserId == recepientId;
                                if (isRequestForMe)
                                {
                                    myRequests.Add(request);
                                }
                            }
                            foreach (GroupRequest myRequest in myRequests)
                            {
                                string groupId = myRequest.group;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        GroupResponseInfo myInnerObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            Group group = myInnerObj.group;
                                            string groupName = group.name;
                                            Popup groupRequest = new Popup();
                                            groupRequest.Placement = PlacementMode.Custom;
                                            groupRequest.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                            groupRequest.PlacementTarget = this;
                                            groupRequest.Width = 225;
                                            groupRequest.Height = 275;
                                            StackPanel groupRequestBody = new StackPanel();
                                            groupRequestBody.Background = friendRequestBackground;
                                            PackIcon closeRequestBtn = new PackIcon();
                                            closeRequestBtn.Margin = new Thickness(10);
                                            closeRequestBtn.Kind = PackIconKind.Close;
                                            closeRequestBtn.DataContext = groupRequest;
                                            closeRequestBtn.MouseLeftButtonUp += CloseGroupRequestHandler;
                                            groupRequestBody.Children.Add(closeRequestBtn);
                                            Image groupRequestBodySenderAvatar = new Image();
                                            groupRequestBodySenderAvatar.Width = 100;
                                            groupRequestBodySenderAvatar.Height = 100;
                                            groupRequestBodySenderAvatar.BeginInit();
                                            Uri groupRequestBodySenderAvatarUri = new Uri("http://localhost:4000/api/user/avatar/?id=" + currentUserId);
                                            BitmapImage groupRequestBodySenderAvatarImg = new BitmapImage(groupRequestBodySenderAvatarUri);
                                            groupRequestBodySenderAvatar.Source = groupRequestBodySenderAvatarImg;
                                            groupRequestBodySenderAvatar.EndInit();
                                            groupRequestBodySenderAvatar.ImageFailed += SetDefautAvatarHandler;
                                            groupRequestBody.Children.Add(groupRequestBodySenderAvatar);
                                            TextBlock groupRequestBodySenderLoginLabel = new TextBlock();
                                            groupRequestBodySenderLoginLabel.Margin = new Thickness(10);
                                            groupRequestBodySenderLoginLabel.Text = groupName;
                                            groupRequestBody.Children.Add(groupRequestBodySenderLoginLabel);
                                            StackPanel groupRequestBodyActions = new StackPanel();
                                            groupRequestBodyActions.Orientation = Orientation.Horizontal;
                                            Button acceptActionBtn = new Button();
                                            acceptActionBtn.Margin = new Thickness(10, 5, 10, 5);
                                            acceptActionBtn.Height = 25;
                                            acceptActionBtn.Width = 65;
                                            acceptActionBtn.Content = "Принять";
                                            string myUserId = myRequest.user;
                                            string myRequestId = myRequest._id;
                                            Dictionary<String, Object> acceptActionBtnData = new Dictionary<String, Object>();
                                            acceptActionBtnData.Add("groupId", ((string)(groupId)));
                                            acceptActionBtnData.Add("userId", ((string)(myUserId)));
                                            acceptActionBtnData.Add("requestId", ((string)(myRequestId)));
                                            acceptActionBtnData.Add("request", ((Popup)(groupRequest)));
                                            acceptActionBtn.DataContext = acceptActionBtnData;
                                            acceptActionBtn.Click += AcceptGroupRequestHandler;
                                            groupRequestBodyActions.Children.Add(acceptActionBtn);
                                            Button rejectActionBtn = new Button();
                                            rejectActionBtn.Margin = new Thickness(10, 5, 10, 5);
                                            rejectActionBtn.Height = 25;
                                            rejectActionBtn.Width = 65;
                                            rejectActionBtn.Content = "Отклонить";
                                            Dictionary<String, Object> rejectActionBtnData = new Dictionary<String, Object>();
                                            rejectActionBtnData.Add("groupId", ((string)(groupId)));
                                            rejectActionBtnData.Add("userId", ((string)(myUserId)));
                                            rejectActionBtnData.Add("requestId", ((string)(myRequestId)));
                                            rejectActionBtnData.Add("request", ((Popup)(groupRequest)));
                                            rejectActionBtn.DataContext = rejectActionBtnData;
                                            rejectActionBtn.Click += RejectGroupRequestHandler;
                                            groupRequestBodyActions.Children.Add(rejectActionBtn);
                                            groupRequestBody.Children.Add(groupRequestBodyActions);
                                            groupRequest.Child = groupRequestBody;
                                            groupRequests.Children.Add(groupRequest);
                                            groupRequest.IsOpen = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            CloseManager();
                        }
                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void RejectGroupRequestHandler(object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object rawBtnData = btn.DataContext;
            Dictionary<String, Object> btnData = ((Dictionary<String, Object>)(rawBtnData));
            string groupId = ((string)(btnData["groupId"]));
            string userId = ((string)(btnData["userId"]));
            string requestId = ((string)(btnData["requestId"]));
            Popup request = ((Popup)(btnData["request"]));
            RejectGroupRequest(groupId, userId, requestId, request);
        }

        public void RejectGroupRequest(string groupId, string userId, string requestId, Popup request)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/requests/reject/?id=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();

                                    myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        CloseGroupRequest(request);
                                        User friend = myobj.user;
                                        string friendLogin = friend.login;
                                        string msgContent = "Вы отклонили приглашение в группу";
                                        MessageBox.Show(msgContent, "Внимание");
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось отклонить приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void RemoveFriendHandler(object sender, RoutedEventArgs e)
        {
            RemoveFriend();
        }

        public void RemoveFriend()
        {
            try
            {
                string friendId = cachedUserProfileId;
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/remove/?id=" + currentUserId + "&friend=" + friendId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            List<Game> currentGames = loadedContent.games;
                            List<FriendSettings> updatedFriends = loadedContent.friends;
                            Settings currentSettings = loadedContent.settings;
                            List<string> currentCollections = loadedContent.collections;
                            Notifications currentNotifications = loadedContent.notifications;
                            List<string> currentCategories = loadedContent.categories; 
                            List<string> currentRecentChats = loadedContent.recentChats;
                            Recommendations currentRecommendations = loadedContent.recommendations;
                            string currentLogoutDate = loadedContent.logoutDate;
                            List<string> currentSections = loadedContent.sections;
                            List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings friend) =>
                            {
                                return friend.id == friendId;
                            }).ToList();
                            int countCachedFriends = cachedFriends.Count;
                            bool isCachedFriendsExists = countCachedFriends >= 1;
                            if (isCachedFriendsExists)
                            {
                                FriendSettings cachedFriend = cachedFriends[0];
                                updatedFriends.Remove(cachedFriend);
                                string savedContent = js.Serialize(new SavedContent
                                {
                                    games = currentGames,
                                    friends = updatedFriends,
                                    settings = currentSettings,
                                    collections = currentCollections,
                                    notifications = currentNotifications,
                                    categories = currentCategories,
                                    recentChats = currentRecentChats,
                                    recommendations = currentRecommendations,
                                    logoutDate = currentLogoutDate,
                                    sections = currentSections
                                });
                                File.WriteAllText(saveDataFilePath, savedContent);
                                mainControl.DataContext = currentUserId;
                                mainControl.SelectedIndex = 0;
                                GetFriendsSettings();
                                GetOnlineFriends();
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удается удалить друга", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void CloseGroupRequestHandler(object sender, RoutedEventArgs e)
        {
            PackIcon btn = ((PackIcon)(sender));
            object btnData = btn.DataContext;
            Popup request = ((Popup)(btnData));
            CloseGroupRequest(request);
        }

        public void CloseGroupRequest(Popup request)
        {
            groupRequests.Children.Remove(request);
        }


        public void GetFriendRequestsForMeHandler(object sender, TextChangedEventArgs e)
        {
            GetFriendRequestsForMe();
        }

        public void GetFriendRequestsFromMeHandler(object sender, TextChangedEventArgs e)
        {
            GetFriendRequestsFromMe();
        }


        public void ShowOffersHandler(object sender, RoutedEventArgs e)
        {
            ShowOffers();
        }

        public void GetGameCollections ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<string> currentCollections = loadedContent.collections;
            gameCollections.Children.RemoveRange(1, gameCollections.Children.Count - 1);
            foreach (string currentCollection in currentCollections)
            {
                Border gameCollection = new Border();
                gameCollection.Margin = new Thickness(25);
                gameCollection.Padding = new Thickness(1.5);
                gameCollection.BorderBrush = System.Windows.Media.Brushes.Black;
                gameCollection.BorderThickness = new Thickness(2);
                gameCollection.CornerRadius = new CornerRadius(5);
                StackPanel gameCollectionBody = new StackPanel();
                gameCollectionBody.Width = 175;
                gameCollectionBody.Height = 175;
                gameCollection.Child = gameCollectionBody;
                TextBlock gameCollectionBodyNameLabel = new TextBlock();
                gameCollectionBodyNameLabel.TextAlignment = TextAlignment.Center;
                gameCollectionBodyNameLabel.Margin = new Thickness(0, 125, 0, 0);
                gameCollectionBodyNameLabel.Text = currentCollection;
                gameCollectionBody.Children.Add(gameCollectionBodyNameLabel);
                TextBlock gameCollectionBodyCountGamesLabel = new TextBlock();
                gameCollectionBodyCountGamesLabel.TextAlignment = TextAlignment.Center;
                gameCollectionBodyCountGamesLabel.Margin = new Thickness(0, 15, 0, 0);
                List<Game> gamesForCollection = currentGames.Where<Game>((Game game) =>
                {
                    List<string> gameCollections = game.collections;
                    bool isGameForCollection = gameCollections.Contains(currentCollection);
                    return isGameForCollection;
                }).ToList<Game>();
                int countGamesForCollection = gamesForCollection.Count;
                string rawCountGamesForCollection = countGamesForCollection.ToString();
                gameCollectionBodyCountGamesLabel.Text = rawCountGamesForCollection;
                gameCollectionBody.Children.Add(gameCollectionBodyCountGamesLabel);
                gameCollections.Children.Add(gameCollection);
                gameCollection.DataContext = currentCollection;
                gameCollection.MouseLeftButtonUp += SelectGameCollectionHandler;
                ContextMenu gameCollectionContextMenu = new ContextMenu();
                MenuItem gameCollectionContextMenuItem = new MenuItem();
                gameCollectionContextMenuItem.Header = "Переименовать коллекцию";
                gameCollectionContextMenuItem.DataContext = currentCollection;
                gameCollectionContextMenuItem.Click += RenameGameCollectionHandler;
                gameCollectionContextMenu.Items.Add(gameCollectionContextMenuItem);
                gameCollectionContextMenuItem = new MenuItem();
                gameCollectionContextMenuItem.Header = "Удалить коллекцию";
                gameCollectionContextMenuItem.DataContext = currentCollection;
                gameCollectionContextMenuItem.Click += RemoveGameCollectionHandler;
                gameCollectionContextMenu.Items.Add(gameCollectionContextMenuItem);
                gameCollection.ContextMenu = gameCollectionContextMenu;

                int imageWidth = 35;
                int imageHeight = 35;
                DrawingVisual drawingVisual = new DrawingVisual();
                using (DrawingContext drawingContext = drawingVisual.RenderOpen())
                {
                    SkewTransform transform = new SkewTransform();
                    /*transform.AngleX = 75;
                    transform.AngleY = 225;
                    transform.CenterX = 25;
                    transform.CenterY = 75;*/
                    transform.AngleX = 15;
                    transform.AngleY = 15;
                    drawingContext.PushTransform(transform);
                    foreach (Game gameForCollection in gamesForCollection)
                    {
                        int frameIndex = gamesForCollection.IndexOf(gameForCollection);
                        string currentGameId = gameForCollection.id;
                        string currentGameName = gameForCollection.name;
                        string currentGameCover = gameForCollection.cover;
                        // Loads the images to tile (no need to specify PngBitmapDecoder, the correct decoder is automatically selected)
                        bool isCoverSet = currentGameCover != "";
                        bool isCoverFound = File.Exists(currentGameCover);
                        bool isCoverExists = isCoverSet && isCoverFound;
                        Uri coverUri = null;
                        bool isCustomGame = currentGameId == "mockId";
                        bool isNotCustomGame = !isCustomGame;
                        if (isCoverExists)
                        {
                            coverUri = new Uri(currentGameCover);
                        }
                        else if (isNotCustomGame)
                        {
                            coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                        }
                        else
                        {
                            coverUri = new Uri(@"https://cdn3.iconfinder.com/data/icons/solid-locations-icon-set/64/Games_2-256.png");
                        }
                        BitmapFrame frame = BitmapDecoder.Create(coverUri, BitmapCreateOptions.None, BitmapCacheOption.OnLoad).Frames.First();
                        // Gets the size of the images (I assume each image has the same size)
                        // Draws the images into a DrawingVisual component
                        drawingContext.DrawImage(frame, new Rect(frameIndex * 35, 0, imageWidth, imageHeight));
                    }
                }
                VisualBrush visualBrush = new VisualBrush(drawingVisual);
                gameCollectionBody.Background = visualBrush;

            }
        }

        public void RenameGameCollectionHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            string name = ((string)(menuItemData));
            RenameGameCollection(name);
        }

        public void RenameGameCollection(string name)
        {
            SelectGameCollection(name);
            ToggleRenameBtn(renameIcon);
        }

        public void RemoveGameCollectionHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            string name = ((string)(menuItemData));
            RemoveGameCollection(name);
        }

        public void RemoveGameCollection(string name)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> updatedCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            string gameCollectionNameLabelContent = gameCollectionNameLabel.Text;
            object rawCurrentGameCollection = gameCollectionNameLabel.DataContext;
            string currentGameCollection = ((string)(rawCurrentGameCollection));
            updatedCollections = updatedCollections.Where<string>((string collection) =>
            {
                bool isRemoveCollection = name == collection;
                bool isSkipCollection = !isRemoveCollection;
                return isSkipCollection;
            }).ToList<string>();
            foreach (Game updatedGame in updatedGames)
            {
                List<string> updatedGameCollections = updatedGame.collections;
                int collectionIndex = -1;
                List<int> updatedGameCollectionsIndexes = new List<int>();
                foreach (string updatedGameCollection in updatedGameCollections)
                {
                    collectionIndex++;
                    bool isRemove = updatedGameCollection == name;
                    if (isRemove)
                    {
                        updatedGameCollectionsIndexes.Add(collectionIndex);
                    }
                }
                for (int i = 0; i < updatedGameCollectionsIndexes.Count; i++)
                {
                    updatedGameCollections.RemoveAt(updatedGameCollectionsIndexes[i]);
                }
            }
            string savedContent = js.Serialize(new SavedContent
            {
                games = updatedGames,
                friends = currentFriends,
                settings = currentSettings,
                collections = updatedCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            GetGamesList("");
            GetGameCollections();
        }

        public void SelectGameCollectionHandler(object sender, RoutedEventArgs e)
        {
            Border collection = ((Border)(sender));
            object collectionData = collection.DataContext;
            string collectionName = ((string)(collectionData));
            SelectGameCollection(collectionName);
        }

        public void SelectGameCollection (string name)
        {

            /*AdornerLayer layer = AdornerLayer.GetAdornerLayer(adornerWrap);
            StackPanel toAdorn = new StackPanel();
            toAdorn.Width = 100;
            toAdorn.Height = 100;
            toAdorn.Background = System.Windows.Media.Brushes.Red;
            layer.Add(new Helpers.SimpleCircleAdorner(toAdorn));*/
            gameCollectionNameLabel.DataContext = name;
            mainControl.SelectedIndex = 10;
            GetGameCollectionItems(name);
            gameCollectionNameLabel.Text = name;
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<Game> gamesForCollection = currentGames.Where<Game>((Game game) =>
            {
                List<string> gameCollections = game.collections;
                bool isGameForCollection = gameCollections.Contains(name);
                return isGameForCollection;
            }).ToList<Game>();
            int countGamesForCollection = gamesForCollection.Count;
            string rawCountGamesForCollection = countGamesForCollection.ToString();
            countGameCollectionGamesLabel.Text = "(" + rawCountGamesForCollection + ")";

        }

        public void GetGameCollectionItems(string name)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<string> currentCollections = loadedContent.collections;
            List<Game> collectionGames = currentGames.Where<Game>((Game game) =>
            {
                List<string> gameCollections = game.collections;
                bool isGameForCollection = gameCollections.Contains(name);
                bool isHiddenGame = game.isHidden;
                bool isDisplayedGame = !isHiddenGame;
                bool isShowGame = isGameForCollection && isDisplayedGame;
                return isShowGame;
            }).ToList();
            int collectionGamesCount = collectionGames.Count;
            bool isHaveGames = collectionGamesCount >= 1;
            gameCollectionItems.HorizontalAlignment = HorizontalAlignment.Left;
            gameCollectionItems.Children.Clear();
            if (isHaveGames)
            {
                foreach (Game currentGame in currentGames)
                {
                    List<string> currentGameCollections = currentGame.collections;
                    bool isGameForCurrentCollection = currentGameCollections.Contains(name);
                    bool isHiddenGame = currentGame.isHidden;
                    bool isDisplayedGame = !isHiddenGame;
                    bool isShowGame = isGameForCurrentCollection && isDisplayedGame;
                    if (isShowGame)
                    {
                        string currentGameId = currentGame.id;
                        string currentGameName = currentGame.name;
                        string currentGameCover = currentGame.cover;
                        bool isCoverSet = currentGameCover != "";
                        bool isCoverFound = File.Exists(currentGameCover);
                        bool isCoverExists = isCoverSet && isCoverFound;
                        Image gameCollectionItem = new Image();
                        gameCollectionItem.Width = 100;
                        gameCollectionItem.Height = 100;
                        gameCollectionItem.Margin = new Thickness(25);
                        gameCollectionItem.BeginInit();
                        Uri coverUri = null;
                        if (isCoverExists)
                        {
                            coverUri = new Uri(currentGameCover);
                        }
                        else
                        {
                            coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                        }
                        gameCollectionItem.Source = new BitmapImage(coverUri);
                        gameCollectionItem.ImageFailed += SetDefaultThumbnailHandler;
                        gameCollectionItem.EndInit();
                        gameCollectionItems.Children.Add(gameCollectionItem);
                        gameCollectionItem.DataContext = currentGameName;
                        gameCollectionItem.MouseLeftButtonUp += SelectGameCollectionItemHandler;
                        ContextMenu gameCollectionItemContextMenu = new ContextMenu();

                        MenuItem gameCollectionItemContextMenuItem = new MenuItem();
                        gameCollectionItemContextMenuItem.Header = "Играть";
                        gameCollectionItemContextMenuItem.DataContext = currentGameName;
                        gameCollectionItemContextMenuItem.Click += RunGameHandler;
                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                        gameCollectionItemContextMenuItem = new MenuItem();
                        gameCollectionItemContextMenuItem.Header = "Добавить в";
                        MenuItem gameCollectionItemNestedContextMenuItem;
                        Dictionary<String, Object> gameCollectionItemNestedContextMenuItemData;
                        foreach (string currentCollection in currentCollections)
                        {
                            gameCollectionItemNestedContextMenuItem = new MenuItem();
                            gameCollectionItemNestedContextMenuItem.Header = currentCollection;
                            gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                            gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                            gameCollectionItemNestedContextMenuItemData.Add("collection", currentCollection);
                            gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                            gameCollectionItemNestedContextMenuItem.Click += AddGameToCollectionHandler;
                            gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                            bool isDisabledCollection = currentGameCollections.Contains(currentCollection);
                            if (isDisabledCollection)
                            {
                                gameCollectionItemNestedContextMenuItem.IsEnabled = false;
                            }
                        }
                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        gameCollectionItemNestedContextMenuItem.Header = "Создать коллекцию";
                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                        gameCollectionItemNestedContextMenuItemData.Add("collection", name);
                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                        gameCollectionItemNestedContextMenuItem.Click += CreateCollectionFromMenuHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                        gameCollectionItemContextMenuItem = new MenuItem();
                        string gameCollectionItemContextMenuItemHeaderContent = "Убрать из " + name;
                        gameCollectionItemContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;
                        Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                        gameCollectionItemContextMenuItemData.Add("collection", name);
                        gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                        gameCollectionItemContextMenuItem.Click += RemoveGameFromCollectionHandler;
                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                        gameCollectionItemContextMenuItem = new MenuItem();
                        gameCollectionItemContextMenuItem.Header = "Управление";

                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        gameCollectionItemNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                        gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                        gameCollectionItemNestedContextMenuItem.Click += CreateShortcutHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        bool IsCoverSet = currentGameCover != "";
                        if (IsCoverSet)
                        {
                            gameCollectionItemNestedContextMenuItem.Header = "Удалить свою обложку";
                        }
                        else
                        {
                            gameCollectionItemNestedContextMenuItem.Header = "Задать свою обложку";
                        }
                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                        gameCollectionItemNestedContextMenuItemData.Add("collection", name);
                        gameCollectionItemNestedContextMenuItemData.Add("cover", currentGameCover);
                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                        gameCollectionItemNestedContextMenuItem.Click += ToggleGameCoverHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        gameCollectionItemNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                        gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                        gameCollectionItemNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        isHiddenGame = currentGame.isHidden;
                        if (isHiddenGame)
                        {
                            gameCollectionItemNestedContextMenuItem.Header = "Убрать из скрытого";
                        }
                        else
                        {
                            gameCollectionItemNestedContextMenuItem.Header = "Скрыть игру";
                        }
                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                        gameCollectionItemNestedContextMenuItemData.Add("collection", name);
                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                        gameCollectionItemNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        gameCollectionItemNestedContextMenuItem.Header = "Удалить с утройства";
                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                        gameCollectionItemNestedContextMenuItemData.Add("collection", name);
                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                        gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                        gameCollectionItemContextMenuItem = new MenuItem();
                        gameCollectionItemContextMenuItem.Header = "Свойства";
                        // gameCollectionItemContextMenuItem.DataContext = currentGameName;
                        gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                        bool isCustomGame = currentGameId == "mockId";
                        gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                        gameCollectionItemContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                        gameCollectionItemContextMenuItem.Click += OpenGameSettingsHandler;
                        gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                        gameCollectionItem.ContextMenu = gameCollectionItemContextMenu;
                    }
                }
            }
            else
            {
                gameCollectionItems.HorizontalAlignment = HorizontalAlignment.Center;
                TextBlock gameCollectionsNotFoundLabel = new TextBlock();
                gameCollectionsNotFoundLabel.Text = "Перетащите сюда игры чтобы создать коллекцию.";
                gameCollectionItems.Children.Add(gameCollectionsNotFoundLabel);
            }
        }

        public void InsertGameToCollectionHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            Dictionary<String, Object> data = ((Dictionary<String, Object>)(menuItemData));
            InsertGameToCollection(data);
        }

        public void InsertGameToCollection(Dictionary<String, Object> data)
        {
            string game = ((string)(data["game"]));
            string collection = ((string)(data["collection"]));
        }


        public void OpenGameSettingsHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            Dictionary<String, Object> data = ((Dictionary<String, Object>)(menuItemData));
            OpenGameSettings(data);
        }

        public void OpenGameSettings(Dictionary<String, Object> data)
        {
            string name = ((string)(data["game"]));
            bool isCustomGame = ((bool)(data["isCustomGame"]));
            Dialogs.GameSettingsDialog dialog = new Dialogs.GameSettingsDialog(currentUserId, name, isCustomGame);
            dialog.Show();
        }

        public void ToggleGameCoverHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            ToggleGameCover(menuItemData);
        }

        public void ToggleGameCover(Dictionary<String, Object> data)
        {
            string name = ((string)(data["game"]));
            string collection = ((string)(data["collection"]));
            string cover = ((string)(data["cover"]));
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            List<Game> results = updatedGames.Where<Game>((Game game) =>
            {
                return game.name == name;
            }).ToList<Game>();
            int resultsCount = results.Count;
            bool isFound = resultsCount >= 1;
            if (isFound)
            {
                Game result = results[0];
                bool isCoverSet = cover != "";
                if (isCoverSet)
                {
                    result.cover = "";
                }
                else
                {
                    Microsoft.Win32.OpenFileDialog ofd = new Microsoft.Win32.OpenFileDialog();
                    ofd.Title = "Выберите обложку";
                    ofd.Filter = "Png documents (.png)|*.png";
                    bool? res = ofd.ShowDialog();
                    bool isOpened = res != false;
                    if (isOpened)
                    {
                        string path = ofd.FileName;
                        result.cover = path;
                    }
                }
                string savedContent = js.Serialize(new SavedContent
                {
                    games = updatedGames,
                    friends = currentFriends,
                    settings = currentSettings,
                    collections = currentCollections,
                    notifications = currentNotifications,
                    categories = currentCategories,
                    recentChats = currentRecentChats,
                    recommendations = currentRecommendations,
                    logoutDate = currentLogoutDate,
                    sections = currentSections
                });
                File.WriteAllText(saveDataFilePath, savedContent);
                GetGameCollections();
                GetGameCollectionItems(collection);
                GetHiddenGames();
            }
        }

        public void ShowGamesLocalFilesHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            string name = ((string)(menuItemData));
            ShowGamesLocalFiles(name);
        }

        public void ShowGamesLocalFiles(string name)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string gamePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\games\" + name;
            System.Diagnostics.Process.Start(new ProcessStartInfo
            {
                FileName = "explorer",
                Arguments = gamePath,
                UseShellExecute = true
            });
        }

        public void RemoveGameFromCollectionHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            RemoveGameFromCollection(menuItemData);
        }

        public void RemoveGameFromCollection(Dictionary<String, Object> menuItemData)
        {
            string game = ((string)(menuItemData["game"]));
            string collection = ((string)(menuItemData["collection"]));
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            foreach (Game updatedGame in updatedGames)
            {
                string updatedGameName = updatedGame.name;
                List<string> updatedGameCollections = updatedGame.collections;
                int collectionIndex = -1;
                List<int> updatedGameCollectionsIndexes = new List<int>();
                foreach (string updatedGameCollection in updatedGameCollections)
                {
                    collectionIndex++;
                    bool isRemove = updatedGameCollection == collection && updatedGameName == game;
                    if (isRemove)
                    {
                        updatedGameCollectionsIndexes.Add(collectionIndex);
                    }
                }
                for (int i = 0; i < updatedGameCollectionsIndexes.Count; i++)
                {
                    updatedGameCollections.RemoveAt(updatedGameCollectionsIndexes[i]);
                }
            }
            string savedContent = js.Serialize(new SavedContent
            {
                games = updatedGames,
                friends = currentFriends,
                settings = currentSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            GetGamesList("");
            GetGameCollections();
            GetGameCollectionItems(collection);
        }

        public void SelectGameCollectionItemHandler(object sender, RoutedEventArgs e)
        {
            Image thumbnail = ((Image)(sender));
            object thumbnailData = thumbnail.DataContext;
            string name = ((string)(thumbnailData));
            SelectGameCollectionItem(name);
        }

        public void SelectGameCollectionItem (string name)
        {
            Dictionary<String, Object> myGameData = null;
            foreach (StackPanel game in games.Children)
            {
                object rawGameData = game.DataContext;
                Dictionary<String, Object> gameData = ((Dictionary<String, Object>)(rawGameData));
                bool isGameDataFound = name == ((string)(gameData["name"]));
                if (isGameDataFound)
                {
                    myGameData = gameData;
                    break;
                }
            }
            bool isMyGameDataExists = myGameData != null;
            if (isMyGameDataExists)
            {
                OpenGamesLibrary();
                SelectGame(myGameData);
            }
        }

        public void GetLocalGames(string keywords)
        {

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<string> currentCollections = loadedContent.collections;
            List<Game> currentGames = loadedContent.games;
            List<Game> loadedGames = currentGames;
            loadedGames = loadedGames.Where<Game>((Game gameInfo) =>
            {
                int keywordsLength = keywords.Length;
                bool isKeywordsSetted = keywordsLength >= 1;
                bool isKeywordsNotSetted = !isKeywordsSetted;
                string gameId = gameInfo.id;
                string gameName = gameInfo.name;
                string ignoreCaseKeywords = keywords.ToLower();
                string ignoreCaseGameName = gameName.ToLower();
                bool isGameNameMatch = ignoreCaseGameName.Contains(ignoreCaseKeywords);
                bool isSearchEnabled = isKeywordsSetted && isGameNameMatch;
                bool isGameMatch = isSearchEnabled || isKeywordsNotSetted;
                bool isCustomGame = gameId == "mockId";
                bool isCustomGameMatch = isGameMatch && isCustomGame;
                return isCustomGameMatch;
            }).ToList<Game>();
            int countLoadedGames = loadedGames.Count;
            // bool isGamesExists = countLoadedGames >= 1;
            bool isGamesExists = countLoadedGames >= 1;
            if (isGamesExists)
            {
                
                activeGame.Visibility = visible;
                ads.Visibility = invisible;

                foreach (Game gamesListItem in loadedGames)
                {

                    string gamesListItemName = gamesListItem.name;

                    List<Game> results = currentGames.Where<Game>((Game game) =>
                    {
                        return game.name == gamesListItemName;
                    }).ToList<Game>();
                    int countResults = results.Count;
                    bool isHaveResults = countResults >= 1;
                    bool isShowGame = true;
                    Game result = null;
                    if (isHaveResults)
                    {
                        result = results[0];
                        bool isHidden = result.isHidden;
                        isShowGame = !isHidden;
                    }
                    if (isShowGame)
                    {
                        StackPanel newGame = new StackPanel();
                        newGame.MouseLeftButtonUp += SelectGameHandler;
                        newGame.Orientation = Orientation.Horizontal;
                        newGame.Height = 35;

                        // string gamesListItemId = gamesListItem._id;

                        Dictionary<String, Object> newGameData = new Dictionary<String, Object>();
                        newGameData.Add("id", "mockId");
                        newGameData.Add("name", gamesListItemName);
                        newGameData.Add("url", "");
                        newGameData.Add("image", "");
                        newGameData.Add("price", 0);
                        newGame.DataContext = newGameData;
                        Image newGamePhoto = new Image();
                        newGamePhoto.Margin = new Thickness(5);
                        newGamePhoto.Width = 25;
                        newGamePhoto.Height = 25;
                        newGamePhoto.BeginInit();
                        // Uri newGamePhotoUri = new Uri(gamesListItemImage);
                        // Uri newGamePhotoUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                        Uri newGamePhotoUri = new Uri(@"https://cdn3.iconfinder.com/data/icons/solid-locations-icon-set/64/Games_2-256.png");
                        newGamePhoto.Source = new BitmapImage(newGamePhotoUri);
                        newGamePhoto.EndInit();
                        newGame.Children.Add(newGamePhoto);
                        newGamePhoto.ImageFailed += SetDefaultThumbnailHandler;
                        TextBlock newGameLabel = new TextBlock();
                        newGameLabel.Margin = new Thickness(5);
                        newGameLabel.Text = gamesListItem.name;
                        newGame.Children.Add(newGameLabel);
                        games.Children.Add(newGame);

                        List<Game> gameSearchResults = currentGames.Where<Game>((Game game) =>
                        {
                            string gameName = game.name;
                            bool isGameFound = gameName == gamesListItemName;
                            return isGameFound;
                        }).ToList<Game>();
                        int countGameSearchResults = gameSearchResults.Count;
                        bool isGameInstalled = countGameSearchResults >= 1;
                        bool isGameNotInstalled = !isGameInstalled;
                        if (isGameInstalled)
                        {

                            ContextMenu newGameContextMenu = new ContextMenu();

                            MenuItem newGameContextMenuItem = new MenuItem();
                            newGameContextMenuItem.Header = "Играть";
                            newGameContextMenuItem.DataContext = gamesListItemName;
                            newGameContextMenuItem.Click += RunGameHandler;
                            newGameContextMenu.Items.Add(newGameContextMenuItem);

                            newGameContextMenuItem = new MenuItem();
                            newGameContextMenuItem.Header = "Добавить в коллекцию";
                            newGameContextMenu.Items.Add(newGameContextMenuItem);

                            foreach (string collectionName in currentCollections)
                            {
                                MenuItem newGameInnerContextMenuItem = new MenuItem();
                                List<string> resultCollections = new List<string>();
                                if (isHaveResults)
                                {
                                    resultCollections = result.collections;
                                }
                                bool isAlreadyInCollection = resultCollections.Contains(collectionName);
                                if (isAlreadyInCollection)
                                {
                                    newGameInnerContextMenuItem.IsEnabled = false;
                                }

                                newGameInnerContextMenuItem.Header = collectionName;
                                Dictionary<String, Object> newGameInnerContextMenuItemData = new Dictionary<String, Object>();
                                newGameInnerContextMenuItemData.Add("collection", collectionName);
                                newGameInnerContextMenuItemData.Add("name", gamesListItemName);
                                newGameInnerContextMenuItem.DataContext = newGameInnerContextMenuItemData;
                                newGameInnerContextMenuItem.Click += AddGameToCollectionHandler;
                                newGameContextMenuItem.Items.Add(newGameInnerContextMenuItem);
                            }

                            newGameContextMenuItem = new MenuItem();
                            string gameCollectionItemContextMenuItemHeaderContent = "Убрать из ";
                            newGameContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;
                            MenuItem newGameNestedContextMenuItem;
                            Dictionary<String, Object> newGameNestedContextMenuItemData;
                            foreach (string hiddenGameCollection in result.collections)
                            {
                                newGameNestedContextMenuItem = new MenuItem();
                                newGameNestedContextMenuItem.Header = hiddenGameCollection;
                                newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                                newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                                newGameNestedContextMenuItemData.Add("collection", hiddenGameCollection);
                                newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                                newGameNestedContextMenuItem.Click += RemoveGameFromCollectionHandler;
                                newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);
                            }
                            newGameContextMenu.Items.Add(newGameContextMenuItem);

                            newGameContextMenuItem = new MenuItem();
                            newGameContextMenuItem.Header = "Управление";

                            newGameNestedContextMenuItem = new MenuItem();
                            newGameNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                            newGameNestedContextMenuItem.DataContext = gamesListItemName;
                            newGameNestedContextMenuItem.Click += CreateShortcutHandler;
                            newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                            newGameNestedContextMenuItem = new MenuItem();
                            bool IsCoverSet = result.cover != "";
                            if (IsCoverSet)
                            {
                                newGameNestedContextMenuItem.Header = "Удалить свою обложку";
                            }
                            else
                            {
                                newGameNestedContextMenuItem.Header = "Задать свою обложку";
                            }
                            newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                            newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                            newGameNestedContextMenuItemData.Add("collection", "");
                            newGameNestedContextMenuItemData.Add("cover", result.cover);
                            newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                            newGameNestedContextMenuItem.Click += ToggleGameCoverHandler;
                            newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                            newGameNestedContextMenuItem = new MenuItem();
                            newGameNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                            newGameNestedContextMenuItem.DataContext = gamesListItemName;
                            newGameNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                            newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                            newGameNestedContextMenuItem = new MenuItem();
                            bool isHiddenGame = result.isHidden;
                            if (isHiddenGame)
                            {
                                newGameNestedContextMenuItem.Header = "Убрать из скрытого";
                            }
                            else
                            {
                                newGameNestedContextMenuItem.Header = "Скрыть игру";
                            }

                            newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                            newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                            newGameNestedContextMenuItemData.Add("collection", "");
                            newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                            newGameNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                            newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                            newGameNestedContextMenuItem = new MenuItem();
                            newGameNestedContextMenuItem.Header = "Удалить с утройства";
                            newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                            newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                            newGameNestedContextMenuItemData.Add("collection", "");
                            newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                            newGameNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                            newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);
                            newGameContextMenu.Items.Add(newGameContextMenuItem);

                            string currentGameId = result.id;
                            newGameContextMenuItem = new MenuItem();
                            newGameContextMenuItem.Header = "Свойства";
                            Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                            gameCollectionItemContextMenuItemData.Add("game", gamesListItemName);
                            bool isCustomGame = currentGameId == "mockId";
                            gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                            newGameContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                            newGameContextMenuItem.Click += OpenGameSettingsHandler;
                            newGameContextMenu.Items.Add(newGameContextMenuItem);

                            newGame.ContextMenu = newGameContextMenu;
                        }
                    }
                }
                List<Game> displayedGames = currentGames.Where<Game>((Game game) =>
                {
                    bool isHidden = game.isHidden;
                    bool isDisplayed = !isHidden;
                    return isDisplayed;
                }).ToList<Game>();
                int countdisplayedGames = displayedGames.Count;
                bool isHaveDisplayedGames = countdisplayedGames >= 1;
                if (isHaveDisplayedGames)
                {

                    Game displayedGame = displayedGames[0];
                    string displayedGameName = displayedGame.name;
                    int index = loadedGames.FindIndex((Game game) =>
                    {
                        string gameName = game.name;
                        bool isGameFound = gameName == displayedGameName;
                        return isGameFound;
                    });
                    bool isFound = index >= 0;
                    if (isFound)
                    {
                        Game crossGame = loadedGames[index];
                        Game firstGame = crossGame;
                        Dictionary<String, Object> firstGameData = new Dictionary<String, Object>();
                        string firstGameId = firstGame.id;
                        string firstGameName = firstGame.name;
                        string firstGameUrl = @"";
                        string firstGameImage = @"";
                        int firstGamePrice = 0;
                        Debugger.Log(0, "debug", Environment.NewLine + "firstGameId: " + firstGameId + Environment.NewLine);
                        firstGameData.Add("id", firstGameId);
                        firstGameData.Add("name", firstGameName);
                        firstGameData.Add("url", firstGameUrl);
                        firstGameData.Add("image", firstGameImage);
                        firstGameData.Add("price", firstGamePrice);
                        SelectGame(firstGameData);
                    }
                    else
                    {
                        
                        activeGame.Visibility = invisible;
                        ads.Visibility = visible;
                    
                    }
                }
                else
                {
                    
                    activeGame.Visibility = invisible;
                    ads.Visibility = visible;
                
                }
            }
            else
            {
                
                activeGame.Visibility = invisible;
                ads.Visibility = visible;
            
            }
        }

        public void GetCommentsHistory ()
        {
            string discussionCommentsBoxContent = discussionCommentsBox.Text;
            string insensitiveCaseDiscussionCommentsBoxContent = discussionCommentsBoxContent.ToLower();
            int insensitiveCaseDiscussionCommentsBoxContentLength = insensitiveCaseDiscussionCommentsBoxContent.Length;
            bool isFilterDisabled = insensitiveCaseDiscussionCommentsBoxContentLength <= 0;
            discussionComments.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topics/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumTopicsResponseInfo myobj = (ForumTopicsResponseInfo)js.Deserialize(objText, typeof(ForumTopicsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topic/msgs/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ForumTopicMsgsResponseInfo myInnerObj = (ForumTopicMsgsResponseInfo)js.Deserialize(objText, typeof(ForumTopicMsgsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        List<ForumTopicMsg> totalMsgs = myInnerObj.msgs;

                                        /*List<Topic> totalTopics = myobj.topics;
                                        List<Topic> myTopicMsgs = totalTopics.Where<Topic>((Topic topic) =>
                                        {
                                            string topicId = topic._id;
                                            return true;
                                        }).ToList<Topic>();*/
                                        List<ForumTopicMsg> myTopicMsgs = totalMsgs.Where<ForumTopicMsg>((ForumTopicMsg msg) =>
                                        {
                                            string msgUserId = msg.user;
                                            string msgContent = msg.content;
                                            bool isMyMsg = msgUserId == currentUserId;
                                            string insensitiveCaseMsgContent = msgContent.ToLower();
                                            bool isKeywordsMatch = insensitiveCaseMsgContent.Contains(insensitiveCaseDiscussionCommentsBoxContent);
                                            bool isFilterMatch = isKeywordsMatch  || isFilterDisabled;
                                            return isMyMsg && isFilterMatch;
                                        }).ToList<ForumTopicMsg>();
                                        foreach (ForumTopicMsg myTopicMsg in myTopicMsgs)
                                        {
                                            string msgUserId = myTopicMsg.user;
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + msgUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        DateTime msgDate = myTopicMsg.date;
                                                        string rawMsgDate = msgDate.ToLongDateString();
                                                        StackPanel forumTopicMsg = new StackPanel();
                                                        forumTopicMsg.Background = System.Windows.Media.Brushes.LightGray;
                                                        forumTopicMsg.Margin = new Thickness(10);
                                                        StackPanel msgHeader = new StackPanel();
                                                        msgHeader.Margin = new Thickness(10);
                                                        msgHeader.Orientation = Orientation.Horizontal;
                                                        Image msgHeaderUserAvatar = new Image();
                                                        msgHeaderUserAvatar.Margin = new Thickness(10, 0, 10, 0);
                                                        msgHeaderUserAvatar.Width = 25;
                                                        msgHeaderUserAvatar.Height = 25;
                                                        msgHeaderUserAvatar.BeginInit();
                                                        msgHeaderUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));
                                                        msgHeaderUserAvatar.EndInit();
                                                        msgHeader.Children.Add(msgHeaderUserAvatar);
                                                        TextBlock msgHeaderUserNameLabel = new TextBlock();
                                                        msgHeaderUserNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                        msgHeaderUserNameLabel.Text = "Пользователь";
                                                        msgHeader.Children.Add(msgHeaderUserNameLabel);
                                                        TextBlock msgHeaderDateLabel = new TextBlock();
                                                        msgHeaderDateLabel.Margin = new Thickness(10, 0, 10, 0);
                                                        msgHeaderDateLabel.Text = rawMsgDate;
                                                        msgHeader.Children.Add(msgHeaderDateLabel);
                                                        forumTopicMsg.Children.Add(msgHeader);
                                                        string msgContent = myTopicMsg.content;
                                                        TextBlock msgContentLabel = new TextBlock();
                                                        msgContentLabel.Margin = new Thickness(10);
                                                        msgContentLabel.Text = msgContent;
                                                        forumTopicMsg.Children.Add(msgContentLabel);
                                                        StackPanel msgFooter = new StackPanel();
                                                        msgFooter.Margin = new Thickness(10);
                                                        msgFooter.Orientation = Orientation.Horizontal;
                                                        TextBlock msgFooterEditLabel = new TextBlock();
                                                        msgFooterEditLabel.Margin = new Thickness(10, 0, 10, 0);
                                                        msgFooterEditLabel.Text = "Отредактировано пользователем: " + rawMsgDate;
                                                        msgFooter.Children.Add(msgFooterEditLabel);
                                                        TextBlock msgFooterNumberLabel = new TextBlock();
                                                        msgFooterNumberLabel.Margin = new Thickness(10, 0, 10, 0);
                                                        msgFooterNumberLabel.TextAlignment = TextAlignment.Right;
                                                        string msgFooterNumberLabelContent = "#";
                                                        msgFooterNumberLabel.Text = msgFooterNumberLabelContent;
                                                        msgFooter.Children.Add(msgFooterNumberLabel);
                                                        forumTopicMsg.Children.Add(msgFooter);
                                                        discussionComments.Children.Add(forumTopicMsg);

                                                        User user = myNestedObj.user;
                                                        string userName = user.name;
                                                        msgHeaderUserNameLabel.Text = userName;
                                                        msgFooterEditLabel.Text = "Отредактировано " + userName + ": " + rawMsgDate;

                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetForums(string keywords)
        {
            string ignoreCaseKeywords = keywords.ToLower();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forums/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumsListResponseInfo myobj = (ForumsListResponseInfo)js.Deserialize(objText, typeof(ForumsListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            UIElementCollection forumsChildren = forums.Children;
                            int countForumsChildren = forumsChildren.Count;
                            for (int i = countForumsChildren - 1; i > 0; i--)
                            {
                                UIElement element = forums.Children[i];
                                int row = Grid.GetRow(element);
                                bool isForumItemElement = row >= 1;
                                if (isForumItemElement)
                                {
                                    forums.Children.Remove(element);
                                }
                            }
                            RowDefinitionCollection rows = forums.RowDefinitions;
                            int countRows = rows.Count;
                            bool isManyRows = countRows >= 2;
                            if (isManyRows)
                            {
                                rows.RemoveRange(1, countRows - 1);
                            }
                            List<Forum> forumsList = myobj.forums;
                            foreach (Forum forumsListItem in forumsList)
                            {
                                string forumId = forumsListItem._id;
                                string forumTitle = forumsListItem.title;
                                string forumIgnoreCaseTitle = forumTitle.ToLower();
                                bool isFilterMatch = forumIgnoreCaseTitle.Contains(ignoreCaseKeywords);
                                int keywordsLength = keywords.Length;
                                bool isEmptyKeywordsLength = keywordsLength <= 0;
                                bool isAddForum = isFilterMatch || isEmptyKeywordsLength;
                                if (isAddForum)
                                {
                                    RowDefinition row = new RowDefinition();
                                    row.Height = new GridLength(50);
                                    forums.RowDefinitions.Add(row);
                                    rows = forums.RowDefinitions;
                                    countRows = rows.Count;
                                    int lastRowIndex = countRows - 1;
                                    StackPanel forumName = new StackPanel();
                                    forumName.Margin = new Thickness(0, 2, 0, 2);
                                    forumName.Background = System.Windows.Media.Brushes.DarkCyan;
                                    TextBlock forumNameLabel = new TextBlock();
                                    forumNameLabel.Foreground = System.Windows.Media.Brushes.White;
                                    forumNameLabel.FontWeight = System.Windows.FontWeights.Bold;
                                    forumNameLabel.Margin = new Thickness(10, 15, 10, 15);
                                    forumNameLabel.Text = forumTitle;
                                    forumName.Children.Add(forumNameLabel);
                                    forums.Children.Add(forumName);
                                    Grid.SetRow(forumName, lastRowIndex);
                                    Grid.SetColumn(forumName, 0);
                                    forumNameLabel.DataContext = forumId;
                                    forumNameLabel.MouseLeftButtonUp += SelectForumHandler;
                                    StackPanel forumLastMsgDate = new StackPanel();
                                    forumLastMsgDate.Margin = new Thickness(0, 2, 0, 2);
                                    forumLastMsgDate.Background = System.Windows.Media.Brushes.DarkCyan;
                                    TextBlock forumLastMsgDateLabel = new TextBlock();
                                    forumLastMsgDateLabel.Foreground = System.Windows.Media.Brushes.White;
                                    forumLastMsgDateLabel.Margin = new Thickness(10, 15, 10, 15);
                                    forumLastMsgDateLabel.Text = "00/00/00";

                                    List<ForumTopicMsg> totalForumMsgs = new List<ForumTopicMsg>();
                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topics/get/?id=" + forumId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            ForumTopicsResponseInfo myInnerObj = (ForumTopicsResponseInfo)js.Deserialize(objText, typeof(ForumTopicsResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                List<Topic> topics = myInnerObj.topics;
                                                foreach (Topic topic in topics)
                                                {
                                                    string topicId = topic._id;
                                                    HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topic/msgs/get/?topic=" + topicId);
                                                    nestedWebRequest.Method = "GET";
                                                    nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                    {
                                                        using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = nestedReader.ReadToEnd();
                                                            ForumTopicMsgsResponseInfo myNestedObj = (ForumTopicMsgsResponseInfo)js.Deserialize(objText, typeof(ForumTopicMsgsResponseInfo));
                                                            status = myNestedObj.status;
                                                            isOkStatus = status == "OK";
                                                            if (isOkStatus)
                                                            {
                                                                List<ForumTopicMsg> msgs = myNestedObj.msgs;
                                                                foreach (ForumTopicMsg msg in msgs)
                                                                {
                                                                    totalForumMsgs.Add(msg);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    int countTotalForumMsgs = totalForumMsgs.Count;
                                    bool isMultipleMsgs = countTotalForumMsgs >= 2;
                                    bool isOnlyOneMsg = countTotalForumMsgs == 1;
                                    if (isMultipleMsgs)
                                    {
                                        IEnumerable<ForumTopicMsg> orderedMsgs = totalForumMsgs.OrderBy((ForumTopicMsg localMsg) => localMsg.date);
                                        List<ForumTopicMsg> orderedMsgsList = orderedMsgs.ToList<ForumTopicMsg>();
                                        int countMsgs = orderedMsgsList.Count;
                                        int lastMsgIndex = countMsgs - 1;
                                        ForumTopicMsg msg = orderedMsgsList[lastMsgIndex];
                                        DateTime msgDate = msg.date;
                                        string parsedMsgDate = msgDate.ToLongDateString();
                                        forumLastMsgDateLabel.Text = parsedMsgDate;
                                    }
                                    else if (isOnlyOneMsg)
                                    {
                                        IEnumerable<ForumTopicMsg> orderedMsgs = totalForumMsgs.OrderBy((ForumTopicMsg localMsg) => localMsg.date);
                                        List<ForumTopicMsg> orderedMsgsList = orderedMsgs.ToList<ForumTopicMsg>();
                                        ForumTopicMsg msg = orderedMsgsList[0];
                                        DateTime msgDate = msg.date;
                                        string parsedMsgDate = msgDate.ToLongDateString();
                                        forumLastMsgDateLabel.Text = parsedMsgDate;
                                    }
                                    else
                                    {
                                        forumLastMsgDateLabel.Text = "---";
                                    }
                                    forumLastMsgDate.Children.Add(forumLastMsgDateLabel);
                                    forums.Children.Add(forumLastMsgDate);
                                    Grid.SetRow(forumLastMsgDate, lastRowIndex);
                                    Grid.SetColumn(forumLastMsgDate, 1);
                                    StackPanel forumDiscussionsCount = new StackPanel();
                                    forumDiscussionsCount.Margin = new Thickness(0, 2, 0, 2);
                                    forumDiscussionsCount.Background = System.Windows.Media.Brushes.DarkCyan;
                                    TextBlock forumDiscussionsCountLabel = new TextBlock();
                                    forumDiscussionsCountLabel.Foreground = System.Windows.Media.Brushes.White;
                                    forumDiscussionsCountLabel.Margin = new Thickness(10, 15, 10, 15);
                                    innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topics/get/?id=" + forumId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            ForumTopicsResponseInfo myInnerObj = (ForumTopicsResponseInfo)js.Deserialize(objText, typeof(ForumTopicsResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                List<Topic> topics = myInnerObj.topics;
                                                int countTopics = topics.Count;
                                                string rawCountTopics = countTopics.ToString();
                                                forumDiscussionsCountLabel.Text = rawCountTopics;
                                            }
                                        }
                                    }
                                    forumDiscussionsCount.Children.Add(forumDiscussionsCountLabel);
                                    forums.Children.Add(forumDiscussionsCount);
                                    Grid.SetRow(forumDiscussionsCount, lastRowIndex);
                                    Grid.SetColumn(forumDiscussionsCount, 2);
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectTopicHandler(object sender, RoutedEventArgs e)
        {
            TextBlock topicNameLabel = ((TextBlock)(sender));
            object topicData = topicNameLabel.DataContext;
            string topicId = ((string)(topicData));
            SelectTopic(topicId);
        }

        public void SelectTopic(string id)
        {

            int countResultPerPage = 15;
            object rawCountMsgs = forumTopicCountMsgs.DataContext;
            bool isNotData = rawCountMsgs == null;
            bool isHaveData = !isNotData;
            if (isHaveData)
            {
                int countMsgs = ((int)(rawCountMsgs));
                countResultPerPage = countMsgs;
            }

            addDiscussionMsgBtn.DataContext = id;
            mainControl.SelectedIndex = 8;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forums/topics/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumTopicResponseInfo myobj = (ForumTopicResponseInfo)js.Deserialize(objText, typeof(ForumTopicResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Topic topic = myobj.topic;
                            string userId = topic.user;
                            string title = topic.title;
                            activeTopicNameLabel.Text = title;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topic/msgs/get/?topic=" + id);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ForumTopicMsgsResponseInfo myInnerObj = (ForumTopicMsgsResponseInfo)js.Deserialize(objText, typeof(ForumTopicMsgsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        forumTopicMsgs.Children.Clear();
                                        List<ForumTopicMsg> msgs = myInnerObj.msgs;
                                        int msgsCount = msgs.Count;
                                        string rawMsgsCount = msgsCount.ToString();

                                        // string forumTopicMsgsCountLabelContent = "Сообщения 0 - 0 из " + rawMsgsCount;

                                        int msgsCursor = -1;

                                        object currentPageNumber = forumTopicPages.DataContext;
                                        string rawCurrentPageNumber = currentPageNumber.ToString();
                                        int currentPage = Int32.Parse(rawCurrentPageNumber);
                                        int currentPageIndex = currentPage - 1;

                                        forumTopicPages.Children.Clear();
                                        bool isHaveMsgs = msgsCount >= 1;
                                        if (isHaveMsgs)
                                        {
                                            foreach (ForumTopicMsg msg in msgs)
                                            {
                                                msgsCursor++;

                                                int countPages = forumTopicPages.Children.Count;
                                                bool isAddPageLabel = msgsCursor == countResultPerPage * countPages;
                                                if (isAddPageLabel)
                                                {
                                                    TextBlock forumTopicPageLabel = new TextBlock();
                                                    int pageNumber = countPages + 1;
                                                    string rawPageNumber = pageNumber.ToString();
                                                    forumTopicPageLabel.Text = rawPageNumber;
                                                    forumTopicPageLabel.DataContext = pageNumber;
                                                    forumTopicPageLabel.MouseLeftButtonUp += SelectForumTopicPageHandler;
                                                    forumTopicPageLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    forumTopicPages.Children.Add(forumTopicPageLabel);
                                                    bool isCurrentPageLabel = rawCurrentPageNumber == rawPageNumber;
                                                    if (isCurrentPageLabel)
                                                    {
                                                        forumTopicPageLabel.Foreground = System.Windows.Media.Brushes.DarkCyan;
                                                    }
                                                    else
                                                    {
                                                        forumTopicPageLabel.Foreground = System.Windows.Media.Brushes.White;
                                                    }
                                                }

                                                bool isMsgForCurrentPage = msgsCursor < countResultPerPage * currentPage && (msgsCursor >= countResultPerPage * currentPage - countResultPerPage);
                                                if (isMsgForCurrentPage)
                                                {
                                                    string msgUserId = msg.user;
                                                    DateTime msgDate = msg.date;
                                                    string rawMsgDate = msgDate.ToLongDateString();
                                                    StackPanel forumTopicMsg = new StackPanel();
                                                    forumTopicMsg.Background = System.Windows.Media.Brushes.LightGray;
                                                    forumTopicMsg.Margin = new Thickness(10);
                                                    StackPanel msgHeader = new StackPanel();
                                                    msgHeader.Margin = new Thickness(10);
                                                    msgHeader.Orientation = Orientation.Horizontal;
                                                    Image msgHeaderUserAvatar = new Image();
                                                    msgHeaderUserAvatar.Margin = new Thickness(10, 0, 10, 0);
                                                    msgHeaderUserAvatar.Width = 25;
                                                    msgHeaderUserAvatar.Height = 25;
                                                    msgHeaderUserAvatar.BeginInit();

                                                    msgHeaderUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + msgUserId));
                                                    // msgHeaderUserAvatar.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));

                                                    msgHeaderUserAvatar.EndInit();
                                                    msgHeader.Children.Add(msgHeaderUserAvatar);
                                                    TextBlock msgHeaderUserNameLabel = new TextBlock();
                                                    msgHeaderUserNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    msgHeaderUserNameLabel.Text = "Пользователь";
                                                    msgHeader.Children.Add(msgHeaderUserNameLabel);
                                                    TextBlock msgHeaderDateLabel = new TextBlock();
                                                    msgHeaderDateLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    msgHeaderDateLabel.Text = rawMsgDate;
                                                    msgHeader.Children.Add(msgHeaderDateLabel);
                                                    forumTopicMsg.Children.Add(msgHeader);
                                                    string msgContent = msg.content;
                                                    TextBlock msgContentLabel = new TextBlock();
                                                    msgContentLabel.Margin = new Thickness(10);
                                                    msgContentLabel.Text = msgContent;
                                                    forumTopicMsg.Children.Add(msgContentLabel);
                                                    StackPanel msgFooter = new StackPanel();
                                                    msgFooter.Margin = new Thickness(10);
                                                    msgFooter.Orientation = Orientation.Horizontal;
                                                    TextBlock msgFooterEditLabel = new TextBlock();
                                                    msgFooterEditLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    msgFooterEditLabel.Text = "Отредактировано пользователем: " + rawMsgDate;
                                                    msgFooter.Children.Add(msgFooterEditLabel);
                                                    TextBlock msgFooterNumberLabel = new TextBlock();
                                                    msgFooterNumberLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    msgFooterNumberLabel.TextAlignment = TextAlignment.Right;
                                                    int msgNumber = msgsCursor + 1;
                                                    string rawMsgNumber = msgNumber.ToString();
                                                    string msgFooterNumberLabelContent = "#" + rawMsgNumber;
                                                    msgFooterNumberLabel.Text = msgFooterNumberLabelContent;
                                                    msgFooter.Children.Add(msgFooterNumberLabel);
                                                    forumTopicMsg.Children.Add(msgFooter);
                                                    forumTopicMsgs.Children.Add(forumTopicMsg);

                                                    HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + msgUserId);
                                                    nestedWebRequest.Method = "GET";
                                                    nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                    {
                                                        using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = nestedReader.ReadToEnd();
                                                            UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                            status = myNestedObj.status;
                                                            isOkStatus = status == "OK";
                                                            if (isOkStatus)
                                                            {
                                                                User user = myNestedObj.user;
                                                                string userName = user.name;
                                                                msgHeaderUserNameLabel.Text = userName;
                                                                msgFooterEditLabel.Text = "Отредактировано " + userName + ": " + rawMsgDate;
                                                            }
                                                        }
                                                    }

                                                }
                                            }

                                            int firstMsgIndex = countResultPerPage * currentPage - countResultPerPage;
                                            int firstMsgNumber = firstMsgIndex + 1;
                                            int rawFirstMsgNumber = firstMsgNumber;

                                            // int lastMsgIndex = countResultPerPage * currentPage;
                                            // int lastMsgNumber = lastMsgIndex + 1;

                                            int lastMsgNumber = countResultPerPage * currentPage;

                                            int rawLastMsgNumber = lastMsgNumber;
                                            string forumTopicMsgsCountLabelContent = "Сообщения " + rawFirstMsgNumber + " - " + rawLastMsgNumber + " из " + rawMsgsCount;
                                            forumTopicMsgsCountLabel.Text = forumTopicMsgsCountLabelContent;

                                            UpdatePaginationPointers(currentPage);

                                        }
                                        else
                                        {
                                            TextBlock forumTopicPageLabel = new TextBlock();
                                            int pageNumber = 1;
                                            string rawPageNumber = pageNumber.ToString();
                                            forumTopicPageLabel.Text = rawPageNumber;
                                            forumTopicPageLabel.DataContext = pageNumber;
                                            forumTopicPageLabel.MouseLeftButtonUp += SelectForumTopicPageHandler;
                                            forumTopicPageLabel.Margin = new Thickness(10, 0, 10, 0);
                                            forumTopicPages.Children.Add(forumTopicPageLabel);
                                            bool isCurrentPageLabel = rawCurrentPageNumber == rawPageNumber;
                                            if (isCurrentPageLabel)
                                            {
                                                forumTopicPageLabel.Foreground = System.Windows.Media.Brushes.DarkCyan;
                                            }
                                            else
                                            {
                                                forumTopicPageLabel.Foreground = System.Windows.Media.Brushes.White;
                                            }

                                            int rawFirstMsgNumber = 0;
                                            int rawLastMsgNumber = 0;
                                            string forumTopicMsgsCountLabelContent = "Сообщения " + rawFirstMsgNumber + " - " + rawLastMsgNumber + " из " + rawMsgsCount;
                                            forumTopicMsgsCountLabel.Text = forumTopicMsgsCountLabelContent;

                                            UpdatePaginationPointers(1);

                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            addDiscussionMsgUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));

        }

        public void SelectForumHandler(object sender, RoutedEventArgs e)
        {
            TextBlock forumNameLabel = ((TextBlock)(sender));
            object forumData = forumNameLabel.DataContext;
            string forumId = ((string)(forumData));
            SelectForum(forumId);
        }

        public void OpenFamilyLibrarySharingManagementFromHelpHandler (object sender, RoutedEventArgs e)
        {
            OpenFamilyLibrarySharingManagementFromHelp();
        }

        public void OpenFamilyLibrarySharingManagementFromHelp ()
        {
            mainControl.SelectedIndex = 70;
        }

        public void SelectForum(string id)
        {
            addDiscussionDialog.Visibility = invisible;
            addDiscussionBtn.DataContext = id;
            mainControl.SelectedIndex = 7;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forums/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumResponseInfo myobj = (ForumResponseInfo)js.Deserialize(objText, typeof(ForumResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Forum currentForum = myobj.forum;
                            string title = currentForum.title;
                            activeForumNameLabel.Text = title;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topics/get/?id=" + id);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    ForumTopicsResponseInfo myInnerObj = (ForumTopicsResponseInfo)js.Deserialize(objText, typeof(ForumTopicsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        forumTopics.Children.Clear();
                                        RowDefinitionCollection rows = forumTopics.RowDefinitions;
                                        int countRows = rows.Count;
                                        bool isHaveRows = countRows >= 1;
                                        if (isHaveRows)
                                        {
                                            forumTopics.RowDefinitions.RemoveRange(0, forumTopics.RowDefinitions.Count);
                                        }
                                        List<Topic> topics = myInnerObj.topics;
                                        int topicsCursor = -1;
                                        foreach (Topic topic in topics)
                                        {
                                            topicsCursor++;
                                            string topicId = topic._id;
                                            string topicTitle = topic.title;
                                            string userId = topic.user;
                                            RowDefinition row = new RowDefinition();
                                            row.Height = new GridLength(65);
                                            forumTopics.RowDefinitions.Add(row);
                                            rows = forums.RowDefinitions;
                                            countRows = rows.Count;
                                            int lastRowIndex = countRows - 1;
                                            StackPanel topicHeader = new StackPanel();
                                            topicHeader.Margin = new Thickness(0, 2, 0, 2);
                                            topicHeader.Background = System.Windows.Media.Brushes.DarkCyan;
                                            topicHeader.Orientation = Orientation.Horizontal;
                                            PackIcon topicHeaderIcon = new PackIcon();
                                            topicHeaderIcon.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                                            topicHeaderIcon.Margin = new Thickness(10, 0, 10, 0);
                                            topicHeaderIcon.Kind = PackIconKind.Email;
                                            topicHeaderIcon.Foreground = System.Windows.Media.Brushes.SkyBlue;
                                            topicHeader.Children.Add(topicHeaderIcon);
                                            StackPanel topicHeaderAside = new StackPanel();
                                            TextBlock topicNameLabel = new TextBlock();
                                            topicNameLabel.Foreground = System.Windows.Media.Brushes.White;
                                            topicNameLabel.FontWeight = System.Windows.FontWeights.Bold;
                                            topicNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                            topicNameLabel.Text = topicTitle;
                                            topicHeaderAside.Children.Add(topicNameLabel);
                                            TextBlock topicAuthorLabel = new TextBlock();
                                            topicAuthorLabel.Margin = new Thickness(0, 5, 0, 5);
                                            topicAuthorLabel.Foreground = System.Windows.Media.Brushes.SkyBlue;
                                            topicAuthorLabel.Text = "Пользователь";

                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + userId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        User user = myNestedObj.user;
                                                        string userName = user.name;
                                                        topicAuthorLabel.Text = userName;
                                                    }
                                                }
                                            }

                                            topicHeaderAside.Children.Add(topicAuthorLabel);
                                            topicHeader.Children.Add(topicHeaderAside);
                                            forumTopics.Children.Add(topicHeader);
                                            Grid.SetRow(topicHeader, topicsCursor);
                                            Grid.SetColumn(topicHeader, 0);
                                            topicNameLabel.DataContext = topicId;
                                            topicNameLabel.MouseLeftButtonUp += SelectTopicHandler;
                                            StackPanel topicLastMsgDate = new StackPanel();
                                            topicLastMsgDate.Margin = new Thickness(0, 2, 0, 2);
                                            topicLastMsgDate.Background = System.Windows.Media.Brushes.DarkCyan;
                                            topicLastMsgDate.Height = 65;
                                            TextBlock topicLastMsgDateLabel = new TextBlock();
                                            topicLastMsgDateLabel.Foreground = System.Windows.Media.Brushes.SkyBlue;
                                            topicLastMsgDateLabel.Height = 65;
                                            topicLastMsgDateLabel.Margin = new Thickness(15);
                                            topicLastMsgDateLabel.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                                            topicLastMsgDateLabel.Text = "00/00/00";
                                            topicLastMsgDate.Children.Add(topicLastMsgDateLabel);
                                            forumTopics.Children.Add(topicLastMsgDate);
                                            Grid.SetRow(topicLastMsgDate, topicsCursor);
                                            Grid.SetColumn(topicLastMsgDate, 1);
                                            DockPanel forumMsgsCount = new DockPanel();
                                            forumMsgsCount.Margin = new Thickness(0, 2, 0, 2);
                                            forumMsgsCount.Height = 65;
                                            forumMsgsCount.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                                            forumMsgsCount.Background = System.Windows.Media.Brushes.DarkCyan;
                                            PackIcon forumMsgsCountIcon = new PackIcon();
                                            forumMsgsCountIcon.Foreground = System.Windows.Media.Brushes.White;
                                            forumMsgsCountIcon.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                                            forumMsgsCountIcon.Kind = PackIconKind.ChatBubble;
                                            forumMsgsCountIcon.Margin = new Thickness(10, 0, 10, 0);
                                            forumMsgsCount.Children.Add(forumMsgsCountIcon);
                                            TextBlock forumMsgsCountLabel = new TextBlock();
                                            forumMsgsCountLabel.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                                            forumMsgsCountLabel.Margin = new Thickness(10, 0, 10, 0);
                                            forumMsgsCountLabel.Foreground = System.Windows.Media.Brushes.White;

                                            nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forum/topic/msgs/get/?topic=" + topicId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    ForumTopicMsgsResponseInfo myNestedObj = (ForumTopicMsgsResponseInfo)js.Deserialize(objText, typeof(ForumTopicMsgsResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<ForumTopicMsg> msgs = myNestedObj.msgs;
                                                        int countMsgs = msgs.Count;
                                                        string rawCountMsgs = countMsgs.ToString();
                                                        forumMsgsCountLabel.Text = rawCountMsgs;
                                                        bool isMultipleMsgs = countMsgs >= 2;
                                                        bool isOnlyOneMsg = countMsgs == 1;
                                                        if (isMultipleMsgs)
                                                        {
                                                            IEnumerable<ForumTopicMsg> orderedMsgs = msgs.OrderBy((ForumTopicMsg localMsg) => localMsg.date);
                                                            List<ForumTopicMsg> orderedMsgsList = orderedMsgs.ToList<ForumTopicMsg>();
                                                            int lastMsgIndex = countMsgs - 1;
                                                            ForumTopicMsg msg = orderedMsgsList[lastMsgIndex];
                                                            DateTime msgDate = msg.date;
                                                            string parsedMsgDate = msgDate.ToLongDateString();
                                                            topicLastMsgDateLabel.Text = parsedMsgDate;
                                                        }
                                                        else if (isOnlyOneMsg)
                                                        {
                                                            IEnumerable<ForumTopicMsg> orderedMsgs = msgs.OrderBy((ForumTopicMsg localMsg) => localMsg.date);
                                                            List<ForumTopicMsg> orderedMsgsList = orderedMsgs.ToList<ForumTopicMsg>();
                                                            ForumTopicMsg msg = orderedMsgsList[0];
                                                            DateTime msgDate = msg.date;
                                                            string parsedMsgDate = msgDate.ToLongDateString();
                                                            topicLastMsgDateLabel.Text = parsedMsgDate;
                                                        }
                                                        else
                                                        {
                                                            topicLastMsgDateLabel.Text = "---";
                                                        }
                                                    }
                                                }
                                            }

                                            forumMsgsCount.Children.Add(forumMsgsCountLabel);
                                            forumTopics.Children.Add(forumMsgsCount);
                                            Grid.SetRow(forumMsgsCount, topicsCursor);
                                            Grid.SetColumn(forumMsgsCount, 2);
                                            Debugger.Log(0, "debug", Environment.NewLine + "forumTopics.RowDefinitions.Count: " + forumTopics.RowDefinitions.Count.ToString() + ", topicsCursor: " + topicsCursor.ToString() + ", lastRowIndex: " + lastRowIndex.ToString() + Environment.NewLine);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SetStatsChart()
        {
            /*Sparrow.Chart.ChartPoint point = new Sparrow.Chart.ChartPoint();
            PointsCollection points = new PointsCollection();
            ChartPoint chartPoint = new ChartPoint();
            points.Add(chartPoint);
            points.Add(new ChartPoint());
            points.Add(new ChartPoint());
            points.Add(new ChartPoint());
            points.Add(new ChartPoint());
            var asss = new Sparrow.Chart.AreaSeries()
            {
                Points = points
            };
            chartUsersStats.Series.Add(asss);*/

            /*List<CPU> source = new List<CPU>();
            DateTime dt = DateTime.Now;
            System.Random rad = new Random(System.DateTime.Now.Millisecond);
            for (int n = 0; n < 100; n++)
            {
                dt = dt.AddSeconds(1);
                CPU cpu = new CPU(dt, rad.Next(100), 51);
                source.Add(cpu);
            }
            ((Sparrow.Chart.LineSeries)(chartUsersStats.Series[0])).PointsSource = source;*/

            GenerateDatas();

        }

        public void GetDownloads()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            int dowloadsCursor = 0;
            downloads.Children.Clear();
            downloads.RowDefinitions.Clear();
            foreach (Game currentGame in currentGames)
            {
                string currentGameId = currentGame.id;
                string currentGameName = currentGame.name;
                string currentGamePath = currentGame.path;
                string currentGameInstallDate = currentGame.installDate;
                try
                {
                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    innerWebRequest.Method = "GET";
                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();

                            GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));

                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> games = myobj.games;
                                List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                {
                                    string gameName = game.name;
                                    bool isNamesMatches = game.name == currentGameName;
                                    return isNamesMatches;
                                }).ToList<GameResponseInfo>();
                                int countResults = gameResults.Count;
                                bool isResultsFound = countResults >= 1;
                                if (isResultsFound)
                                {
                                    GameResponseInfo foundedGame = gameResults[0];
                                    dowloadsCursor++;
                                    try
                                    {
                                        FileInfo currentGameInfo = new FileInfo(currentGamePath);
                                        long currentGameSize = currentGameInfo.Length;
                                        double currentGameSizeInGb = currentGameSize / 1024 / 1024 / 1024;
                                        string rawCurrentGameSize = currentGameSizeInGb + " Гб";
                                        RowDefinition download = new RowDefinition();
                                        download.Height = new GridLength(275);
                                        downloads.RowDefinitions.Add(download);
                                        RowDefinitionCollection rows = downloads.RowDefinitions;
                                        int rowsCount = rows.Count;
                                        int lastRowIndex = rowsCount - 1;
                                        Image downloadImg = new Image();
                                        downloadImg.BeginInit();
                                        Uri source = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                                        downloadImg.Source = new BitmapImage();
                                        downloadImg.EndInit();
                                        downloadImg.Margin = new Thickness(15, 0, 15, 0);
                                        downloads.Children.Add(downloadImg);
                                        Grid.SetRow(downloadImg, lastRowIndex);
                                        Grid.SetColumn(downloadImg, 0);
                                        StackPanel downloadInfo = new StackPanel();
                                        TextBlock downloadNameLabel = new TextBlock();
                                        downloadNameLabel.Text = currentGameName;
                                        downloadNameLabel.FontSize = 24;
                                        downloadNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                        downloadInfo.Children.Add(downloadNameLabel);
                                        TextBlock downloadSizeLabel = new TextBlock();
                                        downloadSizeLabel.Text = rawCurrentGameSize;
                                        downloadSizeLabel.Margin = new Thickness(15, 0, 15, 0);
                                        downloadInfo.Children.Add(downloadSizeLabel);
                                        downloads.Children.Add(downloadInfo);
                                        Grid.SetRow(downloadInfo, lastRowIndex);
                                        Grid.SetColumn(downloadInfo, 1);
                                        TextBlock downloadDateLabel = new TextBlock();
                                        downloadDateLabel.Text = currentGameInstallDate;
                                        downloadDateLabel.Margin = new Thickness(15, 0, 15, 0);
                                        downloads.Children.Add(downloadDateLabel);
                                        Grid.SetRow(downloadDateLabel, lastRowIndex);
                                        Grid.SetColumn(downloadDateLabel, 2);
                                    }
                                    catch (FileNotFoundException e)
                                    {

                                    }
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            countDownloadsLabel.Text = "Загрузки (" + dowloadsCursor + ")";
        }

        public void GetOnlineFriends()
        {

            string friendsListLabelHeaderContent = Properties.Resources.friendsListLabelContent;
            string onlineLabelContent = Properties.Resources.onlineLabelContent;
            friendsListLabel.Header = friendsListLabelHeaderContent;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = reader.ReadToEnd();
                        FriendsResponseInfo myObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                        string status = myObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> myFriends = myObj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<Friend> myOnlineFriends = myFriends.Where<Friend>((Friend friend) =>
                            {
                                string friendId = friend.friend;
                                bool isUserOnline = false;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + friendId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            User user = myInnerObj.user;
                                            string userStatus = user.status;
                                            isUserOnline = userStatus == "online";
                                        }
                                    }
                                }
                                return isUserOnline;
                            }).ToList<Friend>();
                            int countOnlineFriends = myOnlineFriends.Count;
                            string rawCountOnlineFriends = countOnlineFriends.ToString();
                            string friendsOnlineCountLabelContent = " (" + onlineLabelContent + " " + rawCountOnlineFriends + ")";
                            friendsListLabel.Header += friendsOnlineCountLabelContent;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void ResetEditInfoHandler(object sender, RoutedEventArgs e)
        {
            GetEditInfo();
        }

        public void CheckFriendsCache()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendRecords = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendRecord in friendRecords)
                            {
                                string localFriendId = friendRecord.friend;
                                friendsIds.Add(localFriendId);
                            }
                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            List<Game> currentGames = loadedContent.games;
                            Settings currentSettings = loadedContent.settings;
                            List<string> currentCollections = loadedContent.collections;
                            Notifications currentNotifications = loadedContent.notifications;
                            List<string> currentCategories = loadedContent.categories;
                            List<string> currentRecentChats = loadedContent.recentChats;
                            Recommendations currentRecommendations = loadedContent.recommendations;
                            string currentLogoutDate = loadedContent.logoutDate;
                            List<string> currentSections = loadedContent.sections;
                            List<FriendSettings> updatedFriends = loadedContent.friends;
                            int updatedFriendsCount = updatedFriends.Count;
                            for (int i = updatedFriendsCount - 1; i >= 0; i--)
                            {
                                FriendSettings currentFriend = updatedFriends[i];
                                string currentFriendId = currentFriend.id;
                                bool isFriendExists = friendsIds.Contains(currentFriendId);
                                bool isFriendNotExists = !isFriendExists;
                                if (isFriendNotExists)
                                {
                                    updatedFriends.Remove(currentFriend);
                                }
                            }
                            string savedContent = js.Serialize(new SavedContent
                            {
                                games = currentGames,
                                friends = updatedFriends,
                                settings = currentSettings,
                                collections = currentCollections,
                                notifications = currentNotifications,
                                categories = currentCategories,
                                recentChats = currentRecentChats,
                                recommendations = currentRecommendations,
                                logoutDate = currentLogoutDate,
                                sections = currentSections
                            });
                            File.WriteAllText(saveDataFilePath, savedContent);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetGamesStats()
        {
            DateTime currentDate = DateTime.Now;
            int hours = currentDate.Hour;
            int minutes = currentDate.Minute;
            string rawHours = hours.ToString();
            int measureLength = rawHours.Length;
            bool isAddPrefix = measureLength <= 1;
            if (isAddPrefix)
            {
                rawHours = "0" + rawHours;
            }
            string rawMinutes = minutes.ToString();
            measureLength = rawMinutes.Length;
            isAddPrefix = measureLength <= 1;
            if (isAddPrefix)
            {
                rawMinutes = "0" + rawMinutes;
            }
            string time = rawHours + ":" + rawMinutes;
            int day = currentDate.Day;
            string rawDay = day.ToString();
            List<string> monthLabels = new List<string>() {
                "января",
                "февраля",
                "марта",
                "апреля",
                "мая",
                "июня",
                "июля",
                "августа",
                "сентября",
                "октября",
                "ноября",
                "декабря"
            };
            int month = currentDate.Month;
            string rawMonthLabel = monthLabels[month];
            int year = currentDate.Year;
            string rawYear = year.ToString();
            string date = rawDay + " " + rawMonthLabel + " " + rawYear;
            statsHeaderLabel.Text = "СТАТИСТИКА Office Game Manager И ИГРОВАЯ СТАТИСТИКА: " + date + " В " + time;
            HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/stats/get");
            webRequest.Method = "GET";
            webRequest.UserAgent = ".NET Framework Test Client";
            using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
            {
                using (var reader = new StreamReader(webResponse.GetResponseStream()))
                {
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    var objText = reader.ReadToEnd();

                    GamesStatsResponseInfo myobj = (GamesStatsResponseInfo)js.Deserialize(objText, typeof(GamesStatsResponseInfo));

                    string status = myobj.status;
                    bool isOkStatus = status == "OK";
                    if (isOkStatus)
                    {
                        int countUsers = myobj.users;
                        int countMaxUsers = myobj.maxUsers;
                        YearlyDiscount yearlyDiscount = myobj.yearlyDiscount;
                        string rawCountUsers = countUsers.ToString();
                        string rawCountMaxUsers = countMaxUsers.ToString();
                        countLifeUsersLabel.Text = rawCountUsers;
                        countMaxUsersLabel.Text = rawCountMaxUsers;
                        string yearlyDiscountStart = yearlyDiscount.start;
                        string yearlyDiscountEnd = yearlyDiscount.end;
                        bool isStartDateExists = yearlyDiscountStart != null;
                        bool isEndDateExists = yearlyDiscountEnd != null;
                        bool isDatesExists = isStartDateExists && isEndDateExists;
                        if (isDatesExists)
                        {
                            DateTime currentDateTime = DateTime.Now;
                            DateTime startDate = DateTime.Parse(yearlyDiscountStart);
                            TimeSpan firstInterval = currentDateTime.Subtract(startDate);
                            double firstIntervalInDays = firstInterval.TotalDays;
                            bool isDiscountStarted = firstIntervalInDays >= 0;
                            DateTime endDate = DateTime.Parse(yearlyDiscountEnd);
                            TimeSpan secondInterval = currentDateTime.Subtract(endDate);
                            double secondIntervalInDays = secondInterval.TotalDays;
                            bool isDiscountEnded = secondIntervalInDays >= 0;
                            bool isDiscountNotEnded = !isDiscountEnded;
                            if (isDiscountStarted && isDiscountNotEnded)
                            {
                                isYearlyDiscount = true;
                            }
                            Debugger.Log(0, "debug", Environment.NewLine + "currentDateTime: " + currentDateTime.ToLongDateString() + Environment.NewLine);
                            Debugger.Log(0, "debug", Environment.NewLine + "startDate: " + startDate.ToLongDateString() + Environment.NewLine);
                            Debugger.Log(0, "debug", Environment.NewLine + "endDate: " + endDate.ToLongDateString() + Environment.NewLine);
                            Debugger.Log(0, "debug", Environment.NewLine + "isDiscountStarted: " + isDiscountStarted.ToString() + Environment.NewLine);
                            Debugger.Log(0, "debug", Environment.NewLine + "isDiscountNotEnded: " + isDiscountNotEnded.ToString() + Environment.NewLine);
                        }
                    }
                }
            }

            try
            {
                webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            UIElementCollection items = popularGames.Children;
                            int countItems = items.Count;
                            bool isGamesExists = countItems >= 4;
                            if (isGamesExists)
                            {
                                items = popularGames.Children;
                                countItems = items.Count;
                                int countRemovedItems = countItems - 3;
                                popularGames.Children.RemoveRange(3, countRemovedItems);
                            }
                            RowDefinitionCollection rows = popularGames.RowDefinitions;
                            int countRows = rows.Count;
                            isGamesExists = countRows >= 2;
                            if (isGamesExists)
                            {
                                rows = popularGames.RowDefinitions;
                                countRows = rows.Count;
                                int countRemovedRows = countRows - 1;
                                popularGames.RowDefinitions.RemoveRange(1, countRemovedRows);
                            }
                            foreach (GameResponseInfo gamesItem in myobj.games)
                            {
                                int gameUsers = gamesItem.users;
                                string rawGameUsers = gameUsers.ToString();
                                int gameMaxUsers = gamesItem.maxUsers;
                                string rawGameMaxUsers = gameMaxUsers.ToString();
                                string gameName = gamesItem.name;
                                RowDefinition row = new RowDefinition();
                                row.Height = new GridLength(35);
                                popularGames.RowDefinitions.Add(row);
                                countRows = popularGames.RowDefinitions.Count;
                                int gameIndex = countRows - 1;
                                TextBlock popularGameUsersLabel = new TextBlock();
                                popularGameUsersLabel.Text = rawGameUsers;
                                popularGames.Children.Add(popularGameUsersLabel);
                                Grid.SetRow(popularGameUsersLabel, gameIndex);
                                Grid.SetColumn(popularGameUsersLabel, 0);
                                TextBlock popularGameMaxUsersLabel = new TextBlock();
                                popularGameMaxUsersLabel.Text = rawGameMaxUsers;
                                popularGames.Children.Add(popularGameMaxUsersLabel);
                                Grid.SetRow(popularGameMaxUsersLabel, gameIndex);
                                Grid.SetColumn(popularGameMaxUsersLabel, 1);
                                TextBlock popularGameNameLabel = new TextBlock();
                                popularGameNameLabel.Text = gameName;
                                popularGames.Children.Add(popularGameNameLabel);
                                Grid.SetRow(popularGameNameLabel, gameIndex);
                                Grid.SetColumn(popularGameNameLabel, 2);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void GetEditInfo()
        {

            editProfileAvatarImg.BeginInit();
            editProfileAvatarImg.Source = new BitmapImage(new Uri("http://localhost:4000/api/user/avatar/?id=" + currentUserId));
            editProfileAvatarImg.EndInit();

            JavaScriptSerializer js = new JavaScriptSerializer();

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        // js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> friendsIds = myobj.friends.Where<Friend>((Friend joint) =>
                            {
                                string userId = joint.user;
                                bool isMyFriend = userId == currentUserId;
                                return isMyFriend;
                            }).ToList<Friend>();
                            int countFriends = friendsIds.Count;
                            string rawCountFriends = countFriends.ToString();
                            countFriendsLabel.Text = rawCountFriends;
                            string currentUserName = currentUser.name;
                            string currentUserCountry = currentUser.country;
                            string currentUserAbout = currentUser.about;
                            userEditProfileNameLabel.Text = currentUserName;
                            userNameBox.Text = currentUserName;
                            ItemCollection userCountryBoxItems = userCountryBox.Items;
                            foreach (ComboBoxItem userCountryBoxItem in userCountryBoxItems)
                            {
                                object rawUserCountryBoxItemContent = userCountryBoxItem.Content;
                                string userCountryBoxItemContent = rawUserCountryBoxItemContent.ToString();
                                bool isUserCountry = userCountryBoxItemContent == currentUserCountry;
                                if (isUserCountry)
                                {
                                    userCountryBox.SelectedIndex = userCountryBox.Items.IndexOf(userCountryBoxItem);
                                }
                            }
                            userAboutBox.Text = currentUserAbout;

                            userProfileEditAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            string themeName = currentSettings.profileTheme;
            foreach (StackPanel profileTheme in profileThemes.Children)
            {
                object rawProfileThemeName = profileTheme.DataContext;
                string profileThemeName = rawProfileThemeName.ToString();
                bool isThemeFound = profileThemeName == themeName;
                if (isThemeFound)
                {
                    SelectProfileTheme(themeName, profileTheme);
                    break;
                }
            }

            try
            {
                // HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string friendsListSettings = user.friendsListSettings;
                            string gamesSettings = user.gamesSettings;
                            string equipmentSettings = user.equipmentSettings;
                            string commentsSettings = user.commentsSettings;
                            bool isPublic = friendsListSettings == "public";
                            bool isFriends = friendsListSettings == "friends";
                            bool isHidden = friendsListSettings == "hidden";
                            if (isPublic)
                            {
                                userFriendsSettingsSelector.SelectedIndex = 0;
                            }
                            else if (isFriends)
                            {
                                userFriendsSettingsSelector.SelectedIndex = 1;
                            }
                            else if (isHidden)
                            {
                                userFriendsSettingsSelector.SelectedIndex = 2;
                            }
                            isPublic = gamesSettings == "public";
                            isFriends = gamesSettings == "friends";
                            isHidden = gamesSettings == "hidden";
                            if (isPublic)
                            {
                                userGamesSettingsSelector.SelectedIndex = 0;
                            }
                            else if (isFriends)
                            {
                                userGamesSettingsSelector.SelectedIndex = 1;
                            }
                            else if (isHidden)
                            {
                                userGamesSettingsSelector.SelectedIndex = 2;
                            }
                            isPublic = equipmentSettings == "public";
                            isFriends = equipmentSettings == "friends";
                            isHidden = equipmentSettings == "hidden";
                            if (isPublic)
                            {
                                userEquipmentSettingsSelector.SelectedIndex = 0;
                            }
                            else if (isFriends)
                            {
                                userEquipmentSettingsSelector.SelectedIndex = 1;
                            }
                            else if (isHidden)
                            {
                                userEquipmentSettingsSelector.SelectedIndex = 2;
                            }
                            isPublic = commentsSettings == "public";
                            isFriends = commentsSettings == "friends";
                            isHidden = commentsSettings == "hidden";
                            if (isPublic)
                            {
                                userCommentsSettingsSelector.SelectedIndex = 0;
                            }
                            else if (isFriends)
                            {
                                userCommentsSettingsSelector.SelectedIndex = 1;
                            }
                            else if (isHidden)
                            {
                                userCommentsSettingsSelector.SelectedIndex = 2;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void GetGamesInfo()
        {

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            JavaScriptSerializer js = new JavaScriptSerializer();
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> myGames = loadedContent.games;
            gamesInfo.Children.Clear();
            foreach (Game myGame in myGames)
            {
                string myGameName = myGame.name;
                string myGameHours = myGame.hours;
                string myGameLastLaunchDate = myGame.date;
                DockPanel gameStats = new DockPanel();
                gameStats.Margin = new Thickness(0, 25, 0, 25);
                gameStats.Height = 150;
                gameStats.Background = System.Windows.Media.Brushes.DarkGray;
                Image gameStatsImg = new Image();
                gameStatsImg.Width = 125;
                gameStatsImg.Height = 125;
                gameStatsImg.Margin = new Thickness(10);

                gameStatsImg.Source = new BitmapImage(new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                // gameStatsImg.Source = new BitmapImage(new Uri("http://localhost:4000/api/game/thumbnail/?name=" + myGameName));

                gameStats.Children.Add(gameStatsImg);
                TextBlock gameStatsNameLabel = new TextBlock();
                gameStatsNameLabel.Margin = new Thickness(10);
                gameStatsNameLabel.FontSize = 18;
                gameStatsNameLabel.Text = myGameName;
                gameStats.Children.Add(gameStatsNameLabel);
                StackPanel gameStatsInfo = new StackPanel();
                gameStatsInfo.Margin = new Thickness(10);
                gameStatsInfo.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;
                gameStatsInfo.HorizontalAlignment = System.Windows.HorizontalAlignment.Right;
                TextBlock gameStatsInfoHoursLabel = new TextBlock();
                gameStatsInfoHoursLabel.Margin = new Thickness(0, 5, 0, 5);
                string totalHoursLabelContent = Properties.Resources.totalHoursLabelContent;
                string gameStatsInfoHoursLabelContent = myGameHours + " " + totalHoursLabelContent;
                gameStatsInfoHoursLabel.Text = gameStatsInfoHoursLabelContent;
                gameStatsInfo.Children.Add(gameStatsInfoHoursLabel);
                TextBlock gameStatsInfoLastLaunchLabel = new TextBlock();
                gameStatsInfoLastLaunchLabel.Margin = new Thickness(0, 5, 0, 5);
                string lastLaunchLabelContent = Properties.Resources.lastLaunchLabelContent;
                string gameStatsInfoLastLaunchLabelContent = lastLaunchLabelContent + " " + myGameLastLaunchDate;
                gameStatsInfoLastLaunchLabel.Text = gameStatsInfoLastLaunchLabelContent;
                gameStatsInfo.Children.Add(gameStatsInfoLastLaunchLabel);
                gameStats.Children.Add(gameStatsInfo);
                gamesInfo.Children.Add(gameStats);
            }
        }

        public void GetUserInfo(string id, bool isLocalUser)
        {

            string gamesSettings = "public";
            string friendsSettings = "public";

            JavaScriptSerializer js = new JavaScriptSerializer();
            if (isLocalUser)
            {
                Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                List<Game> myGames = loadedContent.games;

                Settings mySettings = loadedContent.settings;
                string profileTheme = mySettings.profileTheme;
                bool isDefaultTheme = profileTheme == "Default";
                bool isSummerTheme = profileTheme == "Summer";
                bool isMidnightTheme = profileTheme == "Midnight";
                bool isSteelTheme = profileTheme == "Steel";
                bool isSpaceTheme = profileTheme == "Space";
                bool isDarkTheme = profileTheme == "Dark";
                if (isDefaultTheme)
                {
                    profileThemeAside.Color = System.Windows.Media.Brushes.Blue.Color;
                }
                else if (isSummerTheme)
                {
                    profileThemeAside.Color = System.Windows.Media.Brushes.SandyBrown.Color;
                }
                else if (isMidnightTheme)
                {
                    profileThemeAside.Color = System.Windows.Media.Brushes.LightGray.Color;
                }
                else if (isSteelTheme)
                {
                    profileThemeAside.Color = System.Windows.Media.Brushes.DarkGray.Color;
                }
                else if (isSpaceTheme)
                {
                    profileThemeAside.Color = System.Windows.Media.Brushes.Violet.Color;
                }
                else if (isDarkTheme)
                {
                    profileThemeAside.Color = System.Windows.Media.Brushes.Black.Color;
                }

                int countGames = myGames.Count;
                string rawCountGames = countGames.ToString();
                countGamesLabel.Text = rawCountGames;
            }
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<Friend> friendsIds = myInnerObj.friends.Where<Friend>((Friend joint) =>
                                        {
                                            string userId = joint.user;
                                            bool isMyFriend = userId == id;
                                            return isMyFriend;
                                        }).ToList<Friend>();
                                        int countFriends = friendsIds.Count;
                                        string rawCountFriends = countFriends.ToString();
                                        countFriendsLabel.Text = rawCountFriends;
                                        string currentUserName = user.name;
                                        userProfileNameLabel.Text = currentUserName;
                                        string currentUserAbout = user.about;
                                        userProfileAboutLabel.Text = currentUserAbout;

                                        userProfileAvatar.BeginInit();
                                        Uri avatar = new Uri(@"http://localhost:4000/api/user/avatar/?id=" + id);
                                        userProfileAvatar.Source = new BitmapImage(avatar);
                                        userProfileAvatar.EndInit();


                                        gamesSettings = user.gamesSettings;
                                        friendsSettings = user.friendsListSettings;

                                        string onlineStatus = Properties.Resources.onlineLabelContent;
                                        string offlineStatus = Properties.Resources.offlineLabelContent;
                                        string userStatus = user.status;
                                        bool isOnline = userStatus == "online";
                                        bool isPlayed = userStatus == "played";
                                        bool isConnected = isOnline || isPlayed;
                                        if (isConnected)
                                        {
                                            userProfileStatusLabel.Text = onlineStatus;
                                            userProfileStatusLabel.Foreground = System.Windows.Media.Brushes.Cyan;
                                        }
                                        else
                                        {
                                            userProfileStatusLabel.Text = offlineStatus;
                                            userProfileStatusLabel.Foreground = System.Windows.Media.Brushes.LightGray;
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            Visibility reverseVisibility = Visibility.Collapsed;
            bool isOtherUser = !isLocalUser;
            if (isOtherUser)
            {
                openChatBtn.DataContext = id;
                reverseVisibility = Visibility.Visible;
            }
            else
            {
                reverseVisibility = Visibility.Collapsed;
            }
            otherUserBtns.Visibility = reverseVisibility;

            Visibility visibility = Visibility.Collapsed;
            if (isLocalUser)
            {
                visibility = Visibility.Visible;
            }
            else
            {
                visibility = Visibility.Collapsed;
            }
            editProfileBtn.Visibility = visibility;

            Visibility gamesVisibility = Visibility.Collapsed;
            bool isHiddenAccess = gamesSettings == "hidden";
            bool isNotHiddenAccess = !isHiddenAccess;
            bool isShowGames = isLocalUser || isNotHiddenAccess;
            if (isShowGames)
            {
                gamesVisibility = Visibility.Visible;
            }
            else
            {
                gamesVisibility = Visibility.Collapsed;
            }
            userProfileDetailsGames.Visibility = gamesVisibility;
            Visibility friendsVisibility = Visibility.Collapsed;
            isHiddenAccess = friendsSettings == "hidden";
            isNotHiddenAccess = !isHiddenAccess;
            bool isShowFriends = isLocalUser || isNotHiddenAccess;
            if (isShowGames)
            {
                friendsVisibility = Visibility.Visible;
            }
            else
            {
                friendsVisibility = Visibility.Collapsed;
            }
            userProfileDetailsFriends.Visibility = friendsVisibility;

            object currentUserProfileId = mainControl.DataContext;
            cachedUserProfileId = ((string)(currentUserProfileId));

            mainControl.DataContext = currentUserId;

            GetComments(cachedUserProfileId);

        }

        public void GetFriendRequests()
        {
            foreach (Popup friendRequest in friendRequests.Children)
            {
                friendRequest.IsOpen = false;
            }
            friendRequests.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendRequestsResponseInfo myobj = (FriendRequestsResponseInfo)js.Deserialize(objText, typeof(FriendRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<FriendRequest> myRequests = new List<FriendRequest>();
                            List<FriendRequest> requests = myobj.requests;
                            foreach (FriendRequest request in requests)
                            {
                                string recepientId = request.friend;
                                bool isRequestForMe = currentUserId == recepientId;
                                if (isRequestForMe)
                                {
                                    myRequests.Add(request);
                                }
                            }
                            foreach (FriendRequest myRequest in myRequests)
                            {
                                string senderId = myRequest.user;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + senderId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            User user = myInnerObj.user;
                                            string senderLogin = user.login;
                                            Popup friendRequest = new Popup();
                                            friendRequest.Placement = PlacementMode.Custom;
                                            friendRequest.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                            friendRequest.PlacementTarget = this;
                                            friendRequest.Width = 225;
                                            friendRequest.Height = 275;
                                            StackPanel friendRequestBody = new StackPanel();
                                            friendRequestBody.Background = friendRequestBackground;
                                            PackIcon closeRequestBtn = new PackIcon();
                                            closeRequestBtn.Margin = new Thickness(10);
                                            closeRequestBtn.Kind = PackIconKind.Close;
                                            closeRequestBtn.DataContext = friendRequest;
                                            closeRequestBtn.MouseLeftButtonUp += CloseFriendRequestHandler;
                                            friendRequestBody.Children.Add(closeRequestBtn);
                                            Image friendRequestBodySenderAvatar = new Image();
                                            friendRequestBodySenderAvatar.Width = 100;
                                            friendRequestBodySenderAvatar.Height = 100;
                                            friendRequestBodySenderAvatar.BeginInit();
                                            Uri friendRequestBodySenderAvatarUri = new Uri("http://localhost:4000/api/user/avatar/?id=" + senderId);
                                            BitmapImage friendRequestBodySenderAvatarImg = new BitmapImage(friendRequestBodySenderAvatarUri);
                                            friendRequestBodySenderAvatar.Source = friendRequestBodySenderAvatarImg;
                                            friendRequestBodySenderAvatar.EndInit();
                                            friendRequestBodySenderAvatar.ImageFailed += SetDefautAvatarHandler;
                                            friendRequestBody.Children.Add(friendRequestBodySenderAvatar);
                                            TextBlock friendRequestBodySenderLoginLabel = new TextBlock();
                                            friendRequestBodySenderLoginLabel.Margin = new Thickness(10);
                                            friendRequestBodySenderLoginLabel.Text = senderLogin;
                                            friendRequestBody.Children.Add(friendRequestBodySenderLoginLabel);
                                            StackPanel friendRequestBodyActions = new StackPanel();
                                            friendRequestBodyActions.Orientation = Orientation.Horizontal;
                                            Button acceptActionBtn = new Button();
                                            acceptActionBtn.Margin = new Thickness(10, 5, 10, 5);
                                            acceptActionBtn.Height = 25;
                                            acceptActionBtn.Width = 65;
                                            acceptActionBtn.Content = "Принять";
                                            string myNewFriendId = myRequest.user;
                                            string myRequestId = myRequest._id;
                                            Dictionary<String, Object> acceptActionBtnData = new Dictionary<String, Object>();
                                            acceptActionBtnData.Add("friendId", ((string)(myNewFriendId)));
                                            acceptActionBtnData.Add("requestId", ((string)(myRequestId)));
                                            acceptActionBtnData.Add("request", ((Popup)(friendRequest)));
                                            acceptActionBtn.DataContext = acceptActionBtnData;
                                            acceptActionBtn.Click += AcceptFriendRequestHandler;
                                            friendRequestBodyActions.Children.Add(acceptActionBtn);
                                            Button rejectActionBtn = new Button();
                                            rejectActionBtn.Margin = new Thickness(10, 5, 10, 5);
                                            rejectActionBtn.Height = 25;
                                            rejectActionBtn.Width = 65;
                                            rejectActionBtn.Content = "Отклонить";
                                            Dictionary<String, Object> rejectActionBtnData = new Dictionary<String, Object>();
                                            rejectActionBtnData.Add("friendId", ((string)(myNewFriendId)));
                                            rejectActionBtnData.Add("requestId", ((string)(myRequestId)));
                                            rejectActionBtnData.Add("request", ((Popup)(friendRequest)));
                                            rejectActionBtn.DataContext = rejectActionBtnData;
                                            rejectActionBtn.Click += RejectFriendRequestHandler;
                                            friendRequestBodyActions.Children.Add(rejectActionBtn);
                                            friendRequestBody.Children.Add(friendRequestBodyActions);
                                            friendRequest.Child = friendRequestBody;
                                            friendRequests.Children.Add(friendRequest);
                                            friendRequest.IsOpen = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            CloseManager();
                        }

                    }
                }
            }
            catch (System.Net.WebException exception)
            {
                Debugger.Log(0, "debug", "friend requests: " + exception.Message);
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public bool GetUser (string userId)
        {

            bool result = false;

            currentUserId = userId;
            System.Diagnostics.Debugger.Log(0, "debug", "userId: " + userId + Environment.NewLine);
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            currentUser = myobj.user;
                            bool isUserExists = currentUser != null;
                            if (isUserExists)
                            {
                                string userName = currentUser.name;
                                ItemCollection userMenuItems = userMenu.Items;
                                ComboBoxItem userLoginLabel = ((ComboBoxItem)(userMenuItems[0]));
                                userLoginLabel.Content = userName;
                                ItemCollection profileMenuItems = profileMenu.Items;
                                object rawMainProfileMenuItem = profileMenuItems[0];
                                ComboBoxItem mainProfileMenuItem = ((ComboBoxItem)(rawMainProfileMenuItem));
                                mainProfileMenuItem.Content = userName;
                                InitCache(userId);
                                result = true;
                            }
                            else
                            {
                                CloseManager();
                            }
                        }
                        else
                        {
                            CloseManager();
                        }

                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            return result;

        }

        public void CloseManager ()
        {
            MessageBox.Show("Не удалось подключиться", "Ошибка");
            this.Close();
        }

        public void InitConstants()
        {
            visible = Visibility.Visible;
            invisible = Visibility.Collapsed;
            friendRequestBackground = System.Windows.Media.Brushes.AliceBlue;
            disabledColor = System.Windows.Media.Brushes.LightGray;
            enabledColor = System.Windows.Media.Brushes.Black;
            history = new List<int>();
        }

        public void LoadStartWindow()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            Settings currentSettings = loadedContent.settings;
            int currentStartWindow = currentSettings.startWindow;

            mainControl.SelectedIndex = currentStartWindow;
            AddHistoryRecord();
            arrowBackBtn.Foreground = disabledColor;
            arrowForwardBtn.Foreground = disabledColor;

        }

        public void GetGamesList (string keywords)
        {

            System.Windows.Media.Brush sortGamesByRecentActivityIconFill = sortGamesByRecentActivityIcon.Foreground;
            bool isSortByRecentActivityEnabled = sortGamesByRecentActivityIconFill == System.Windows.Media.Brushes.SkyBlue;
            System.Windows.Media.Brush sortGamesByReady2GoIconFill = sortGamesByReady2GoIcon.Foreground;
            bool isSortByReady2GoEnabled = sortGamesByReady2GoIconFill == System.Windows.Media.Brushes.SkyBlue;

            int gamesListCursor = 0;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string responseStatus = myobj.status;
                        bool isOKStatus = responseStatus == "OK";
                        if (isOKStatus)
                        {

                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            List<string> currentCollections = loadedContent.collections;
                            List<Game> currentGames = loadedContent.games;

                            games.Children.Clear();
                            List<GameResponseInfo> loadedGames = myobj.games;
                            loadedGames = loadedGames.Where<GameResponseInfo>((GameResponseInfo gameInfo) =>
                            {
                                int keywordsLength = keywords.Length;
                                bool isKeywordsSetted = keywordsLength >= 1;
                                bool isKeywordsNotSetted = !isKeywordsSetted;
                                string gameName = gameInfo.name;
                                string ignoreCaseKeywords = keywords.ToLower();
                                string ignoreCaseGameName = gameName.ToLower();
                                bool isGameNameMatch = ignoreCaseGameName.Contains(ignoreCaseKeywords);
                                bool isSearchEnabled = isKeywordsSetted && isGameNameMatch;
                                bool isGameMatch = isSearchEnabled || isKeywordsNotSetted;
                                return isGameMatch;
                            }).ToList<GameResponseInfo>();
                            int countLoadedGames = loadedGames.Count;

                            // bool isGamesExists = countLoadedGames >= 1;
                            bool isGamesExists = myobj.games.Count >= 1;
                            if (isGamesExists)
                            {
                                
                                activeGame.Visibility = visible;
                                ads.Visibility = invisible;


                                foreach (GameResponseInfo gamesListItem in loadedGames)
                                // foreach (GameResponseInfo gamesListItem in myobj.games)
                                {

                                    string gamesListItemName = gamesListItem.name;

                                    List<Game> results = currentGames.Where<Game>((Game game) =>
                                    {
                                        return game.name == gamesListItemName;
                                    }).ToList<Game>();
                                    int countResults = results.Count;
                                    bool isHaveResults = countResults >= 1;
                                    bool isShowGame = true;
                                    DateTime gameActivityDate = DateTime.Now;
                                    string rawGameActivityDate = gameActivityDate.ToLongDateString();
                                    Game result = null;
                                    if (isHaveResults)
                                    {
                                        result = results[0];
                                        bool isHidden = result.isHidden;
                                        string gameDate = result.date;
                                        isShowGame = !isHidden;
                                        rawGameActivityDate = gameDate;
                                    }
                                    if (isShowGame)
                                    {

                                        List<Game> gameSearchResults = currentGames.Where<Game>((Game game) =>
                                        {
                                            string gameName = game.name;
                                            bool isGameFound = gameName == gamesListItemName;
                                            return isGameFound;
                                        }).ToList<Game>();
                                        int countGameSearchResults = gameSearchResults.Count;
                                        bool isGameInstalled = countGameSearchResults >= 1;
                                        bool isGameNotInstalled = !isGameInstalled;
                                        bool isSortByReady2GoDisabled = !isSortByReady2GoEnabled;

                                        object rawKeywordsLabelFilterPopupLocalInstalledCheckBoxIsChecked = keywordsLabelFilterPopupLocalInstalledCheckBox.IsChecked;
                                        bool keywordsLabelFilterPopupLocalInstalledCheckBoxIsChecked = ((bool)(rawKeywordsLabelFilterPopupLocalInstalledCheckBoxIsChecked));
                                        object rawKeywordsLabelFilterPopupReady2GoCheckBoxIsChecked = keywordsLabelFilterPopupReady2GoCheckBox.IsChecked;
                                        bool keywordsLabelFilterPopupReady2GoCheckBoxIsChecked = ((bool)(rawKeywordsLabelFilterPopupReady2GoCheckBoxIsChecked));
                                        bool keywordsLabelFilterPopupLocalInstalledCheckBoxIsNotChecked = !keywordsLabelFilterPopupLocalInstalledCheckBoxIsChecked;
                                        bool keywordsLabelFilterPopupReady2GoCheckBoxIsNotChecked = !keywordsLabelFilterPopupReady2GoCheckBoxIsChecked;

                                        bool isSortByReady2Go = ((isSortByReady2GoEnabled && isGameInstalled) || isSortByReady2GoDisabled);
                                        // bool isSortByReady2Go = ((isSortByReady2GoEnabled || keywordsLabelFilterPopupLocalInstalledCheckBoxIsChecked || keywordsLabelFilterPopupReady2GoCheckBoxIsChecked) && isGameInstalled) || (isSortByReady2GoDisabled && keywordsLabelFilterPopupLocalInstalledCheckBoxIsNotChecked && keywordsLabelFilterPopupReady2GoCheckBoxIsChecked);
                                        if (isSortByReady2Go)
                                        {

                                            gamesListCursor++;

                                            if (isSortByRecentActivityEnabled)
                                            {
                                                StackPanel category = new StackPanel();
                                                category.Orientation = Orientation.Horizontal;
                                                TextBlock categoryLabel = new TextBlock();
                                                string rawGamesListCursor = gamesListCursor.ToString();
                                                string categoryLabelContent = rawGameActivityDate;
                                                categoryLabel.Text = categoryLabelContent;
                                                categoryLabel.Margin = new Thickness(10, 5, 5, 5);
                                                category.Children.Add(categoryLabel);
                                                games.Children.Add(category);
                                            }

                                            StackPanel newGame = new StackPanel();
                                            newGame.MouseLeftButtonUp += SelectGameHandler;
                                            newGame.Orientation = Orientation.Horizontal;
                                            newGame.Height = 35;
                                            string gamesListItemId = gamesListItem._id;
                                            Debugger.Log(0, "debug", Environment.NewLine + "gamesListItemId: " + gamesListItemId + Environment.NewLine);
                                            string gamesListItemUrl = @"http://localhost:4000/api/game/distributive/?name=" + gamesListItemName;
                                            string gamesListItemImage = @"http://localhost:4000/api/game/thumbnail/?name=" + gamesListItemName;
                                            int gamesListItemPrice = gamesListItem.price;
                                            if (isYearlyDiscount)
                                            {
                                                gamesListItemPrice /= 2;
                                            }

                                            Dictionary<String, Object> newGameData = new Dictionary<String, Object>();
                                            newGameData.Add("id", gamesListItemId);
                                            newGameData.Add("name", gamesListItemName);
                                            newGameData.Add("url", gamesListItemUrl);
                                            newGameData.Add("image", gamesListItemImage);
                                            newGameData.Add("price", gamesListItemPrice);
                                            newGame.DataContext = newGameData;
                                            Image newGamePhoto = new Image();
                                            newGamePhoto.Margin = new Thickness(25, 5, 5, 5);
                                            newGamePhoto.Width = 25;
                                            newGamePhoto.Height = 25;
                                            newGamePhoto.BeginInit();
                                            Uri newGamePhotoUri = new Uri(gamesListItemImage);
                                            newGamePhoto.Source = new BitmapImage(newGamePhotoUri);
                                            newGamePhoto.EndInit();
                                            newGame.Children.Add(newGamePhoto);
                                            newGamePhoto.ImageFailed += SetDefaultThumbnailHandler;
                                            TextBlock newGameLabel = new TextBlock();
                                            newGameLabel.Margin = new Thickness(5);
                                            newGameLabel.Text = gamesListItem.name;
                                            newGame.Children.Add(newGameLabel);
                                            games.Children.Add(newGame);

                                            /*List<Game> gameSearchResults = currentGames.Where<Game>((Game game) =>
                                            {
                                                string gameName = game.name;
                                                bool isGameFound = gameName == gamesListItemName;
                                                return isGameFound;
                                            }).ToList<Game>();
                                            int countGameSearchResults = gameSearchResults.Count;
                                            bool isGameInstalled = countGameSearchResults >= 1;
                                            bool isGameNotInstalled = !isGameInstalled;*/

                                            if (isGameInstalled)
                                            {

                                                ContextMenu newGameContextMenu = new ContextMenu();

                                                MenuItem newGameContextMenuItem = new MenuItem();
                                                newGameContextMenuItem.Header = "Играть";
                                                newGameContextMenuItem.DataContext = gamesListItemName;
                                                newGameContextMenuItem.Click += RunGameHandler;
                                                newGameContextMenu.Items.Add(newGameContextMenuItem);

                                                newGameContextMenuItem = new MenuItem();
                                                newGameContextMenuItem.Header = "Добавить в коллекцию";

                                                newGameContextMenu.Items.Add(newGameContextMenuItem);
                                                foreach (string collectionName in currentCollections)
                                                {
                                                    MenuItem newGameInnerContextMenuItem = new MenuItem();
                                                    List<string> resultCollections = new List<string>();
                                                    if (isHaveResults)
                                                    {
                                                        resultCollections = result.collections;
                                                    }
                                                    bool isAlreadyInCollection = resultCollections.Contains(collectionName);
                                                    if (isAlreadyInCollection)
                                                    {
                                                        newGameInnerContextMenuItem.IsEnabled = false;
                                                    }

                                                    newGameInnerContextMenuItem.Header = collectionName;
                                                    Dictionary<String, Object> newGameInnerContextMenuItemData = new Dictionary<String, Object>();
                                                    newGameInnerContextMenuItemData.Add("collection", collectionName);
                                                    newGameInnerContextMenuItemData.Add("name", gamesListItemName);
                                                    newGameInnerContextMenuItem.DataContext = newGameInnerContextMenuItemData;
                                                    newGameInnerContextMenuItem.Click += AddGameToCollectionHandler;
                                                    newGameContextMenuItem.Items.Add(newGameInnerContextMenuItem);
                                                }

                                                /*MenuItem gameCollectionItemNestedContextMenuItem = new MenuItem();
                                                gameCollectionItemNestedContextMenuItem.Header = "Удалить с утройства";
                                                Dictionary<String, Object> gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemNestedContextMenuItemData.Add("game", gamesListItemName);
                                                gameCollectionItemNestedContextMenuItemData.Add("collection", "");
                                                gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                                                gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                                                newGameContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);*/

                                                newGameContextMenuItem = new MenuItem();
                                                string gameCollectionItemContextMenuItemHeaderContent = "Убрать из ";
                                                newGameContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;
                                                MenuItem newGameNestedContextMenuItem;
                                                Dictionary<String, Object> newGameNestedContextMenuItemData;
                                                foreach (string hiddenGameCollection in result.collections)
                                                {
                                                    newGameNestedContextMenuItem = new MenuItem();
                                                    newGameNestedContextMenuItem.Header = hiddenGameCollection;
                                                    newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                                                    newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                                                    newGameNestedContextMenuItemData.Add("collection", hiddenGameCollection);
                                                    newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                                                    newGameNestedContextMenuItem.Click += RemoveGameFromCollectionHandler;
                                                    newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);
                                                }
                                                newGameContextMenu.Items.Add(newGameContextMenuItem);

                                                newGameContextMenuItem = new MenuItem();
                                                newGameContextMenuItem.Header = "Управление";

                                                newGameNestedContextMenuItem = new MenuItem();
                                                newGameNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                                                newGameNestedContextMenuItem.DataContext = gamesListItemName;
                                                newGameNestedContextMenuItem.Click += CreateShortcutHandler;
                                                newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                                                newGameNestedContextMenuItem = new MenuItem();
                                                bool IsCoverSet = result.cover != "";
                                                if (IsCoverSet)
                                                {
                                                    newGameNestedContextMenuItem.Header = "Удалить свою обложку";
                                                }
                                                else
                                                {
                                                    newGameNestedContextMenuItem.Header = "Задать свою обложку";
                                                }
                                                newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                                                newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                                                newGameNestedContextMenuItemData.Add("collection", "");
                                                newGameNestedContextMenuItemData.Add("cover", result.cover);
                                                newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                                                newGameNestedContextMenuItem.Click += ToggleGameCoverHandler;
                                                newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                                                newGameNestedContextMenuItem = new MenuItem();
                                                newGameNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                                                newGameNestedContextMenuItem.DataContext = gamesListItemName;
                                                newGameNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                                                newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                                                newGameNestedContextMenuItem = new MenuItem();
                                                bool isHiddenGame = result.isHidden;
                                                if (isHiddenGame)
                                                {
                                                    newGameNestedContextMenuItem.Header = "Убрать из скрытого";
                                                }
                                                else
                                                {
                                                    newGameNestedContextMenuItem.Header = "Скрыть игру";
                                                }

                                                newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                                                newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                                                newGameNestedContextMenuItemData.Add("collection", "");
                                                newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                                                newGameNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                                                newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);

                                                newGameNestedContextMenuItem = new MenuItem();
                                                newGameNestedContextMenuItem.Header = "Удалить с утройства";
                                                newGameNestedContextMenuItemData = new Dictionary<String, Object>();
                                                newGameNestedContextMenuItemData.Add("game", gamesListItemName);
                                                newGameNestedContextMenuItemData.Add("collection", "");
                                                newGameNestedContextMenuItem.DataContext = newGameNestedContextMenuItemData;
                                                newGameNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                                                newGameContextMenuItem.Items.Add(newGameNestedContextMenuItem);
                                                newGameContextMenu.Items.Add(newGameContextMenuItem);

                                                string currentGameId = result.id;
                                                newGameContextMenuItem = new MenuItem();
                                                newGameContextMenuItem.Header = "Свойства";
                                                Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                                                gameCollectionItemContextMenuItemData.Add("game", gamesListItemName);
                                                bool isCustomGame = currentGameId == "mockId";
                                                gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                                                newGameContextMenuItem.DataContext = gameCollectionItemContextMenuItemData;
                                                newGameContextMenuItem.Click += OpenGameSettingsHandler;
                                                newGameContextMenu.Items.Add(newGameContextMenuItem);

                                                newGame.ContextMenu = newGameContextMenu;
                                            }
                                        }
                                    }
                                }

                                bool isNotGames = gamesListCursor <= 0;
                                if (isNotGames)
                                {
                                    StackPanel notFound = new StackPanel();
                                    notFound.Margin = new Thickness(15);
                                    TextBlock notFoundHeaderLabel = new TextBlock();
                                    notFoundHeaderLabel.Text = "Не нашли то, что искали?";
                                    notFoundHeaderLabel.TextAlignment = TextAlignment.Center;
                                    notFound.Children.Add(notFoundHeaderLabel);
                                    TextBlock notFoundFooterLabel = new TextBlock();
                                    notFoundFooterLabel.Text = "Поищите в магазине";
                                    notFoundFooterLabel.TextAlignment = TextAlignment.Center;
                                    notFoundFooterLabel.FontSize = 14;
                                    notFoundFooterLabel.TextDecorations = TextDecorations.Underline;
                                    notFoundFooterLabel.MouseLeftButtonUp += OpenStoreSearchHandler;
                                    notFound.Children.Add(notFoundFooterLabel);
                                    games.Children.Add(notFound);
                                }
                                else
                                {
                                    bool isSortByRecentActivityDisabled = !isSortByRecentActivityEnabled;
                                    if (isSortByRecentActivityDisabled)
                                    {
                                        StackPanel category = new StackPanel();
                                        category.Orientation = Orientation.Horizontal;
                                        TextBlock categoryLabel = new TextBlock();
                                        string rawGamesListCursor = gamesListCursor.ToString();
                                        string categoryLabelContent = "Все (" + rawGamesListCursor + ")";
                                        categoryLabel.Text = categoryLabelContent;
                                        categoryLabel.Margin = new Thickness(10, 5, 5, 5);
                                        category.Children.Add(categoryLabel);
                                        games.Children.Insert(0, category);
                                    }
                                }

                                List<Game> displayedGames = currentGames.Where<Game>((Game game) =>
                                {
                                    bool isHidden = game.isHidden;
                                    bool isDisplayed = !isHidden;
                                    return isDisplayed;
                                }).ToList<Game>();
                                int countdisplayedGames = displayedGames.Count;
                                bool isHaveDisplayedGames = countdisplayedGames >= 1;
                                if (isHaveDisplayedGames)
                                {

                                    Game displayedGame = displayedGames[0];
                                    string displayedGameName = displayedGame.name;
                                    int index = loadedGames.FindIndex((GameResponseInfo game) =>
                                    {
                                        string gameName = game.name;
                                        bool isGameFound = gameName == displayedGameName;
                                        return isGameFound;
                                    });
                                    bool isFound = index >= 0;
                                    if (isFound)
                                    {
                                        GameResponseInfo crossGame = loadedGames[index];

                                        // GameResponseInfo firstGame = loadedGames[0];
                                        // GameResponseInfo firstGame = myobj.games[0];
                                        GameResponseInfo firstGame = crossGame;
                                        Dictionary<String, Object> firstGameData = new Dictionary<String, Object>();
                                        string firstGameId = firstGame._id;
                                        string firstGameName = firstGame.name;
                                        /*string firstGameUrl = firstGame.url;
                                        string firstGameImage = firstGame.image;*/
                                        string firstGameUrl = @"http://localhost:4000/api/game/distributive/?name=" + firstGameName;
                                        string firstGameImage = @"http://localhost:4000/api/game/thumbnail/?name=" + firstGameName;
                                        int firstGamePrice = firstGame.price;
                                        Debugger.Log(0, "debug", Environment.NewLine + "firstGameId: " + firstGameId + Environment.NewLine);
                                        firstGameData.Add("id", firstGameId);
                                        firstGameData.Add("name", firstGameName);
                                        firstGameData.Add("url", firstGameUrl);
                                        firstGameData.Add("image", firstGameImage);
                                        firstGameData.Add("price", firstGamePrice);
                                        SelectGame(firstGameData);
                                    }
                                    else
                                    {
                    
                                        activeGame.Visibility = invisible;
                                        ads.Visibility = visible;

                                    }
                                }
                                else
                                {
                                    
                                    activeGame.Visibility = invisible;
                                    ads.Visibility = visible;
                                
                                }
                            }
                            else
                            {
                            
                                activeGame.Visibility = invisible;
                                ads.Visibility = visible;
                            
                            }
                        }
                    }
                }
            }
            catch
            {

            }
            GetLocalGames(keywords);

        }

        public void HideStoreSearchFiltersItemHandler (object sender, RoutedEventArgs e)
        {
            StackPanel item = ((StackPanel)(sender));
            HideStoreSearchFiltersItem(item);
        }


        public void HideStoreSearchFiltersItem (StackPanel item)
        {
            DependencyObject itemParent = item.Parent;
            StackPanel filterItem = ((StackPanel)(itemParent));
            UIElement rawFilterItemBody = filterItem.Children[1];
            StackPanel filterItemBody = ((StackPanel)(rawFilterItemBody));
            Visibility filterItemBodyVisibility = filterItemBody.Visibility;
            if (filterItemBodyVisibility == invisible)
            {
                filterItemBody.Visibility = visible;
            }
            else
            {
                filterItemBody.Visibility = invisible;
            }
        }

        public void DragGameToCollectionHandler(object sender, MouseEventArgs e)
        {
            StackPanel someGame = ((StackPanel)(sender));
            bool isLeftMouseBtnPressed = e.LeftButton == MouseButtonState.Pressed;
            if (isLeftMouseBtnPressed)
            {

            }
        }

        public void AddGameToCollectionHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            AddGameToCollection(menuItemData);
        }

        public void AddGameToCollection(Dictionary<String, Object> data)
        {
            string collection = ((string)(data["collection"]));
            string name = ((string)(data["name"]));
            Debugger.Log(0, "debug", Environment.NewLine + "collection: " + collection + ", name: " + name + Environment.NewLine);
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            List<Game> results = updatedGames.Where<Game>((Game game) =>
            {
                return game.name == name;
            }).ToList<Game>();
            int resultsCount = results.Count;
            bool isFound = resultsCount >= 1;
            if (isFound)
            {
                Game result = results[0];
                result.collections.Add(collection);
                saveDataFileContent = js.Serialize(new SavedContent()
                {
                    games = updatedGames,
                    friends = currentFriends,
                    settings = currentSettings,
                    collections = currentCollections,
                    notifications = currentNotifications,
                    categories = currentCategories,
                    recentChats = currentRecentChats,
                    recommendations = currentRecommendations,
                    logoutDate = currentLogoutDate,
                    sections = currentSections
                });
                File.WriteAllText(saveDataFilePath, saveDataFileContent);
                GetGameCollections();
                GetGamesList("");
                GetGameCollectionItems(collection);
                GetHiddenGames();
            }
        }


        public void InitCache(string id)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string userFolder = "";
            int idLength = id.Length;
            bool isIdExists = idLength >= 1;
            if (isIdExists)
            {
                userFolder = id + @"\";
            }
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + userFolder + "save-data.txt";
            string cachePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + id;

            string cacheGamesPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + id + @"\games";
            string cacheScreenShotsPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + id + @"\screenshots";

            bool isCacheFolderExists = Directory.Exists(cachePath);
            bool isCacheFolderNotExists = !isCacheFolderExists;
            if (isCacheFolderNotExists)
            {
                Directory.CreateDirectory(cachePath);
                using (Stream s = File.Open(saveDataFilePath, FileMode.OpenOrCreate))
                {
                    using (StreamWriter sw = new StreamWriter(s))
                    {
                        sw.Write("");
                    }
                };
                JavaScriptSerializer js = new JavaScriptSerializer();
                DateTime currentDate = DateTime.Now;
                string rawLogoutDate = currentDate.ToString("F");
                string savedContent = js.Serialize(new SavedContent
                {
                    games = new List<Game>(),
                    friends = new List<FriendSettings>(),
                    settings = new Settings()
                    {
                        language = "ru-RU",
                        startWindow = 0,
                        overlayHotKey = "Shift + Tab",
                        music = new MusicSettings()
                        {
                            paths = new List<string>(),
                            volume = 100
                        },
                        profileTheme = "Default",
                        screenShotsHotKey = "Shift + S",
                        frames = "Disabled",
                        showScreenShotsNotification = true,
                        playScreenShotsNotification = true,
                        saveScreenShotsCopy = false,
                        showOverlay = true,
                        familyView = false,
                        familyViewCode = "",
                        familyViewGames = new List<string>(),
                        isAddNickAfterFriendNames = false,
                        isHideOfflineFriendsFromCategories = false,
                        isOpenNewChatInNewWindow = false,
                        isNotIncludeImagesAndMediaFiles = false,
                        isShowTimeIn24 = true,
                        isDisableSpellCheck = true,
                        isFriendListAndChatsCompactView = false,
                        isFavoriteCompactView = false,
                        chatFontSize = "standard",
                        isFriendOnlineNotification = false,
                        isFriendOnlineSound = false,
                        isFriendPlayedNotification = true,
                        isFriendPlayedSound = false,
                        isFriendSendMsgNotification = true,
                        isFriendSendMsgSound = true,
                        isFriendSendTalkMsgNotification = true,
                        isFriendSendTalkMsgSound = true,
                        isFriendSendTalkEventNotification = true,
                        isFriendSendTalkEventSound = false,
                        sendMsgBlinkWindowType = "always",
                        friendActivity = new FriendActivity()
                        {
                            isAddFriend = true,
                            isOpenAchievement = true,
                            isBuyGame = true,
                            isInviteGroup = true,
                            isCreateGroup = true,
                            isAddGameToWishList = true,
                            isAddReview = true,
                            isUploadScreenShot = true,
                            isAddVideo = true,
                            isAddSubjectToFavorite = true,
                            isDoAdvertisiment = true,
                            isScheduleEvent = true,
                            isSelectPlayerOfWeek = true,
                            isUpgradeUserToAdmin = true,
                            isReceiveComment = true,
                            isProductDoAdvertisiment = true,
                            isWorkShopDoAdvertisiment = true,
                            isAddGameRecomendation = true,
                            isAddSubject = true,
                            isDetectFromScreenShot = true
                        }
                    },
                    collections = new List<string>() { },
                    notifications = new Notifications() {
                        isNotificationsEnabled = true,
                        notificationsProductFromWantListWithDiscount = true,
                        notificationsProductFromWantListUpdateAcccess = true,
                        notificationsProductFromSubsOrFavoritesUpdateAcccess = true,
                        notificationsProductFromDeveloperUpdateAcccess = true,
                        notificationsStartYearlyDiscount = true,
                        notificationsGroupUpdateGameReview = true,
                        notificationsUpdateIcon = true,
                        notificationsUpdateGames = true
                    },
                    categories = new List<string>() { },
                    recentChats = new List<string>() { },
                    recommendations = new Recommendations() {
                        isEarlyAccess = true,
                        isSoftWare = true,
                        isVideo = true,
                        isSoundTracks = true,
                        isNotReleases = true,
                        exceptTags = new List<string>() { }
                    },
                    logoutDate = rawLogoutDate,
                    sections = new List<string>() { }
                });
                File.WriteAllText(saveDataFilePath, savedContent);

                Directory.CreateDirectory(cacheGamesPath);
                Directory.CreateDirectory(cacheScreenShotsPath);

            }
        }

        public void ShowOffers()
        {
            Dialogs.OffersDialog dialog = new Dialogs.OffersDialog();
            dialog.Show();
        }

        public void OpenSettingsHandler(object sender, RoutedEventArgs e)
        {
            OpenSettings();
        }

        public void OpenSettings()
        {
            Dialogs.SettingsDialog dialog = new Dialogs.SettingsDialog(currentUserId);
            dialog.Closed += DetectSettingsEventHandler;
            dialog.Show();
        }

        public void DetectSettingsEventHandler (object sender, EventArgs e)
        {
            Dialogs.SettingsDialog dialog = ((Dialogs.SettingsDialog)(sender));
            object dialogData = dialog.DataContext;
            DetectSettingsEvent(dialogData);
        }

        public void DetectSettingsEvent (object data)
        {
            bool isDataExists = data != null;
            if (isDataExists)
            {
                string settingsEvent = ((string)(data));
                bool isUpdateEmail = settingsEvent == "email update";
                bool isUpdatePassword = settingsEvent == "password update";
                bool isUpdateFamilyView = settingsEvent == "family view update";
                if (isUpdateEmail)
                {
                    OpenUpdateEmail();
                }
                else if (isUpdatePassword)
                {
                    OpenUpdatePassword();
                }
                else if (isUpdateFamilyView)
                {
                    OpenFamilyViewManagement();
                }
            }
        }

        public void OpenFamilyViewManagement ()
        {
            mainControl.SelectedIndex = 44;
        }

        public void OpenFamilyViewManagementHandler (object sender, RoutedEventArgs e)
        {
            OpenFamilyViewManagement();
        }

        async public void RunGame (string gameName, string joinedGameName = "")
        {

            StartDetectGameHours();
            GameWindow window = new GameWindow(currentUserId);

            // window.DataContext = gameActionLabel.DataContext;
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string userPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId;
            string gamePath = userPath + @"\games\" + gameName + @"\game.exe";
            window.DataContext = gamePath;

            window.Closed += ComputeGameHoursHandler;
            window.Show();
            // string gameName = gameNameLabel.Text;
            try
            {
                await client.EmitAsync("user_is_played", currentUserId + "|" + gameName);
            }
            catch (System.Net.WebSockets.WebSocketException)
            {
                Debugger.Log(0, "debug", "Ошибка сокетов");
                await client.ConnectAsync();
            }

            string gameId = "1";
            string saveDataFilePath = userPath + @"\save-data.txt";
            string currentGameName = joinedGameName;
            int joinedGameNameLength = joinedGameName.Length;
            bool isNotJoinedGame = joinedGameNameLength <= 0;
            if (isNotJoinedGame)
            {
                currentGameName = gameName;
            }
            string appPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\";
            // string cachePath = appPath + currentGameName;
            string cachePath = appPath + @"games\" + currentGameName;
            string filename = cachePath + @"\game.exe";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            object gameNameLabelData = gameNameLabel.DataContext;
            string gameUploadedPath = ((string)(gameNameLabelData));
            DateTime currentDate = DateTime.Now;
            string gameLastLaunchDate = currentDate.ToLongDateString();
            string rawTimerHours = timerHours.ToString();
            int gameIndex = -1;
            foreach (Game someGame in updatedGames)
            {
                string someGameName = someGame.name;
                bool isNamesMatch = someGameName == currentGameName;
                if (isNamesMatch)
                {
                    gameIndex = updatedGames.IndexOf(someGame);
                    break;
                }
            }
            bool isGameFound = gameIndex >= 0;
            if (isGameFound)
            {
                Game currentGame = updatedGames[gameIndex];
                gameId = currentGame.id;
            }
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/stats/increase/?id=" + gameId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/games/last/set/?id=" + currentUserId + @"&game=" + gameId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = reader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        
                                        HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/sessions/add/?id=" + gameId + @"&user=" + currentUserId);
                                        nestedWebRequest.Method = "GET";
                                        nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                        {
                                            using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = nestedReader.ReadToEnd();
                                                UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                status = myNestedObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {

                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            // SetUserStatus("played");
            UpdateUserStatus("played");

            client.EmitAsync("user_is_toggle_status", "played");
        }

        public void StartDetectGameHours()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromHours(1);
            timer.Tick += GameHoursUpdateHandler;
            timer.Start();
            timerHours = 0;
        }

        public void GameHoursUpdateHandler(object sender, EventArgs e)
        {
            timerHours++;
        }

        public void ComputeGameHoursHandler(object sender, EventArgs e)
        {
            ComputeGameHours();
        }

        public void ComputeGameHours()
        {
            timer.Stop();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            string gameName = gameNameLabel.Text;
            string appPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\";
            // string cachePath = appPath + gameName;
            string cachePath = appPath + @"games\" + gameName;
            string filename = cachePath + @"\game.exe";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            object gameNameLabelData = gameNameLabel.DataContext;
            string gameUploadedPath = ((string)(gameNameLabelData));
            DateTime currentDate = DateTime.Now;
            string gameLastLaunchDate = currentDate.ToLongDateString();
            string rawTimerHours = timerHours.ToString();
            int gameIndex = -1;
            foreach (Game someGame in updatedGames)
            {
                string someGameName = someGame.name;
                bool isNamesMatch = someGameName == gameName;
                if (isNamesMatch)
                {
                    gameIndex = updatedGames.IndexOf(someGame);
                    break;
                }
            }
            bool isGameFound = gameIndex >= 0;
            if (isGameFound)
            {
                Game currentGame = updatedGames[gameIndex];
                string currentGameId = currentGame.id;
                string currentGameName = currentGame.name;
                string currentGamePath = currentGame.path;
                string currentInstallDate = currentGame.installDate;
                updatedGames[gameIndex] = new Game()
                {
                    id = currentGameId,
                    name = currentGameName,
                    path = currentGamePath,
                    hours = rawTimerHours,
                    date = gameLastLaunchDate,
                    installDate = currentInstallDate,
                    collections = new List<string>(),
                    isHidden = false,
                    cover = "",
                    overlay = true
                };
                string savedContent = js.Serialize(new SavedContent
                {
                    games = updatedGames,
                    friends = currentFriends,
                    settings = currentSettings,
                    collections = currentCollections,
                    notifications = currentNotifications,
                    categories = currentCategories,
                    recentChats = currentRecentChats,
                    recommendations = currentRecommendations,
                    logoutDate = currentLogoutDate,
                    sections = currentSections
                });
                File.WriteAllText(saveDataFilePath, savedContent);

                DecreaseUserToGameStats(currentGameId);

            }

            GetGamesInfo();

            // SetUserStatus("online");
            UpdateUserStatus("online");

            client.EmitAsync("user_is_toggle_status", "online");

            GetScreenShots("", false);

        }

        public void DecreaseUserToGameStats(string gameId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/stats/decrease/?id=" + gameId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void InstallGameHandler(object sender, RoutedEventArgs e)
        {
            InstallGame();
        }

        public void InstallGame()
        {

            object rawGameActionLabelData = gameActionLabel.DataContext;
            Dictionary<String, Object> dataParts = ((Dictionary<String, Object>)(rawGameActionLabelData));
            string gameId = ((string)(dataParts["id"]));
            string gameName = ((string)(dataParts["name"]));
            /*string gameUrl = ((string)(dataParts["url"]));
            string gameImg = ((string)(dataParts["image"]));*/
            string gameUrl = @"http://localhost:4000/api/game/distributive/?name=" + gameName; ;
            string gameImg = @"http://localhost:4000/api/game/thumbnail/?name=" + gameName;

            Dialogs.DownloadGameDialog dialog = new Dialogs.DownloadGameDialog(currentUserId);
            dialog.DataContext = dataParts;
            dialog.Closed += GameDownloadedHandler;
            dialog.Show();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string appFolder = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\";
            string cachePath = appFolder + @"games\" + gameName;
            // string cachePath = appFolder + gameName;
            string filename = cachePath + @"\game.exe";
            gameNameLabel.DataContext = ((string)(filename));
            gameActionLabel.IsEnabled = false;
        }


        public void GameSuccessDownloaded (string id)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            string gameId = id;
            string gameName = gameNameLabel.Text;
            string appPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\";
            string cachePath = appPath + @"games\" + gameName;
            // string cachePath = appPath + gameName;
            Directory.CreateDirectory(cachePath);
            string filename = cachePath + @"\game.exe";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            object gameNameLabelData = gameNameLabel.DataContext;
            string gameUploadedPath = ((string)(gameNameLabelData));
            string gameHours = "0";
            DateTime currentDate = DateTime.Now;
            string gameLastLaunchDate = currentDate.ToLongDateString();
            updatedGames.Add(new Game()
            {
                id = gameId,
                name = gameName,
                path = gameUploadedPath,
                hours = gameHours,
                date = gameLastLaunchDate,
                installDate = gameLastLaunchDate,
                collections = new List<string>(),
                isHidden = false,
                cover = "",
                overlay = true
            });
            string savedContent = js.Serialize(new SavedContent
            {
                games = updatedGames,
                friends = currentFriends,
                settings = currentSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            gameActionLabel.Content = Properties.Resources.playBtnLabelContent;
            // gameActionLabel.IsEnabled = true;
            removeGameBtn.Visibility = visible;
            string gamePath = ((string)(gameNameLabel.DataContext));
            gameActionLabel.DataContext = filename;
            string gameUploadedLabelContent = Properties.Resources.gameUploadedLabelContent;
            string attentionLabelContent = Properties.Resources.attentionLabelContent;
            GetDownloads();

            /*ProcessStartInfo startInfo = new ProcessStartInfo();
            startInfo.FileName = filename;
            startInfo.Arguments = "/D=" + cachePath + " /VERYSILENT";
            Process.Start(startInfo);*/

            GetScreenShots("", false);

            GetGamesList("");

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/likes/increase/?id=" + gameId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GameRelation> gameRelations = myInnerObj.relations;
                                        int countCurrentGameRelations = gameRelations.Count((GameRelation relation) =>
                                        {
                                            string relationUserId = relation.user;
                                            string relationGameId = relation.game;
                                            bool isCurrentUser = relationUserId == currentUserId;
                                            bool isCurrentGame = relationGameId == gameId;
                                            bool isCurrentGameRelation = isCurrentGame && isCurrentUser;
                                            return isCurrentGameRelation;
                                        });
                                        bool isRelationsExists = countCurrentGameRelations >= 1;
                                        bool isRelationsNotExists = !isRelationsExists;
                                        if (isRelationsNotExists)
                                        {
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/add/?id=" + gameId + @"&user=" + currentUserId + @"&price=" + "0");
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myInnerObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        MessageBox.Show(gameUploadedLabelContent, attentionLabelContent);
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            int countInstalledGames = updatedGames.Count;
            bool isAddIconForInstalledGames = countInstalledGames >= 2;
            if (isAddIconForInstalledGames)
            {
                bool isAlreadyExists = false;
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/icons/relations/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IconRelationsResponseInfo myobj = (IconRelationsResponseInfo)js.Deserialize(objText, typeof(IconRelationsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<IconRelation> relations = myobj.relations;
                            List<IconRelation> sameIcons = relations.Where<IconRelation>((IconRelation relation) =>
                            {
                                string userId = relation.user;
                                string iconId = relation.icon;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/icons/get/?id=" + iconId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        IconResponseInfo myInnerObj = (IconResponseInfo)js.Deserialize(objText, typeof(IconResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            Icon icon = myInnerObj.icon;
                                            string title = icon.title;
                                            bool isMyRelation = userId == currentUserId;
                                            bool isRelationForInstalledGames = title == "Игроман";
                                            isAlreadyExists = isMyRelation && isRelationForInstalledGames;
                                        }
                                    }
                                }
                                return isAlreadyExists;
                            }).ToList<IconRelation>();
                            int sameIconsCount = sameIcons.Count;
                            bool isResultsNotFound = sameIconsCount <= 0;
                            if (isResultsNotFound)
                            {
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/icons/all");
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        IconsResponseInfo myInnerObj = (IconsResponseInfo)js.Deserialize(objText, typeof(IconsResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            List<Icon> icons = myInnerObj.icons;
                                            List<Icon> results = icons.Where<Icon>((Icon icon) =>
                                            {
                                                string title = icon.title;
                                                bool isRelationForInstalledGames = title == "Игроман";
                                                return isRelationForInstalledGames;
                                            }).ToList<Icon>();
                                            int resultsCount = results.Count;
                                            bool isHaveResults = resultsCount >= 1;
                                            if (isHaveResults)
                                            {
                                                Icon result = results[0];
                                                string resultId = result._id;
                                                string desc = result.desc;
                                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/icons/relations/add/?id=" + resultId + @"&user=" + currentUserId);
                                                nestedWebRequest.Method = "GET";
                                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                {
                                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                    {
                                                        js = new JavaScriptSerializer();
                                                        objText = nestedReader.ReadToEnd();
                                                        UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                        status = myNestedObj.status;
                                                        isOkStatus = status == "OK";
                                                        if (isOkStatus)
                                                        {
                                                            bool isNotificationsEnabled = currentNotifications.notificationsUpdateIcon;
                                                            if (isNotificationsEnabled)
                                                            {
                                                                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                                                                innerNestedWebRequest.Method = "GET";
                                                                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                                {
                                                                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                                    {
                                                                        js = new JavaScriptSerializer();
                                                                        objText = innerNestedReader.ReadToEnd();
                                                                        UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                        status = myInnerNestedObj.status;
                                                                        isOkStatus = status == "OK";
                                                                        if (isOkStatus)
                                                                        {
                                                                            User user = myInnerNestedObj.user;
                                                                            string email = user.login;
                                                                            try
                                                                            {
                                                                                MailMessage message = new MailMessage();
                                                                                SmtpClient smtp = new SmtpClient();
                                                                                message.From = new System.Net.Mail.MailAddress("glebdyakov2000@gmail.com");
                                                                                message.To.Add(new System.Net.Mail.MailAddress(email));
                                                                                string subjectBoxContent = @"Уведомления Office ware game manager";
                                                                                message.Subject = subjectBoxContent;
                                                                                message.IsBodyHtml = true; //to make message body as html  
                                                                                string messageBodyBoxContent = "<h3>Здравствуйте, " + email + "!</h3><p>Вы получили значок \"Игроман\"</p><p>Описание: " + desc + "</p>";
                                                                                message.Body = messageBodyBoxContent;
                                                                                smtp.Port = 587;
                                                                                smtp.Host = "smtp.gmail.com"; //for gmail host  
                                                                                smtp.EnableSsl = true;
                                                                                smtp.UseDefaultCredentials = false;
                                                                                smtp.Credentials = new NetworkCredential("glebdyakov2000@gmail.com", "ttolpqpdzbigrkhz");
                                                                                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                                                smtp.Send(message);
                                                                            }
                                                                            catch (Exception)
                                                                            {
                                                                                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            GetIcons();
                                                            MessageBox.Show("Вы получили значок \"Игроман\"", "Внимание");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            GetAddCommunityItemsAction();

        }

        private void SelectGameHandler (object sender, MouseButtonEventArgs e)
        {
            StackPanel game = ((StackPanel)(sender));
            object rawGameData = game.DataContext;
            Dictionary<String, Object> gameData = ((Dictionary<String, Object>)(rawGameData));
            SelectGame(gameData);
        }

        public void SelectGame (Dictionary<String, Object> gameData)
        {

            activeGame.Visibility = visible;
            ads.Visibility = invisible;

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            SavedContent loadedContent = js.Deserialize<SavedContent>(File.ReadAllText(saveDataFilePath));
            List<Game> loadedGames = loadedContent.games;
            List<string> gameNames = new List<string>();
            foreach (Game loadedGame in loadedGames)
            {
                gameNames.Add(loadedGame.name);
            }
            Dictionary<String, Object> dataParts = ((Dictionary<String, Object>)(gameData));
            string gameId = ((string)(dataParts["id"]));
            string gameName = ((string)(dataParts["name"]));
            string gameUrl = ((string)(dataParts["url"]));
            string gameImg = ((string)(dataParts["image"]));
            
            int gamePrice = ((int)(dataParts["price"]));

            bool isCustomGame = gameId == "mockId";
            bool isNotCustomGame = !isCustomGame;
            Application.Current.Dispatcher.Invoke(() =>
            {
                // gamePhoto.BeginInit();
                Uri gameImageUri = null;
                if (isNotCustomGame)
                {
                    gameImageUri = new Uri(gameImg);
                }
                else
                {
                    gameImageUri = new Uri("https://cdn3.iconfinder.com/data/icons/solid-locations-icon-set/64/Games_2-256.png");
                }
                gamePhoto.Source = new BitmapImage(gameImageUri);
                // gamePhoto.EndInit();
            });
            bool isGameExists = gameNames.Contains(gameName);
            if (isGameExists)
            {
                gameActionLabel.Content = Properties.Resources.playBtnLabelContent;
                int gameIndex = gameNames.IndexOf(gameName);
                Game loadedGame = loadedGames[gameIndex];
                string gamePath = loadedGame.path;
                gameActionLabel.DataContext = gamePath;
                removeGameBtn.Visibility = visible;
                AddUserToGameStats(gameId);
            
                gameDetails.Visibility = visible;

                string rawHours = loadedGame.hours;
                string rawDate = loadedGame.date;
                string activeGameHoursLabelContent = rawHours + " ч.";
                activeGameHoursLabel.Text = activeGameHoursLabelContent;
                activeGameLastLaunchDateLabel.Text = rawDate;

            }
            else
            {
                bool isFreeGame = gamePrice <= 0;
                bool isGamePayed = false;

                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        string objText = innerReader.ReadToEnd();
                        GameRelationsResponseInfo myInnerObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                        string status = myInnerObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameRelation> relations = myInnerObj.relations;
                            List<GameRelation> myPayedGames = relations.Where<GameRelation>((GameRelation relation) =>
                            {
                                string localGameId = relation.game;
                                string userId = relation.user;
                                bool isMyGame = userId == currentUserId;
                                bool isCurrentGame = localGameId == gameId;
                                bool isLocalGamePayed = isMyGame && isCurrentGame;
                                return isLocalGamePayed;
                            }).ToList<GameRelation>();
                            int myPayedGamesCount = myPayedGames.Count;
                            bool isHaveGames = myPayedGamesCount >= 1;
                            if (isHaveGames)
                            {
                                isGamePayed = true;
                            }
                        }
                    }
                }

                bool isCanInstall = isFreeGame || isGamePayed;
                if (isCanInstall)
                {
                    gameActionLabel.Content = Properties.Resources.installBtnLabelContent;
                }
                else
                {
                    string rawPrice = gamePrice.ToString();
                    string measure = "Р";
                    gameActionLabel.Content = "Купить " + rawPrice + " " + measure;
                }
                gameActionLabel.DataContext = gameData;
                removeGameBtn.Visibility = invisible;
                gameDetails.Visibility = invisible;
            }
            gameNameLabel.Text = gameName;

            removeGameBtn.DataContext = gameName;

            
            try
            {
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/sessions/all");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        string objText = innerReader.ReadToEnd();
                        GameSessionsResponseInfo myInnerObj = (GameSessionsResponseInfo)js.Deserialize(objText, typeof(GameSessionsResponseInfo));
                        string status = myInnerObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameSession> sessions = myInnerObj.sessions;
                            HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (var reader = new StreamReader(webResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = reader.ReadToEnd();
                                    FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<Friend> friends = myobj.friends;
                                        List<Friend> myFriends = friends.Where<Friend>((Friend joint) =>
                                        {
                                            string localUserId = joint.user;
                                            bool isMyFriend = localUserId == currentUserId;
                                            return isMyFriend;
                                        }).ToList<Friend>();
                                        List<string> friendsIds = new List<string>();
                                        foreach (Friend myFriend in myFriends)
                                        {
                                            string friendId = myFriend.friend;
                                            friendsIds.Add(friendId);
                                        }

                                        List<GameSession> myFriendSessions = sessions.Where<GameSession>((GameSession session) =>
                                        {
                                            string sessionUserId = session.user;
                                            string sessionGameId = session.game;
                                            bool isCurrentGameSession = sessionGameId == gameId;
                                            bool isMyFriendSession = friendsIds.Contains(sessionUserId);
                                            bool isNotMe = currentUserId != sessionUserId;
                                            return isMyFriendSession && isCurrentGameSession && isNotMe;
                                        }).Distinct(new GameSessionComparer()).ToList<GameSession>();
                                        DateTime currentDate = DateTime.Now;
                                        List<GameSession> beforeMyFriendSessions = myFriendSessions.Where<GameSession>((GameSession session) =>
                                        {
                                            DateTime sessionDate = session.date;
                                            TimeSpan interval = currentDate.Subtract(sessionDate);
                                            double intervalDays = interval.TotalDays;
                                            bool isBefore = intervalDays > 14;
                                            return isBefore;
                                        }).ToList<GameSession>();
                                        List<GameSession> recentMyFriendSessions = myFriendSessions.Where<GameSession>((GameSession session) =>
                                        {
                                            DateTime sessionDate = session.date;
                                            TimeSpan interval = currentDate.Subtract(sessionDate);
                                            double intervalDays = interval.TotalDays;
                                            bool isRecent = intervalDays <= 14;
                                            return isRecent;
                                        }).ToList<GameSession>();
                                        int countRecentFriendsForActiveGame = recentMyFriendSessions.Count;
                                        string rawCountRecentFriendsForActiveGame = countRecentFriendsForActiveGame.ToString();
                                        string recentFriendsForActiveGameCountLabelContent = "Друзей, игравших недавно: " + rawCountRecentFriendsForActiveGame;
                                        recentFriendsForActiveGameCountLabel.Text = recentFriendsForActiveGameCountLabelContent;
                                        int countBeforeFriendsForActiveGame = beforeMyFriendSessions.Count;
                                        string rawCountBeforeFriendsForActiveGame = countBeforeFriendsForActiveGame.ToString();
                                        string beforeFriendsForActiveGameCountLabelContent = "Друзей, игравших раньше: " + rawCountBeforeFriendsForActiveGame;
                                        beforeFriendsForActiveGameCountLabel.Text = beforeFriendsForActiveGameCountLabelContent;
                                        recentFriendsForActiveGame.Children.Clear();
                                        foreach (GameSession recentMyFriendSession in recentMyFriendSessions)
                                        {
                                            string recentMyFriendSessionUserId = recentMyFriendSession.user;

                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + recentMyFriendSessionUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (StreamReader nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {

                                                        User friend = myNestedObj.user;
                                                        string friendName = friend.name;

                                                        StackPanel myFriend = new StackPanel();
                                                        myFriend.Orientation = Orientation.Horizontal;
                                                        Image myFriendAvatar = new Image();
                                                        myFriendAvatar.Margin = new Thickness(15);
                                                        myFriendAvatar.Width = 40;
                                                        myFriendAvatar.Height = 40;
                                                        myFriendAvatar.BeginInit();
                                                        myFriendAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + recentMyFriendSessionUserId));
                                                        myFriendAvatar.EndInit();
                                                        myFriend.Children.Add(myFriendAvatar);
                                                        StackPanel myFriendAside = new StackPanel();
                                                        myFriendAside.Margin = new Thickness(15, 0, 15, 0);
                                                        TextBlock myFriendAsideUserNameLabel = new TextBlock();
                                                        myFriendAsideUserNameLabel.Text = friendName;
                                                        myFriendAsideUserNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                                        myFriendAside.Children.Add(myFriendAsideUserNameLabel);
                                                        TextBlock myFriendAsideRecentLabel = new TextBlock();
                                                        myFriendAsideRecentLabel.Text = "Недавно";
                                                        myFriendAsideRecentLabel.Margin = new Thickness(0, 5, 0, 5);
                                                        myFriendAside.Children.Add(myFriendAsideRecentLabel);
                                                        myFriend.Children.Add(myFriendAside);
                                                        recentFriendsForActiveGame.Children.Add(myFriend);

                                                    }
                                                }
                                            }

                                        }
                                        beforeFriendsForActiveGame.Children.Clear();
                                        foreach (GameSession beforeMyFriendSession in beforeMyFriendSessions)
                                        {
                                            string beforeMyFriendSessionUserId = beforeMyFriendSession.user;

                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + beforeMyFriendSessionUserId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (StreamReader nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {

                                                        User friend = myNestedObj.user;
                                                        string friendName = friend.name;

                                                        StackPanel myFriend = new StackPanel();
                                                        myFriend.Orientation = Orientation.Horizontal;
                                                        Image myFriendAvatar = new Image();
                                                        myFriendAvatar.Margin = new Thickness(15);
                                                        myFriendAvatar.Width = 40;
                                                        myFriendAvatar.Height = 40;
                                                        myFriendAvatar.BeginInit();
                                                        myFriendAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + beforeMyFriendSessionUserId));
                                                        myFriendAvatar.EndInit();
                                                        myFriend.Children.Add(myFriendAvatar);
                                                        StackPanel myFriendAside = new StackPanel();
                                                        myFriendAside.Margin = new Thickness(15, 0, 15, 0);
                                                        TextBlock myFriendAsideUserNameLabel = new TextBlock();
                                                        myFriendAsideUserNameLabel.Text = "";
                                                        myFriendAsideUserNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                                        myFriendAside.Children.Add(myFriendAsideUserNameLabel);
                                                        TextBlock myFriendAsideRecentLabel = new TextBlock();
                                                        myFriendAsideRecentLabel.Text = "";
                                                        myFriendAsideRecentLabel.Margin = new Thickness(0, 5, 0, 5);
                                                        myFriendAside.Children.Add(myFriendAsideRecentLabel);
                                                        myFriend.Children.Add(myFriendAside);
                                                        beforeFriendsForActiveGame.Children.Add(myFriend);

                                                    }
                                                }
                                            }

                                        }

                                        string appPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\screenshots\";
                                        string[] games = Directory.GetDirectories(appPath);
                                        activeGameScreenShots.Children.Clear();
                                        int screenShotsCursor = 0;
                                        foreach (string game in games)
                                        {
                                            DirectoryInfo gameInfo = new DirectoryInfo(game);
                                            string[] files = Directory.GetFileSystemEntries(game);
                                            string folderName = gameInfo.Name;
                                            bool isMyCurrentGameFolder = folderName == gameName;
                                            if (isMyCurrentGameFolder)
                                            {
                                                foreach (string file in files)
                                                {
                                                    screenShotsCursor++;
                                                    string ext = System.IO.Path.GetExtension(file);
                                                    bool isScreenShot = ext == ".jpg";
                                                    if (isScreenShot)
                                                    {
                                                        List<Game> currentGames = loadedContent.games;
                                                        List<Game> results = currentGames.Where<Game>((Game someGame) =>
                                                        {
                                                            string someGameName = someGame.name;
                                                            return someGameName == gameName;
                                                        }).ToList<Game>();
                                                        int countResults = results.Count;
                                                        bool isHaveResults = countResults >= 1;
                                                        if (isHaveResults)
                                                        {
                                                            FileInfo info = new FileInfo(file);
                                                            Image screenShot = new Image();
                                                            screenShot.Margin = new Thickness(15);
                                                            screenShot.Width = 85;
                                                            screenShot.Height = 85;
                                                            screenShot.BeginInit();
                                                            Uri screenShotUri = new Uri(file);
                                                            screenShot.Source = new BitmapImage(screenShotUri);
                                                            screenShot.EndInit();
                                                            activeGameScreenShots.Children.Add(screenShot);
                                                            Game currentGame = results[0];
                                                            string currentGameId = currentGame.id;
                                                            Dictionary<String, Object> screenShotData = new Dictionary<String, Object>();
                                                            screenShotData.Add("name", file);
                                                            screenShotData.Add("id", currentGameId);
                                                            screenShot.DataContext = screenShotData;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        string rawScreenShotsCursor = screenShotsCursor.ToString();
                                        string activeGameScreenShotsSettingsBtnContent = "Настройки скриншотов (" + rawScreenShotsCursor + ")";
                                        activeGameScreenShotsSettingsBtn.Content = activeGameScreenShotsSettingsBtnContent;

                                        List<CommunityContent> communityElements = new List<CommunityContent>();
                                        try
                                        {
                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/all");
                                            innerNestedWebRequest.Method = "GET";
                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                            {
                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = innerNestedReader.ReadToEnd();
                                                    IllustrationsResponseInfo myInnerNestedObj = (IllustrationsResponseInfo)js.Deserialize(objText, typeof(IllustrationsResponseInfo));
                                                    status = myInnerNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<Illustration> totalIllustrations = myInnerNestedObj.illustrations;

                                                        totalIllustrations = totalIllustrations.Where<Illustration>((Illustration item) =>
                                                        {
                                                            return item.game == gameId;
                                                        }).ToList<Illustration>();

                                                        illustrations.Children.Clear();
                                                        int totalIllustrationsCount = totalIllustrations.Count;
                                                        illustrations.HorizontalAlignment = HorizontalAlignment.Left;
                                                        foreach (Illustration totalIllustrationsItem in totalIllustrations)
                                                        {
                                                            string id = totalIllustrationsItem._id;
                                                            string userId = totalIllustrationsItem.user;
                                                            HttpWebRequest communityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                                            communityContentWebRequest.Method = "GET";
                                                            communityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse communityContentWebResponse = (HttpWebResponse)communityContentWebRequest.GetResponse())
                                                            {
                                                                using (var communityContentReader = new StreamReader(communityContentWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = communityContentReader.ReadToEnd();
                                                                    UserResponseInfo myCommunityContentObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                    status = myCommunityContentObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        HttpWebRequest innerCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                                        innerCommunityContentWebRequest.Method = "GET";
                                                                        innerCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse innerCommunityContentWebResponse = (HttpWebResponse)innerCommunityContentWebRequest.GetResponse())
                                                                        {
                                                                            using (var innerCommunityContentReader = new StreamReader(innerCommunityContentWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = innerCommunityContentReader.ReadToEnd();
                                                                                GamesListResponseInfo myInnerCommunityContentObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                                string responseStatus = myInnerCommunityContentObj.status;
                                                                                bool isOKStatus = responseStatus == "OK";
                                                                                if (isOKStatus)
                                                                                {
                                                                                    // string gameId = totalIllustrationsItem.game;
                                                                                    List<GameResponseInfo> totalGames = myInnerCommunityContentObj.games;
                                                                                    List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                                                    {
                                                                                        string someGameId = someGame._id;
                                                                                        bool isIdMatches = someGameId == gameId;
                                                                                        return isIdMatches;
                                                                                    }).ToList<GameResponseInfo>();
                                                                                    int countResults = results.Count;
                                                                                    bool isHaveResults = countResults >= 1;
                                                                                    if (isHaveResults)
                                                                                    {
                                                                                        GameResponseInfo illustrationGame = results[0];
                                                                                        HttpWebRequest nestedCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/comments/all");
                                                                                        nestedCommunityContentWebRequest.Method = "GET";
                                                                                        nestedCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                        using (HttpWebResponse nestedCommunityContentWebResponse = (HttpWebResponse)nestedCommunityContentWebRequest.GetResponse())
                                                                                        {
                                                                                            using (var nestedCommunityContentReader = new StreamReader(nestedCommunityContentWebResponse.GetResponseStream()))
                                                                                            {
                                                                                                js = new JavaScriptSerializer();
                                                                                                objText = nestedCommunityContentReader.ReadToEnd();
                                                                                                IllustrationCommentsResponseInfo myNestedCommunityContentObj = (IllustrationCommentsResponseInfo)js.Deserialize(objText, typeof(IllustrationCommentsResponseInfo));
                                                                                                status = myNestedCommunityContentObj.status;
                                                                                                isOkStatus = status == "OK";
                                                                                                if (isOkStatus)
                                                                                                {
                                                                                                    HttpWebRequest friendWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                                                                                    friendWebRequest.Method = "GET";
                                                                                                    friendWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                                    using (HttpWebResponse friendWebResponse = (HttpWebResponse)friendWebRequest.GetResponse())
                                                                                                    {
                                                                                                        using (var friendReader = new StreamReader(friendWebResponse.GetResponseStream()))
                                                                                                        {
                                                                                                            js = new JavaScriptSerializer();
                                                                                                            objText = friendReader.ReadToEnd();
                                                                                                            FriendsResponseInfo myFriendObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                                                                                            status = myFriendObj.status;
                                                                                                            isOkStatus = status == "OK";
                                                                                                            if (isOkStatus)
                                                                                                            {
                                                                                                                List<Friend> friendRecords = myFriendObj.friends.Where<Friend>((Friend joint) =>
                                                                                                                {
                                                                                                                    string localUserId = joint.user;
                                                                                                                    bool isMyFriend = localUserId == userId;
                                                                                                                    return isMyFriend;
                                                                                                                }).ToList<Friend>();
                                                                                                                friendsIds = new List<string>();
                                                                                                                foreach (Friend friendRecord in friendRecords)
                                                                                                                {
                                                                                                                    string localFriendId = friendRecord.friend;
                                                                                                                    friendsIds.Add(localFriendId);
                                                                                                                }
                                                                                                                string visibility = totalIllustrationsItem.visibility;
                                                                                                                bool isForFriends = visibility == "Для друзей";
                                                                                                                bool isForMe = visibility == "Для себя";
                                                                                                                bool isDontShow = visibility == "не показывать";
                                                                                                                bool isShow = !isDontShow;
                                                                                                                bool isAuthor = currentUserId == userId;
                                                                                                                bool isFriend = friendsIds.Contains(currentUserId);
                                                                                                                bool isAddIllustration = isShow && ((isAuthor && isForMe) || (isFriend && isForFriends) || isAuthor);
                                                                                                                if (isAddIllustration)
                                                                                                                {
                                                                                                                    string illustrationGameName = illustrationGame.name;
                                                                                                                    int likes = totalIllustrationsItem.likes;
                                                                                                                    List<IllustrationComment> illustrationComments = myNestedCommunityContentObj.comments;
                                                                                                                    List<IllustrationComment> currentIllustrationComments = illustrationComments.Where<IllustrationComment>((IllustrationComment comment) =>
                                                                                                                    {
                                                                                                                        string commentIllustrationId = comment.illustration;
                                                                                                                        bool isCurrentIllustration = commentIllustrationId == id;
                                                                                                                        return isCurrentIllustration;
                                                                                                                    }).ToList<IllustrationComment>();
                                                                                                                    int countComments = currentIllustrationComments.Count;
                                                                                                                    string rawCountComments = countComments.ToString(); ;
                                                                                                                    string rawCountLikes = likes.ToString();
                                                                                                                    User author = myCommunityContentObj.user;
                                                                                                                    string authorName = author.name;
                                                                                                                    string title = totalIllustrationsItem.title;
                                                                                                                    string desc = totalIllustrationsItem.desc;
                                                                                                                    StackPanel illustration = new StackPanel();
                                                                                                                    illustration.Width = 500;
                                                                                                                    illustration.Margin = new Thickness(15);
                                                                                                                    illustration.Background = System.Windows.Media.Brushes.LightGray;
                                                                                                                    TextBlock illustrationTitleLabel = new TextBlock();
                                                                                                                    illustrationTitleLabel.FontSize = 16;
                                                                                                                    illustrationTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationTitleLabel.Text = title;
                                                                                                                    illustration.Children.Add(illustrationTitleLabel);
                                                                                                                    Image illustrationPhoto = new Image();
                                                                                                                    illustrationPhoto.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                                                    illustrationPhoto.Width = 500;
                                                                                                                    illustrationPhoto.Height = 425;
                                                                                                                    illustrationPhoto.BeginInit();
                                                                                                                    illustrationPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/illustration/photo/?id=" + id));
                                                                                                                    illustrationPhoto.EndInit();
                                                                                                                    illustration.Children.Add(illustrationPhoto);
                                                                                                                    TextBlock illustrationDescLabel = new TextBlock();
                                                                                                                    illustrationDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationDescLabel.Text = desc;
                                                                                                                    illustration.Children.Add(illustrationDescLabel);
                                                                                                                    DockPanel illustrationFooter = new DockPanel();
                                                                                                                    PackIcon illustrationFooterItemIcon = new PackIcon();
                                                                                                                    illustrationFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                                                    illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooter.Children.Add(illustrationFooterItemIcon);
                                                                                                                    illustrationFooterItemIcon = new PackIcon();
                                                                                                                    illustrationFooterItemIcon.Kind = PackIconKind.ThumbDown;
                                                                                                                    illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooter.Children.Add(illustrationFooterItemIcon);
                                                                                                                    StackPanel illustrationFooterItem = new StackPanel();
                                                                                                                    illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                                                    illustrationFooterItemIcon = new PackIcon();
                                                                                                                    illustrationFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                                                    illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                                                    TextBlock illustrationFooterItemLabel = new TextBlock();
                                                                                                                    illustrationFooterItemLabel.Text = "Наградить";
                                                                                                                    illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                                                    illustrationFooter.Children.Add(illustrationFooterItem);
                                                                                                                    StackPanel illustrationFooterAside = new StackPanel();
                                                                                                                    illustrationFooterAside.Orientation = Orientation.Horizontal;
                                                                                                                    illustrationFooterAside.HorizontalAlignment = HorizontalAlignment.Right;
                                                                                                                    illustrationFooterItem = new StackPanel();
                                                                                                                    illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                                                    illustrationFooterItemIcon = new PackIcon();
                                                                                                                    illustrationFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                                                    illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                                                    illustrationFooterItemLabel = new TextBlock();
                                                                                                                    illustrationFooterItemLabel.Text = rawCountLikes;
                                                                                                                    illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                                                    illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                                                    illustrationFooterItem = new StackPanel();
                                                                                                                    illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                                                    illustrationFooterItemIcon = new PackIcon();
                                                                                                                    illustrationFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                                                    illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                                                    illustrationFooterItemLabel = new TextBlock();
                                                                                                                    illustrationFooterItemLabel.Text = "0";
                                                                                                                    illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                                                    illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                                                    illustrationFooterItem = new StackPanel();
                                                                                                                    illustrationFooterItem.Orientation = Orientation.Horizontal;
                                                                                                                    illustrationFooterItemIcon = new PackIcon();
                                                                                                                    illustrationFooterItemIcon.Kind = PackIconKind.Chat;
                                                                                                                    illustrationFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemIcon);
                                                                                                                    illustrationFooterItemLabel = new TextBlock();
                                                                                                                    illustrationFooterItemLabel.Text = rawCountComments;
                                                                                                                    illustrationFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustrationFooterItem.Children.Add(illustrationFooterItemLabel);
                                                                                                                    illustrationFooterAside.Children.Add(illustrationFooterItem);
                                                                                                                    illustrationFooter.Children.Add(illustrationFooterAside);
                                                                                                                    illustration.Children.Add(illustrationFooter);
                                                                                                                    TextBlock illustrationAuthorLabel = new TextBlock();
                                                                                                                    illustrationAuthorLabel.Text = authorName;
                                                                                                                    illustrationAuthorLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustration.Children.Add(illustrationAuthorLabel);
                                                                                                                    Separator illustrationSeparator = new Separator();
                                                                                                                    illustration.Children.Add(illustrationSeparator);
                                                                                                                    TextBlock illustrationGameNameLabel = new TextBlock();
                                                                                                                    illustrationGameNameLabel.Text = illustrationGameName;
                                                                                                                    illustrationGameNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                                    illustration.Children.Add(illustrationGameNameLabel);
                                                                                                                    totalIllustrationsItem.body = illustration;
                                                                                                                    communityElements.Add(totalIllustrationsItem);
                                                                                                                    illustration.DataContext = id;
                                                                                                                    illustration.MouseLeftButtonUp += SelectIllustrationHandler;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch (System.Net.WebException exception)
                                        {
                                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                            this.Close();
                                        }

                                        try
                                        {
                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/all");
                                            innerNestedWebRequest.Method = "GET";
                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                            {
                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = innerNestedReader.ReadToEnd();
                                                    ManualsResponseInfo myInnerNestedObj = (ManualsResponseInfo)js.Deserialize(objText, typeof(ManualsResponseInfo));
                                                    status = myInnerNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<Manual> totalManuals = myInnerNestedObj.manuals;

                                                        totalManuals = totalManuals.Where<Manual>((Manual item) =>
                                                        {
                                                            return item.game == gameId;
                                                        }).ToList<Manual>();
                                                        
                                                        manuals.Children.Clear();
                                                        int totalManualsCount = totalManuals.Count;
                                                        bool isHaveManuals = totalManualsCount >= 1;
                                                        manuals.HorizontalAlignment = HorizontalAlignment.Left;
                                                        foreach (Manual totalManualsItem in totalManuals)
                                                        {
                                                            // string gameId = totalManualsItem.game;
                                                            HttpWebRequest communityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                            communityContentWebRequest.Method = "GET";
                                                            communityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse communityContentWebResponse = (HttpWebResponse)communityContentWebRequest.GetResponse())
                                                            {
                                                                using (var communityContentReader = new StreamReader(communityContentWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = communityContentReader.ReadToEnd();
                                                                    GamesListResponseInfo myCommunityContentObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                    string responseStatus = myCommunityContentObj.status;
                                                                    bool isOKStatus = responseStatus == "OK";
                                                                    if (isOKStatus)
                                                                    {
                                                                        List<GameResponseInfo> totalGames = myCommunityContentObj.games;
                                                                        List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                                        {
                                                                            string someGameId = someGame._id;
                                                                            bool isIdMatches = someGameId == gameId;
                                                                            return isIdMatches;
                                                                        }).ToList<GameResponseInfo>();
                                                                        int countResults = results.Count;
                                                                        bool isHaveResults = countResults >= 1;
                                                                        if (isHaveResults)
                                                                        {
                                                                            HttpWebRequest innerCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/comments/all");
                                                                            innerCommunityContentWebRequest.Method = "GET";
                                                                            innerCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                            using (HttpWebResponse innerCommunityContentWebResponse = (HttpWebResponse)innerCommunityContentWebRequest.GetResponse())
                                                                            {
                                                                                using (var innerCommunityContentReader = new StreamReader(innerCommunityContentWebResponse.GetResponseStream()))
                                                                                {
                                                                                    js = new JavaScriptSerializer();
                                                                                    objText = innerCommunityContentReader.ReadToEnd();
                                                                                    ManualCommentsResponseInfo myInnerCommunityContentObj = (ManualCommentsResponseInfo)js.Deserialize(objText, typeof(ManualCommentsResponseInfo));
                                                                                    status = myInnerCommunityContentObj.status;
                                                                                    isOkStatus = status == "OK";
                                                                                    if (isOkStatus)
                                                                                    {
                                                                                        string id = totalManualsItem._id;
                                                                                        List<ManualComment> reviewComments = myInnerCommunityContentObj.comments;
                                                                                        List<ManualComment> currentManualComments = reviewComments.Where<ManualComment>((ManualComment comment) =>
                                                                                        {
                                                                                            string commentManualId = comment.manual;
                                                                                            bool isCurrentManual = commentManualId == id;
                                                                                            return isCurrentManual;
                                                                                        }).ToList<ManualComment>();
                                                                                        int countComments = currentManualComments.Count;
                                                                                        string rawCountComments = countComments.ToString();
                                                                                        GameResponseInfo manualGame = results[0];
                                                                                        string manualGameName = manualGame.name;
                                                                                        string title = totalManualsItem.title;
                                                                                        string desc = totalManualsItem.desc;
                                                                                        int likes = totalManualsItem.likes;
                                                                                        int dislikes = totalManualsItem.dislikes;
                                                                                        StackPanel manual = new StackPanel();
                                                                                        manual.Width = 500;
                                                                                        manual.Margin = new Thickness(15);
                                                                                        manual.Background = System.Windows.Media.Brushes.LightGray;
                                                                                        TextBlock manualTitleLabel = new TextBlock();
                                                                                        manualTitleLabel.FontSize = 16;
                                                                                        manualTitleLabel.Margin = new Thickness(15);
                                                                                        manualTitleLabel.Text = title;
                                                                                        manual.Children.Add(manualTitleLabel);
                                                                                        StackPanel manualPhotoWrap = new StackPanel();
                                                                                        manualPhotoWrap.Orientation = Orientation.Horizontal;
                                                                                        manualPhotoWrap.Background = System.Windows.Media.Brushes.LightSlateGray;
                                                                                        manualPhotoWrap.Margin = new Thickness(15);
                                                                                        Image manualPhoto = new Image();
                                                                                        manualPhoto.Margin = new Thickness(15);
                                                                                        manualPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                        manualPhoto.Width = 50;
                                                                                        manualPhoto.Height = 50;
                                                                                        manualPhoto.BeginInit();
                                                                                        manualPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/manual/photo/?id=" + id));
                                                                                        manualPhoto.EndInit();
                                                                                        manualPhotoWrap.Children.Add(manualPhoto);
                                                                                        manual.Children.Add(manualPhotoWrap);
                                                                                        TextBlock manualDescLabel = new TextBlock();
                                                                                        manualDescLabel.Margin = new Thickness(15);
                                                                                        manualDescLabel.Text = desc;
                                                                                        manual.Children.Add(manualDescLabel);
                                                                                        Separator manualSeparator = new Separator();
                                                                                        manual.Children.Add(manualSeparator);
                                                                                        DockPanel manualFooter = new DockPanel();
                                                                                        PackIcon manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                                        manualFooter.Children.Add(manualFooterItemIcon);
                                                                                        manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                                        manualFooter.Children.Add(manualFooterItemIcon);
                                                                                        manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                                        manualFooter.Children.Add(manualFooterItemIcon);
                                                                                        manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                                        manualFooter.Children.Add(manualFooterItemIcon);
                                                                                        manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Star;
                                                                                        manualFooter.Children.Add(manualFooterItemIcon);
                                                                                        TextBlock manualFooterItemLabel = new TextBlock();
                                                                                        manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                        int feedBack = likes + dislikes;
                                                                                        string rawFeedBack = feedBack.ToString();
                                                                                        manualFooterItemLabel.Text = "Оценок: " + rawFeedBack;
                                                                                        manualFooter.Children.Add(manualFooterItemLabel);
                                                                                        StackPanel manualFooterItem = new StackPanel();
                                                                                        manualFooterItem.Orientation = Orientation.Horizontal;
                                                                                        manualFooterItem.HorizontalAlignment = HorizontalAlignment.Right;
                                                                                        manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                        manualFooterItem.Children.Add(manualFooterItemIcon);
                                                                                        manualFooterItemLabel = new TextBlock();
                                                                                        manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemLabel.Text = "0";
                                                                                        manualFooterItem.Children.Add(manualFooterItemLabel);
                                                                                        manualFooterItemIcon = new PackIcon();
                                                                                        manualFooterItemIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemIcon.Kind = PackIconKind.Chat;
                                                                                        manualFooterItem.Children.Add(manualFooterItemIcon);
                                                                                        manualFooterItemLabel = new TextBlock();
                                                                                        manualFooterItemLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                        manualFooterItemLabel.Text = rawCountComments;
                                                                                        manualFooterItem.Children.Add(manualFooterItemLabel);
                                                                                        manualFooter.Children.Add(manualFooterItem);
                                                                                        manual.Children.Add(manualFooter);
                                                                                        TextBlock manualGameNameLabel = new TextBlock();
                                                                                        manualGameNameLabel.Margin = new Thickness(15);
                                                                                        manualGameNameLabel.Text = manualGameName;
                                                                                        manual.Children.Add(manualGameNameLabel);
                                                                                        totalManualsItem.body = manual;
                                                                                        communityElements.Add(totalManualsItem);
                                                                                        manual.DataContext = id;
                                                                                        manual.MouseLeftButtonUp += SelectManualHandler;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch (System.Net.WebException exception)
                                        {
                                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                            this.Close();
                                        }

                                        try
                                        {
                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/all");
                                            innerNestedWebRequest.Method = "GET";
                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                            {
                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = innerNestedReader.ReadToEnd();
                                                    ScreenShotsResponseInfo myInnerNestedObj = (ScreenShotsResponseInfo)js.Deserialize(objText, typeof(ScreenShotsResponseInfo));
                                                    status = myInnerNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<ScreenShot> totalCommunityScreenShots = myInnerNestedObj.screenShots;

                                                        totalCommunityScreenShots = totalCommunityScreenShots.Where<ScreenShot>((ScreenShot item) =>
                                                        {
                                                            return item.game == gameId;
                                                        }).ToList<ScreenShot>();
                                                        
                                                        communityScreenShots.Children.Clear();
                                                        int totalCommunityScreenShotsCount = totalCommunityScreenShots.Count;
                                                        communityScreenShots.HorizontalAlignment = HorizontalAlignment.Left;
                                                        foreach (ScreenShot totalCommunityScreenShotsItem in totalCommunityScreenShots)
                                                        {
                                                            string id = totalCommunityScreenShotsItem._id;
                                                            string userId = totalCommunityScreenShotsItem.user;
                                                            HttpWebRequest communityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                                            communityContentWebRequest.Method = "GET";
                                                            communityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse communityContentWebResponse = (HttpWebResponse)communityContentWebRequest.GetResponse())
                                                            {
                                                                using (var communityContentReader = new StreamReader(communityContentWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = communityContentReader.ReadToEnd();
                                                                    UserResponseInfo myCommunityContentObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                    status = myCommunityContentObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        HttpWebRequest innerCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                                        innerCommunityContentWebRequest.Method = "GET";
                                                                        innerCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                        using (HttpWebResponse innerCommunityContentWebResponse = (HttpWebResponse)innerCommunityContentWebRequest.GetResponse())
                                                                        {
                                                                            using (var innerCommunityContentReader = new StreamReader(innerCommunityContentWebResponse.GetResponseStream()))
                                                                            {
                                                                                js = new JavaScriptSerializer();
                                                                                objText = innerCommunityContentReader.ReadToEnd();
                                                                                GamesListResponseInfo myInnerCommunityContentObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                                string responseStatus = myInnerCommunityContentObj.status;
                                                                                bool isOKStatus = responseStatus == "OK";
                                                                                if (isOKStatus)
                                                                                {
                                                                                    // string gameId = totalCommunityScreenShotsItem.game;
                                                                                    List<GameResponseInfo> totalGames = myInnerCommunityContentObj.games;
                                                                                    List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                                                    {
                                                                                        string someGameId = someGame._id;
                                                                                        bool isIdMatches = someGameId == gameId;
                                                                                        return isIdMatches;
                                                                                    }).ToList<GameResponseInfo>();
                                                                                    int countResults = results.Count;
                                                                                    bool isHaveResults = countResults >= 1;
                                                                                    if (isHaveResults)
                                                                                    {
                                                                                        GameResponseInfo screenShotGame = results[0];
                                                                                        HttpWebRequest nestedCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/comments/all");
                                                                                        nestedCommunityContentWebRequest.Method = "GET";
                                                                                        nestedCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                        HttpWebResponse nestedCommunityContentWebResponse = (HttpWebResponse)nestedCommunityContentWebRequest.GetResponse();
                                                                                        {
                                                                                            using (var nestedCommunityContentReader = new StreamReader(nestedCommunityContentWebResponse.GetResponseStream()))
                                                                                            {
                                                                                                js = new JavaScriptSerializer();
                                                                                                objText = nestedCommunityContentReader.ReadToEnd();
                                                                                                CommunityScreenShotCommentsResponseInfo myNestedCommunityContentObj = (CommunityScreenShotCommentsResponseInfo)js.Deserialize(objText, typeof(CommunityScreenShotCommentsResponseInfo));
                                                                                                status = myNestedCommunityContentObj.status;
                                                                                                isOkStatus = status == "OK";
                                                                                                if (isOkStatus)
                                                                                                {
                                                                                                    int likes = totalCommunityScreenShotsItem.likes;
                                                                                                    string screenShotGameName = screenShotGame.name;
                                                                                                    List<CommunityScreenShotComment> communityScreenShotsComments = myNestedCommunityContentObj.comments;
                                                                                                    List<CommunityScreenShotComment> currentCommunityScreenShotComments = communityScreenShotsComments.Where<CommunityScreenShotComment>((CommunityScreenShotComment comment) =>
                                                                                                    {
                                                                                                        string commentCommunityScreenShotId = comment.screenShot;
                                                                                                        bool isCurrentScreenShot = commentCommunityScreenShotId == id;
                                                                                                        return isCurrentScreenShot;
                                                                                                    }).ToList<CommunityScreenShotComment>();
                                                                                                    int countComments = currentCommunityScreenShotComments.Count;
                                                                                                    string rawCountComments = countComments.ToString(); ;
                                                                                                    string rawCountLikes = likes.ToString();
                                                                                                    User author = myCommunityContentObj.user;
                                                                                                    string authorName = author.name;
                                                                                                    StackPanel communityScreenShot = new StackPanel();
                                                                                                    communityScreenShot.Width = 500;
                                                                                                    communityScreenShot.Margin = new Thickness(15);
                                                                                                    communityScreenShot.Background = System.Windows.Media.Brushes.LightGray;
                                                                                                    Image communityScreenShotPhoto = new Image();
                                                                                                    communityScreenShotPhoto.Margin = new Thickness(15);
                                                                                                    communityScreenShotPhoto.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                                    communityScreenShotPhoto.Width = 500;
                                                                                                    communityScreenShotPhoto.Height = 425;
                                                                                                    communityScreenShotPhoto.BeginInit();
                                                                                                    communityScreenShotPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/screenshot/photo/?id=" + id));
                                                                                                    communityScreenShotPhoto.EndInit();
                                                                                                    communityScreenShot.Children.Add(communityScreenShotPhoto);
                                                                                                    DockPanel communityScreenShotFooter = new DockPanel();
                                                                                                    PackIcon communityScreenShotFooterItemIcon = new PackIcon();
                                                                                                    communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                                    communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooter.Children.Add(communityScreenShotFooterItemIcon);
                                                                                                    communityScreenShotFooterItemIcon = new PackIcon();
                                                                                                    communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbDown;
                                                                                                    communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooter.Children.Add(communityScreenShotFooterItemIcon);
                                                                                                    StackPanel communityScreenShotFooterItem = new StackPanel();
                                                                                                    communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                                                    communityScreenShotFooterItemIcon = new PackIcon();
                                                                                                    communityScreenShotFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                                    communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                                                    TextBlock communityScreenShotFooterItemLabel = new TextBlock();
                                                                                                    communityScreenShotFooterItemLabel.Text = "Наградить";
                                                                                                    communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                                                    communityScreenShotFooter.Children.Add(communityScreenShotFooterItem);
                                                                                                    StackPanel communityScreenShotFooterAside = new StackPanel();
                                                                                                    communityScreenShotFooterAside.Orientation = Orientation.Horizontal;
                                                                                                    communityScreenShotFooterAside.HorizontalAlignment = HorizontalAlignment.Right;
                                                                                                    communityScreenShotFooterItem = new StackPanel();
                                                                                                    communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                                                    communityScreenShotFooterItemIcon = new PackIcon();
                                                                                                    communityScreenShotFooterItemIcon.Kind = PackIconKind.ThumbUp;
                                                                                                    communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                                                    communityScreenShotFooterItemLabel = new TextBlock();
                                                                                                    communityScreenShotFooterItemLabel.Text = rawCountLikes;
                                                                                                    communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                                                    communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                                                    communityScreenShotFooterItem = new StackPanel();
                                                                                                    communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                                                    communityScreenShotFooterItemIcon = new PackIcon();
                                                                                                    communityScreenShotFooterItemIcon.Kind = PackIconKind.Medal;
                                                                                                    communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                                                    communityScreenShotFooterItemLabel = new TextBlock();
                                                                                                    communityScreenShotFooterItemLabel.Text = "0";
                                                                                                    communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                                                    communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                                                    communityScreenShotFooterItem = new StackPanel();
                                                                                                    communityScreenShotFooterItem.Orientation = Orientation.Horizontal;
                                                                                                    communityScreenShotFooterItemIcon = new PackIcon();
                                                                                                    communityScreenShotFooterItemIcon.Kind = PackIconKind.Chat;
                                                                                                    communityScreenShotFooterItemIcon.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemIcon);
                                                                                                    communityScreenShotFooterItemLabel = new TextBlock();
                                                                                                    communityScreenShotFooterItemLabel.Text = rawCountComments;
                                                                                                    communityScreenShotFooterItemLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShotFooterItem.Children.Add(communityScreenShotFooterItemLabel);
                                                                                                    communityScreenShotFooterAside.Children.Add(communityScreenShotFooterItem);
                                                                                                    communityScreenShotFooter.Children.Add(communityScreenShotFooterAside);
                                                                                                    communityScreenShot.Children.Add(communityScreenShotFooter);
                                                                                                    TextBlock communityScreenShotAuthorLabel = new TextBlock();
                                                                                                    communityScreenShotAuthorLabel.Text = authorName;
                                                                                                    communityScreenShotAuthorLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShot.Children.Add(communityScreenShotAuthorLabel);
                                                                                                    Separator communityScreenShotSeparator = new Separator();
                                                                                                    communityScreenShot.Children.Add(communityScreenShotSeparator);
                                                                                                    TextBlock communityScreenShotGameNameLabel = new TextBlock();
                                                                                                    communityScreenShotGameNameLabel.Text = screenShotGameName;
                                                                                                    communityScreenShotGameNameLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                    communityScreenShot.Children.Add(communityScreenShotGameNameLabel);
                                                                                                    totalCommunityScreenShotsItem.body = communityScreenShot;
                                                                                                    communityElements.Add(totalCommunityScreenShotsItem);
                                                                                                    communityScreenShot.DataContext = id;
                                                                                                    communityScreenShot.MouseLeftButtonUp += SelectCommunityScreenShotHandler;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch (System.Net.WebException exception)
                                        {
                                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                            this.Close();
                                        }

                                        try
                                        {
                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/all");
                                            innerNestedWebRequest.Method = "GET";
                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                            {
                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = innerNestedReader.ReadToEnd();
                                                    ReviewsResponseInfo myInnerNestedObj = (ReviewsResponseInfo)js.Deserialize(objText, typeof(ReviewsResponseInfo));
                                                    status = myInnerNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<Review> totalReviews = myInnerNestedObj.reviews;

                                                        totalReviews = totalReviews.Where<Review>((Review item) =>
                                                        {
                                                            return item.game == gameId;
                                                        }).ToList<Review>();
                                                        
                                                        reviews.Children.Clear();
                                                        int totalReviewsCount = totalReviews.Count;
                                                        bool isHaveReviews = totalReviewsCount >= 1;
                                                        reviews.HorizontalAlignment = HorizontalAlignment.Left;
                                                        foreach (Review totalReviewsItem in totalReviews)
                                                        {
                                                            string id = totalReviewsItem._id;
                                                            string desc = totalReviewsItem.desc;
                                                            // string gameId = totalReviewsItem.game;
                                                            DateTime date = totalReviewsItem.date;
                                                            string hours = totalReviewsItem.hours;
                                                            string author = totalReviewsItem.user;
                                                            string visibility = totalReviewsItem.visibility;
                                                            bool isForAll = visibility == "Для всех";
                                                            bool isOnlyFriends = visibility == "Только для друзей";
                                                            HttpWebRequest communityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                                            communityContentWebRequest.Method = "GET";
                                                            communityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                            using (HttpWebResponse communityContentWebResponse = (HttpWebResponse)communityContentWebRequest.GetResponse())
                                                            {
                                                                using (var communityContentReader = new StreamReader(communityContentWebResponse.GetResponseStream()))
                                                                {
                                                                    js = new JavaScriptSerializer();
                                                                    objText = communityContentReader.ReadToEnd();
                                                                    FriendsResponseInfo myCommunityContentObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                                                    status = myCommunityContentObj.status;
                                                                    isOkStatus = status == "OK";
                                                                    if (isOkStatus)
                                                                    {
                                                                        List<Friend> friendRecords = myCommunityContentObj.friends.Where<Friend>((Friend joint) =>
                                                                        {
                                                                            string userId = joint.user;
                                                                            bool isMyFriend = userId == currentUserId;
                                                                            return isMyFriend;
                                                                        }).ToList<Friend>();
                                                                        friendsIds = new List<string>();
                                                                        foreach (Friend friendRecord in friendRecords)
                                                                        {
                                                                            string localFriendId = friendRecord.friend;
                                                                            friendsIds.Add(localFriendId);
                                                                        }
                                                                        bool isAuthorFriend = friendsIds.Contains(author);
                                                                        bool isHaveAccess = isOnlyFriends && isAuthorFriend;
                                                                        bool isAuthor = currentUserId == author;
                                                                        bool isAddReview = isForAll || isHaveAccess || isAuthor;
                                                                        if (isAddReview)
                                                                        {
                                                                            HttpWebRequest innerCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                                                            innerCommunityContentWebRequest.Method = "GET";
                                                                            innerCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                            using (HttpWebResponse innerCommunityContentWebResponse = (HttpWebResponse)innerCommunityContentWebRequest.GetResponse())
                                                                            {
                                                                                using (var innerCommunityContentReader = new StreamReader(innerCommunityContentWebResponse.GetResponseStream()))
                                                                                {
                                                                                    js = new JavaScriptSerializer();
                                                                                    objText = innerCommunityContentReader.ReadToEnd();
                                                                                    GamesListResponseInfo myInnerCommunityContentObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                                                                    string responseStatus = myInnerCommunityContentObj.status;
                                                                                    bool isOKStatus = responseStatus == "OK";
                                                                                    if (isOKStatus)
                                                                                    {
                                                                                        List<GameResponseInfo> totalGames = myInnerCommunityContentObj.games;
                                                                                        List<GameResponseInfo> results = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                                                                        {
                                                                                            string someGameId = someGame._id;
                                                                                            bool isIdMatches = someGameId == gameId;
                                                                                            return isIdMatches;
                                                                                        }).ToList<GameResponseInfo>();
                                                                                        int countResults = results.Count;
                                                                                        bool isHaveResults = countResults >= 1;
                                                                                        if (isHaveResults)
                                                                                        {
                                                                                            HttpWebRequest nestedCommunityContentWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/comments/all");
                                                                                            nestedCommunityContentWebRequest.Method = "GET";
                                                                                            nestedCommunityContentWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                            using (HttpWebResponse nestedCommunityContentWebResponse = (HttpWebResponse)nestedCommunityContentWebRequest.GetResponse())
                                                                                            {
                                                                                                using (var nestedCommunityContentReader = new StreamReader(nestedCommunityContentWebResponse.GetResponseStream()))
                                                                                                {
                                                                                                    js = new JavaScriptSerializer();
                                                                                                    objText = nestedCommunityContentReader.ReadToEnd();
                                                                                                    ReviewCommentsResponseInfo myNestedCommunityContentObj = (ReviewCommentsResponseInfo)js.Deserialize(objText, typeof(ReviewCommentsResponseInfo));
                                                                                                    status = myNestedCommunityContentObj.status;
                                                                                                    isOkStatus = status == "OK";
                                                                                                    if (isOkStatus)
                                                                                                    {
                                                                                                        List<ReviewComment> reviewComments = myNestedCommunityContentObj.comments;
                                                                                                        List<ReviewComment> currentReviewComments = reviewComments.Where<ReviewComment>((ReviewComment comment) =>
                                                                                                        {
                                                                                                            string commentReviewId = comment.review;
                                                                                                            bool isCurrentReview = commentReviewId == id;
                                                                                                            return isCurrentReview;
                                                                                                        }).ToList<ReviewComment>();
                                                                                                        int countComments = currentReviewComments.Count;
                                                                                                        string rawCountComments = countComments.ToString();
                                                                                                        GameResponseInfo reviewGame = results[0];
                                                                                                        string reviewGameName = reviewGame.name;
                                                                                                        string rawDate = date.ToLongDateString();
                                                                                                        StackPanel review = new StackPanel();
                                                                                                        review.Width = 500;
                                                                                                        review.Margin = new Thickness(15);
                                                                                                        review.Background = System.Windows.Media.Brushes.LightGray;
                                                                                                        TextBlock reviewAdvicesLabel = new TextBlock();
                                                                                                        reviewAdvicesLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                        int countAdvices = 0;
                                                                                                        string rawCountAdvices = countAdvices.ToString();
                                                                                                        string reviewAdvicesLabelContent = "Пользователей, посчитавших обзор полезным: " + rawCountAdvices;
                                                                                                        reviewAdvicesLabel.Text = reviewAdvicesLabelContent;
                                                                                                        review.Children.Add(reviewAdvicesLabel);
                                                                                                        TextBlock reviewFunsLabel = new TextBlock();
                                                                                                        reviewFunsLabel.Margin = new Thickness(15, 5, 15, 5);
                                                                                                        int countFuns = 0;
                                                                                                        string rawCountFuns = countFuns.ToString();
                                                                                                        string reviewFunsLabelContent = "Пользователей, посчитавших обзор забавным: " + rawCountFuns;
                                                                                                        reviewFunsLabel.Text = reviewFunsLabelContent;
                                                                                                        review.Children.Add(reviewFunsLabel);
                                                                                                        StackPanel reviewHeader = new StackPanel();
                                                                                                        reviewHeader.Orientation = Orientation.Horizontal;
                                                                                                        PackIcon reviewIcon = new PackIcon();
                                                                                                        reviewIcon.Margin = new Thickness(15);
                                                                                                        reviewIcon.HorizontalAlignment = HorizontalAlignment.Left;
                                                                                                        reviewIcon.Width = 50;
                                                                                                        reviewIcon.Height = 50;
                                                                                                        reviewIcon.Kind = PackIconKind.ThumbsUp;
                                                                                                        reviewHeader.Children.Add(reviewIcon);
                                                                                                        StackPanel reviewHeaderAside = new StackPanel();
                                                                                                        reviewHeaderAside.Margin = new Thickness(15);
                                                                                                        TextBlock reviewHeaderAsideRecommendationLabel = new TextBlock();
                                                                                                        reviewHeaderAsideRecommendationLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                        reviewHeaderAsideRecommendationLabel.FontSize = 16;
                                                                                                        reviewHeaderAsideRecommendationLabel.Text = "Рекомендую";
                                                                                                        reviewHeaderAside.Children.Add(reviewHeaderAsideRecommendationLabel);
                                                                                                        TextBlock reviewHeaderAsideHoursLabel = new TextBlock();
                                                                                                        string rawHours = hours.ToString();
                                                                                                        string reviewHeaderAsideHoursLabelContent = rawHours + " ч. всего";
                                                                                                        reviewHeaderAsideHoursLabel.Text = reviewHeaderAsideHoursLabelContent;
                                                                                                        reviewHeaderAside.Children.Add(reviewHeaderAsideHoursLabel);
                                                                                                        reviewHeader.Children.Add(reviewHeaderAside);
                                                                                                        review.Children.Add(reviewHeader);
                                                                                                        TextBlock reviewDateLabel = new TextBlock();
                                                                                                        reviewDateLabel.Margin = new Thickness(15);
                                                                                                        string reviewDateLabelContent = "Опубликовано: " + rawDate;
                                                                                                        reviewDateLabel.Foreground = System.Windows.Media.Brushes.Orange;
                                                                                                        reviewDateLabel.Text = reviewDateLabelContent;
                                                                                                        review.Children.Add(reviewDateLabel);
                                                                                                        TextBlock reviewDescLabel = new TextBlock();
                                                                                                        reviewDescLabel.Margin = new Thickness(15);
                                                                                                        reviewDescLabel.Text = desc;
                                                                                                        reviewDescLabel.FontSize = 14;
                                                                                                        review.Children.Add(reviewDescLabel);
                                                                                                        Separator reviewSeparator = new Separator();
                                                                                                        review.Children.Add(reviewSeparator);
                                                                                                        DockPanel reviewFooter = new DockPanel();
                                                                                                        reviewFooter.Margin = new Thickness(15);
                                                                                                        TextBlock reviewFooterGameNameLabel = new TextBlock();
                                                                                                        reviewFooterGameNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                                                                                        reviewFooterGameNameLabel.Text = reviewGameName;
                                                                                                        reviewFooter.Children.Add(reviewFooterGameNameLabel);
                                                                                                        StackPanel reviewFooterComments = new StackPanel();
                                                                                                        reviewFooterComments.Margin = new Thickness(15, 0, 15, 0);
                                                                                                        reviewFooterComments.Orientation = Orientation.Horizontal;
                                                                                                        reviewFooterComments.HorizontalAlignment = HorizontalAlignment.Right;
                                                                                                        PackIcon reviewFooterCommentsIcon = new PackIcon();
                                                                                                        reviewFooterCommentsIcon.Kind = PackIconKind.Chat;
                                                                                                        reviewFooterCommentsIcon.Margin = new Thickness(5, 0, 5, 0);
                                                                                                        reviewFooterComments.Children.Add(reviewFooterCommentsIcon);
                                                                                                        TextBlock reviewFooterCountCommentsLabel = new TextBlock();
                                                                                                        reviewFooterCountCommentsLabel.Margin = new Thickness(5, 0, 5, 0);
                                                                                                        reviewFooterCountCommentsLabel.Text = rawCountComments;
                                                                                                        reviewFooterComments.Children.Add(reviewFooterCountCommentsLabel);
                                                                                                        reviewFooter.Children.Add(reviewFooterComments);
                                                                                                        review.Children.Add(reviewFooter);
                                                                                                        totalReviewsItem.body = review;
                                                                                                        communityElements.Add(totalReviewsItem);
                                                                                                        review.DataContext = id;
                                                                                                        review.MouseLeftButtonUp += SelectReviewHandler;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch (System.Net.WebException exception)
                                        {
                                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                            this.Close();
                                        }
                                        activeGameCommunityContent.Children.Clear();
                                        int communityElementsCount = communityElements.Count;
                                        bool isHaveElements = communityElementsCount >= 1;
                                        if (isHaveElements)
                                        {
                                            activeGameCommunityContent.HorizontalAlignment = HorizontalAlignment.Left;
                                            foreach (CommunityContent communityElement in communityElements)
                                            {
                                                UIElement communityElementBody = communityElement.body;
                                                activeGameCommunityContent.Children.Add(communityElementBody);
                                            }
                                        }
                                        else
                                        {
                                            TextBlock notFoundLabel = new TextBlock();
                                            notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                            notFoundLabel.TextAlignment = TextAlignment.Center;
                                            notFoundLabel.FontSize = 18;
                                            notFoundLabel.Text = "Иллюстраций не найдено";
                                            activeGameCommunityContent.HorizontalAlignment = HorizontalAlignment.Center;
                                            activeGameCommunityContent.Children.Add(notFoundLabel);
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void ToggleActiveGameActivityFooterPanelHandler (object sender, RoutedEventArgs e)
        {
            ToggleActiveGameActivityFooterPanel();
        }

        public void ToggleActiveGameActivityFooterPanel ()
        {
            bool isFocused = activeGameActivityBox.IsMouseCaptured;
            if (isFocused)
            {
                activeGameActivityFooterPanel.Visibility = visible;
            }
            else
            {
                activeGameActivityFooterPanel.Visibility = invisible;
            }
        }

        public void SendActivityCommentHandler (object sender, RoutedEventArgs e)
        {
            SendActivityComment();
        }

        public void SendActivityComment ()
        {
            string activeGameActivityBoxContent = activeGameActivityBox.Text;
            try
            {
                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=receiveComment&data=" + activeGameActivityBoxContent);
                innerNestedWebRequest.Method = "GET";
                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                {
                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = innerNestedReader.ReadToEnd();
                        UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myInnerNestedObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            activeGameActivityFooterPanel.Visibility = invisible;
                            activeGameActivityBox.Text = "";
                            GetMyActivities();
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }


        private void GameActionHandler(object sender, RoutedEventArgs e)
        {
            GameAction();
        }

        public void AddUserToGameStats(string gameId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/stats/increase/?id=" + gameId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GameAction ()
        {
            object rawGameActionLabelContent = gameActionLabel.Content;
            string gameActionLabelContent = rawGameActionLabelContent.ToString();
            bool isPlayAction = gameActionLabelContent == Properties.Resources.playBtnLabelContent;
            bool isInstallAction = gameActionLabelContent == Properties.Resources.installBtnLabelContent;
            bool isBuyAction = gameActionLabelContent.StartsWith("Купить");
            if (isPlayAction)
            {
                RunGame(gameNameLabel.Text);
            }
            else if (isInstallAction)
            {
                InstallGame();
            }
            else if (isBuyAction)
            {
                object rawGameData = gameActionLabel.DataContext;
                Dictionary<String, Object> gameData = ((Dictionary<String, Object>)(rawGameData));
                BuyGame(gameData);
            }
        }

        public void BuyGame (Dictionary<String, Object> gameData)
        {
            object rawGameId = gameData["id"];
            string gameId = ((string)(rawGameId));
            object rawPrice = gameData["price"];
            int price = ((int)(rawPrice));
            HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
            webRequest.Method = "GET";
            webRequest.UserAgent = ".NET Framework Test Client";
            using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
            {
                using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                {
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    string objText = reader.ReadToEnd();
                    UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                    string status = myobj.status;
                    bool isOkStatus = status == "OK";
                    if (isOkStatus)
                    {
                        User user = myobj.user;
                        int amount = user.amount;
                        bool isCanBuy = amount >= price;
                        string msgContent = "";
                        if (isCanBuy)
                        {
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/add/?id=" + gameId + @"&user=" + currentUserId + @"&price=" + price);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=buyGame&data=" + gameId);
                                        innerNestedWebRequest.Method = "GET";
                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                        {
                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerNestedReader.ReadToEnd();
                                                UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                status = myInnerNestedObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    SelectGame(gameData);
                                                    msgContent = "Поздравляем с приобретением игры!";
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        else
                        {
                            msgContent = "На вашем счете недостаточно средств!";
                        }
                        MessageBox.Show(msgContent, "Внимание");
                    }
                }
            }
        }

        private void RemoveGameHandler(object sender, RoutedEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            object data = icon.DataContext;
            string name = ((string)(data));
            RemoveGame(name);
        }

        public void RemoveGameFromCollectionsMenuHandler(object sender, RoutedEventArgs e)
        {
            MenuItem icon = ((MenuItem)(sender));
            object rawMenuItemData = icon.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            RemoveGameFromCollectionMenu(menuItemData);
        }

        public void RemoveGameFromCollectionMenu(Dictionary<String, Object> menuItemData)
        {
            string game = ((string)(menuItemData["game"]));
            string collection = ((string)(menuItemData["collection"]));
            RemoveGame(game);
            /*GetGameCollections();
            GetHiddenGames();*/
            GetGameCollectionItems(collection);
        }

        public void RemoveGame(string name)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";

            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            List<Game> results = updatedGames.Where((Game someGame) =>
            {

                string someGameId = someGame.id;

                string gameName = name;
                string someGameName = someGame.name;
                bool isCurrentGame = someGameName == gameName;
                return isCurrentGame;
            }).ToList();
            int countResults = results.Count;
            bool isHaveResults = countResults >= 1;
            bool isGameWasRemoved = false;
            if (isHaveResults)
            {
                Game result = results[0];
                string resultId = result.id;
                string resultName = result.name;
                FileInfo fileInfo = new FileInfo(result.path);
                string gameFolder = fileInfo.DirectoryName;
                string gameScreenShotsFolder = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\screenshots\" + resultName;
                try
                {
                    Debugger.Log(0, "debug", Environment.NewLine + "gameScreenShotsFolder " + gameScreenShotsFolder + Environment.NewLine);
                    bool isCustomGame = resultId == "mockId";
                    if (isCustomGame)
                    {
                        string gameCache = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\games\" + resultName;
                        Directory.Delete(gameCache, true);
                        Directory.Delete(gameScreenShotsFolder, true);
                        Debugger.Log(0, "debug", Environment.NewLine + "удаляю локальную игру " + gameCache + Environment.NewLine);
                    }
                    else
                    {
                        Debugger.Log(0, "debug", Environment.NewLine + "удаляю магазинную игру " + gameFolder + Environment.NewLine);
                        Directory.Delete(gameFolder, true);
                        Directory.Delete(gameScreenShotsFolder, true);

                        HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                        webRequest.Method = "GET";
                        webRequest.UserAgent = ".NET Framework Test Client";
                        using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                        {
                            using (var reader = new StreamReader(webResponse.GetResponseStream()))
                            {
                                js = new JavaScriptSerializer();
                                string objText = reader.ReadToEnd();
                                GamesListResponseInfo myObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                string status = myObj.status;
                                bool isOkStatus = status == "OK";
                                if (isOkStatus)
                                {
                                    List<GameResponseInfo> games = myObj.games;
                                    int gameIndex = games.FindIndex((GameResponseInfo localGame) =>
                                    {
                                        string localGameId = localGame._id;
                                        bool isFound = localGameId == resultId;
                                        return isFound;
                                    });
                                    bool isGameFound = gameIndex >= 0;
                                    if (isGameFound)
                                    {
                                        GameResponseInfo remoteGame = games[gameIndex];
                                        int remoteGamePrice = remoteGame.price;
                                        bool isFreeGame = remoteGamePrice <= 0;
                                        if (isFreeGame)
                                        {
                                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/remove/?game=" + resultId + @"&user=" + currentUserId);
                                            innerWebRequest.Method = "GET";
                                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                            {
                                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = innerReader.ReadToEnd();
                                                    IconsResponseInfo myInnerObj = (IconsResponseInfo)js.Deserialize(objText, typeof(IconsResponseInfo));
                                                    status = myInnerObj.status;
                                                    isOkStatus = status == "OK";
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }

                    }
                    isGameWasRemoved = true;
                }
                catch (Exception e)
                {
                    isGameWasRemoved = false;
                    MessageBox.Show("Игра запущена. Закройте ее и попробуйте удалить заново", "Ошибка");
                    Debugger.Log(0, "debug", Environment.NewLine + "Delete exception " + e + Environment.NewLine);
                }

            }
            if (isGameWasRemoved)
            {
                updatedGames = updatedGames.Where((Game someGame) =>
                {

                    string someGameId = someGame.id;

                    // string gameName = gameNameLabel.Text;
                    string gameName = name;
                    string someGameName = someGame.name;
                    bool isCurrentGame = someGameName == gameName;
                    bool isOtherGame = !isCurrentGame;
                    string someGamePath = someGame.path;
                    if (isCurrentGame)
                    {
                        FileInfo fileInfo = new FileInfo(someGamePath);
                        string gameFolder = fileInfo.DirectoryName;

                        string gameScreenShotsFolder = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\screenshots\" + gameName;

                        /*
                        try
                        {
                            bool isCustomGame = someGameId == "mockId";
                            if (isCustomGame)
                            {
                                string gameCache = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\games\" + gameName;
                                Directory.Delete(gameCache, true);
                                Debugger.Log(0, "debug", Environment.NewLine + "удаляю локальную игру " + gameCache +  Environment.NewLine);
                            }
                            else
                            {
                                Debugger.Log(0, "debug", Environment.NewLine + "удаляю магазинную игру " + gameFolder + Environment.NewLine);
                                Directory.Delete(gameFolder, true);
                            }

                            Directory.Delete(gameScreenShotsFolder, true);

                        }
                        catch (Exception)
                        {
                            isOtherGame = true;
                            MessageBox.Show("Игра запущена. Закройте ее и попробуйте удалить заново", "Ошибка");
                        }
                        */
                    }
                    return isOtherGame;
                }).ToList();
            }

            string savedContent = js.Serialize(new SavedContent
            {
                games = updatedGames,
                friends = currentFriends,
                settings = currentSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            string keywords = keywordsLabel.Text;
            GetGamesList(keywords);
            GetGameCollections();
            GetHiddenGames();

        }

        public void OpenGamesLibraryHandler(object sender, RoutedEventArgs e)
        {
            OpenGamesLibrary();
        }

        public void OpenGamesLibrary()
        {
            mainControl.SelectedIndex = 0;
        }


        public void GameDownloadedHandler(object sender, EventArgs e)
        {
            Dialogs.DownloadGameDialog dialog = ((Dialogs.DownloadGameDialog)(sender));
            object dialogData = dialog.DataContext;
            Dictionary<String, Object> parsedDialogData = ((Dictionary<String, Object>)(dialogData));
            object rawStatus = parsedDialogData["status"];
            object rawId = parsedDialogData["id"];
            string status = ((string)(rawStatus));
            string id = ((string)(rawId));
            GameDownloaded(status, id);
        }

        public void GameDownloaded (string status, string id)
        {
            bool isOkStatus = status == "OK";
            if (isOkStatus)
            {
                GameSuccessDownloaded(id);
            }
            gameActionLabel.IsEnabled = true;
        }

        private void UserMenuItemSelectedHandler(object sender, RoutedEventArgs e)
        {
            ComboBox userMenu = ((ComboBox)(sender));
            int userMenuItemIndex = userMenu.SelectedIndex;
            UserMenuItemSelected(userMenuItemIndex);
        }

        public void UserMenuItemSelected(int index)
        {
            bool isMyProfile = index == 1;
            bool isAboutAccount = index == 2;
            bool isExit = index == 3;
            bool isStoreSettings = index == 4;
            bool isWallet = index == 5;
            if (isMyProfile)
            {
                ReturnToProfile();
            }
            else if (isAboutAccount)
            {
                OpenAccountSettings();
            }
            else if (isExit)
            {
                Logout();
            }
            else if (isStoreSettings)
            {
                OpenStoreSettings();
            }
            else if (isWallet)
            {
                OpenIncreaseAmount();
            }
            ResetMenu();
        }

        public void ToggleSupportControlHandler (object sender, RoutedEventArgs e)
        {
            DockPanel item = ((DockPanel)(sender));
            object itemData = item.DataContext;
            string rawIndex = itemData.ToString();
            int index = Int32.Parse(rawIndex);
            ToggleSupportControl(index);
        }

        public void ToggleSupportControl (int index)
        {
            mainControl.SelectedIndex = 67;
            supportControl.SelectedIndex = index;
        }

        public void OpenAccountSettingsHandler (object sender, RoutedEventArgs e)
        {
            OpenAccountSettings();
        }

        public void OpenAccountSettings ()
        {
            GetAccountSettings();
            mainControl.SelectedIndex = 15;
        }

        public void GetIcons ()
        {
            icons.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/icons/all/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        IconsResponseInfo myobj = (IconsResponseInfo)js.Deserialize(objText, typeof(IconsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Icon> totalIcons = myobj.icons;
                            foreach (Icon totalIconsItem in totalIcons)
                            {
                                string id = totalIconsItem._id;
                                string title = totalIconsItem.title;
                                /*PackIcon icon = new PackIcon();
                                icon.Kind = PackIconKind.Circle;
                                icon.Width = 50;
                                icon.Height = 50;
                                icon.Margin = new Thickness(10);
                                icon.ToolTip = title;*/
                                Ellipse icon = new Ellipse();
                                icon.Width = 50;
                                icon.Height = 50;
                                icon.Margin = new Thickness(10);
                                icon.ToolTip = title;
                                Uri src = new Uri("http://localhost:4000/api/icon/photo/?id=" + id);
                                BitmapImage iconBrushSrc = new BitmapImage(src);
                                ImageBrush iconBrush = new ImageBrush(iconBrushSrc);
                                icon.Fill = iconBrush;
                                icons.Children.Add(icon);
                            }
                            int totalIconsCount = totalIcons.Count;
                            string rawtotalIconsCount = totalIconsCount.ToString();
                            string newLine = Environment.NewLine;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/icons/relations/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    IconRelationsResponseInfo myInnerObj = (IconRelationsResponseInfo)js.Deserialize(objText, typeof(IconRelationsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<IconRelation> relations = myInnerObj.relations;
                                        List<IconRelation> myIconRelations = relations.Where<IconRelation>((IconRelation relation) =>
                                        {
                                            string userId = relation.user;
                                            bool isMyIconRelation = userId == currentUserId;
                                            return isMyIconRelation;
                                        }).ToList<IconRelation>();
                                        int myIconRelationsCount = myIconRelations.Count;
                                        string rawMyIconRelationsCount = myIconRelationsCount.ToString();
                                        int leftIconsCount = totalIconsCount - myIconRelationsCount;
                                        string rawLeftIconsCount = leftIconsCount.ToString();
                                        int iconLevel = myIconRelationsCount + 1;
                                        string rawIconLevel = iconLevel.ToString();
                                        string totalIconsCompletedLabelContent = @"Выполнено " + rawMyIconRelationsCount + " из " + rawtotalIconsCount + @" заданий сообщества " + newLine + "Office ware game manager. Завершите еще 0, чтобы получить" + newLine + "значок " + rawIconLevel + " уровня";
                                        totalIconsCompletedLabel.Text = totalIconsCompletedLabelContent;
                                        string notCompletedIconsLabelContent = @"Заданий" + newLine + "осталось: " + rawLeftIconsCount;
                                        notCompletedIconsLabel.Text = notCompletedIconsLabelContent;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenAddFriendDialogHandler (object sender, RoutedEventArgs e)
        {
            OpenAddFriendDialog();
        }

        public void OpenAddFriendDialog ()
        {
            mainControl.SelectedIndex = 16;
            friendsSettingsControl.SelectedIndex = 1;
        }

        private void OpenFriendsDialogHandler (object sender, RoutedEventArgs e)
        {
            OpenFriendsDialog();
        }

        public void OpenFriendsDialog ()
        {
            Dialogs.FriendsDialog dialog = new Dialogs.FriendsDialog(currentUserId, client, mainControl, this);
            dialog.Closed += JoinToGameHandler;
            dialog.Show();
        }

        public void JoinToGameHandler (object sender, EventArgs e)
        {
            Dialogs.FriendsDialog dialog = ((Dialogs.FriendsDialog)(sender));
            object dialogData = dialog.DataContext;
            bool isDialogDataExists = dialogData != null;
            if (isDialogDataExists)
            {
                string friend = ((string)(dialogData));
                RunGame(gameNameLabel.Text);
            }
            else
            {
                /*string userId = ((string)(mainControl.DataContext));
                GetUserInfo(userId, userId == currentUserId);*/
                ToggleWindow();
            }
        }

        public void CloseFriendRequestHandler(object sender, RoutedEventArgs e)
        {
            PackIcon btn = ((PackIcon)(sender));
            object btnData = btn.DataContext;
            Popup request = ((Popup)(btnData));
            CloseFriendRequest(request);
        }


        public void CloseFriendRequest(Popup request)
        {
            friendRequests.Children.Remove(request);
        }

        public void RejectFriendRequestHandler(object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object rawBtnData = btn.DataContext;
            Dictionary<String, Object> btnData = ((Dictionary<String, Object>)(rawBtnData));
            string friendId = ((string)(btnData["friendId"]));
            string requestId = ((string)(btnData["requestId"]));
            Popup request = ((Popup)(btnData["request"]));
            RejectFriendRequest(friendId, requestId, request);
        }

        public void GetFriendRequestsForMe ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendRequestsResponseInfo myobj = (FriendRequestsResponseInfo)js.Deserialize(objText, typeof(FriendRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<FriendRequest> requestsForMe = new List<FriendRequest>();
                            List<FriendRequest> requests = myobj.requests;
                            foreach (FriendRequest request in requests)
                            {
                                string recepientId = request.friend;
                                bool isRequestForMe = currentUserId == recepientId;
                                if (isRequestForMe)
                                {
                                    requestsForMe.Add(request);
                                }
                            }
                            friendRequestsForMe.Children.Clear();
                            int countRequestsForMe = requestsForMe.Count;
                            bool isHaveRequests = countRequestsForMe >= 1;
                            if (isHaveRequests)
                            {
                                foreach (FriendRequest requestForMe in requestsForMe)
                                {
                                    string requestId = requestForMe._id;
                                    string senderId = requestForMe.user;
                                    string friendId = requestForMe.friend;
                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + senderId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                User user = myInnerObj.user;
                                                string senderLogin = user.login;
                                                string senderName = user.name;
                                                string insensitiveCaseSenderName = senderName.ToLower();
                                                string friendRequestsForMeBoxContent = friendRequestsForMeBox.Text;
                                                string insensitiveCaseKeywords = friendRequestsForMeBoxContent.ToLower();
                                                bool isFriendFound = insensitiveCaseSenderName.Contains(insensitiveCaseKeywords);
                                                int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                                                bool isFilterDisabled = insensitiveCaseKeywordsLength <= 0;
                                                bool isRequestMatch = isFriendFound || isFilterDisabled;
                                                if (isRequestMatch)
                                                {
                                                    StackPanel friend = new StackPanel();
                                                    friend.Margin = new Thickness(15);
                                                    friend.Width = 250;
                                                    friend.Height = 50;
                                                    friend.Orientation = Orientation.Horizontal;
                                                    friend.Background = System.Windows.Media.Brushes.DarkCyan;
                                                    Image friendIcon = new Image();
                                                    friendIcon.Width = 50;
                                                    friendIcon.Height = 50;
                                                    friendIcon.BeginInit();
                                                    friendIcon.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                                    friendIcon.EndInit();
                                                    friendIcon.ImageFailed += SetDefautAvatarHandler;
                                                    friend.Children.Add(friendIcon);
                                                    Separator friendStatus = new Separator();
                                                    friendStatus.BorderBrush = System.Windows.Media.Brushes.LightGray;
                                                    friendStatus.LayoutTransform = new RotateTransform(90);
                                                    friend.Children.Add(friendStatus);
                                                    TextBlock friendNameLabel = new TextBlock();
                                                    friendNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    friendNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                    friendNameLabel.Text = senderLogin;
                                                    friend.Children.Add(friendNameLabel);
                                                    friendRequestsForMe.Children.Add(friend);
                                                    ContextMenu friendContextMenu = new ContextMenu();
                                                    MenuItem friendContextMenuItem = new MenuItem();
                                                    friendContextMenuItem.Header = "Принять";
                                                    Dictionary<String, Object> friendContextMenuItemData = new Dictionary<String, Object>();
                                                    friendContextMenuItemData.Add("friendId", senderId);
                                                    friendContextMenuItemData.Add("requestId", requestId);
                                                    friendContextMenuItem.DataContext = friendContextMenuItemData;
                                                    friendContextMenuItem.Click += AcceptFriendRequestFromSettingsHandler;
                                                    friendContextMenu.Items.Add(friendContextMenuItem);
                                                    friendContextMenuItem = new MenuItem();
                                                    friendContextMenuItem.Header = "Отклонить";
                                                    friendContextMenuItemData = new Dictionary<String, Object>();
                                                    friendContextMenuItemData.Add("friendId", senderId);
                                                    friendContextMenuItemData.Add("requestId", requestId);
                                                    friendContextMenuItem.DataContext = friendContextMenuItemData;
                                                    friendContextMenuItem.Click += RejectFriendRequestFromSettingsHandler;
                                                    friendContextMenu.Items.Add(friendContextMenuItem);
                                                    friend.ContextMenu = friendContextMenu;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                TextBlock requestsNotFoundLabel = new TextBlock();
                                requestsNotFoundLabel.Margin = new Thickness(15);
                                requestsNotFoundLabel.FontSize = 18;
                                requestsNotFoundLabel.Text = "Извините, здесь никого нет.";
                                friendRequestsForMe.Children.Add(requestsNotFoundLabel);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void AcceptGroupRequestFromSettingsHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            string groupId = ((string)(menuItemData["groupId"]));
            string userId = ((string)(menuItemData["userId"]));
            string requestId = ((string)(menuItemData["requestId"]));
            AcceptGroupRequestFromSettings(groupId, userId, requestId);
        }

        public void AcceptGroupRequestFromSettings(string groupId, string userId, string requestId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/relations/add/?id=" + groupId + @"&user=" + userId + "&request=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GroupResponseInfo myInnerObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        Group group = myInnerObj.group;
                                        string groupName = group.name;
                                        string msgContent = "Вы были успешно добавлены в группу " + groupName;
                                        MessageBox.Show(msgContent, "Внимание");
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось принять приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void RejectGroupRequestFromSettingsHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            string groupId = ((string)(menuItemData["groupId"]));
            string userId = ((string)(menuItemData["userId"]));
            string requestId = ((string)(menuItemData["requestId"]));
            RejectGroupRequestFromSettings(groupId, userId, requestId);
        }

        public void RejectGroupRequestFromSettings(string groupId, string userId, string requestId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/requests/reject/?id=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        User friend = myobj.user;
                                        string friendLogin = friend.login;
                                        string msgContent = "Вы отклонили приглашение в группу";
                                        GetGroupRequests();
                                        GetFriendsSettings();
                                        MessageBox.Show(msgContent, "Внимание");
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось отклонить приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void AcceptFriendRequestFromSettingsHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            string friendId = ((string)(menuItemData["friendId"]));
            string requestId = ((string)(menuItemData["requestId"]));
            AcceptFriendRequestFromSettings(friendId, requestId);
        }

        public void AcceptFriendRequestFromSettings(string friendId, string requestId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/add/?id=" + currentUserId + @"&friend=" + friendId + "&request=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        User friend = myobj.user;
                                        string friendName = friend.name;
                                        string msgContent = "Пользователь " + friendName + " был добавлен в друзья";
                                        Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                        string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                        string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                        js = new JavaScriptSerializer();
                                        string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                        SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                        List<Game> currentGames = loadedContent.games;
                                        Settings currentSettings = loadedContent.settings;
                                        List<FriendSettings> currentFriends = loadedContent.friends;
                                        List<string> currentCollections = loadedContent.collections;
                                        Notifications currentNotifications = loadedContent.notifications;
                                        List<string> currentCategories = loadedContent.categories;
                                        List<string> currentRecentChats = loadedContent.recentChats;
                                        Recommendations currentRecommendations = loadedContent.recommendations;
                                        string currentLogoutDate = loadedContent.logoutDate;
                                        List<string> currentSections = loadedContent.sections;
                                        List<FriendSettings> updatedFriends = currentFriends;
                                        updatedFriends.Add(new FriendSettings()
                                        {
                                            id = friendId,
                                            isFriendOnlineNotification = true,
                                            isFriendOnlineSound = true,
                                            isFriendPlayedNotification = true,
                                            isFriendPlayedSound = true,
                                            isFriendSendMsgNotification = true,
                                            isFriendSendMsgSound = true,
                                            isFavoriteFriend = false,
                                            categories = new List<string>()
                                        });
                                        string savedContent = js.Serialize(new SavedContent
                                        {
                                            games = currentGames,
                                            friends = updatedFriends,
                                            settings = currentSettings,
                                            collections = currentCollections,
                                            notifications = currentNotifications,
                                            categories = currentCategories,
                                            recentChats = currentRecentChats,
                                            recommendations = currentRecommendations,
                                            logoutDate = currentLogoutDate,
                                            sections = currentSections
                                        });
                                        File.WriteAllText(saveDataFilePath, savedContent);
                                        GetFriendsSettings();
                                        GetFriendRequests();
                                        MessageBox.Show(msgContent, "Внимание");
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось принять приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void RejectFriendRequestFromSettingsHandler(object sender, RoutedEventArgs e)
        {

            MenuItem menuItem = ((MenuItem)(sender));
            object rawMenuItemData = menuItem.DataContext;
            Dictionary<String, Object> menuItemData = ((Dictionary<String, Object>)(rawMenuItemData));
            string friendId = ((string)(menuItemData["friendId"]));
            string requestId = ((string)(menuItemData["requestId"]));
            RejectFriendRequestFromSettings(friendId, requestId);
        }

        public void RejectFriendRequestFromSettings(string friendId, string requestId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/reject/?id=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();

                                    myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        User friend = myobj.user;
                                        string friendLogin = friend.login;
                                        string msgContent = "Вы отклонили приглашение в друзья";
                                        GetFriendsSettings();
                                        GetFriendRequests();
                                        MessageBox.Show(msgContent, "Внимание");
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось отклонить приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void RejectFriendRequests()
        {

            friendRequests.Children.Clear();
            GetFriendRequestsForMe();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendRequestsResponseInfo myobj = (FriendRequestsResponseInfo)js.Deserialize(objText, typeof(FriendRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<FriendRequest> myRequests = new List<FriendRequest>();
                            List<FriendRequest> requests = myobj.requests;
                            foreach (FriendRequest request in requests)
                            {
                                string recepientId = request.friend;
                                bool isRequestForMe = currentUserId == recepientId;
                                if (isRequestForMe)
                                {
                                    myRequests.Add(request);
                                }
                            }
                            foreach (FriendRequest myRequest in myRequests)
                            {
                                string requestId = myRequest._id;
                                string friendId = myRequest.user;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/reject/?id=" + requestId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = reader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myobj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (StreamReader nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    var myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("Не удалось отклонить приглашение", "Ошибка");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            /*
            int countFriendRequests = friendRequests.Children.Count;
            for (int i = 0; i < countFriendRequests; i++)
            {
                UIElement rawFriendRequest = friendRequests.Children[i];
                Popup friendRequest = ((Popup)(rawFriendRequest));
                object rawFriendRequestData = friendRequest.DataContext;
                Dictionary<String, Object> friendRequestData = ((Dictionary<String, Object>)(rawFriendRequestData));
                string friendId = ((string)(friendRequestData["friendId"]));
                string requestId = ((string)(friendRequestData["requestId"]));
                RejectFriendRequest(friendId, requestId, friendRequest);
            }
            */

        }

        public void RejectFriendRequest(string friendId, string requestId, Popup request)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/reject/?id=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();

                                    myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        CloseFriendRequest(request);
                                        User friend = myobj.user;
                                        string friendLogin = friend.login;
                                        string msgContent = "Вы отклонили приглашение в друзья";
                                        MessageBox.Show(msgContent, "Внимание");
                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось отклонить приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void AcceptFriendRequestHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object rawBtnData = btn.DataContext;
            Dictionary<String, Object> btnData = ((Dictionary<String, Object>)(rawBtnData));
            string friendId = ((string)(btnData["friendId"]));
            string requestId = ((string)(btnData["requestId"]));
            Popup request = ((Popup)(btnData["request"]));
            AcceptFriendRequest(friendId, requestId, request);
        }

        public void AcceptFriendRequest (string friendId, string requestId, Popup request)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/add/?id=" + currentUserId + @"&friend=" + friendId + "&request=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                            webRequest.Method = "GET";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=addFriend&data=" + friendId);
                                        innerNestedWebRequest.Method = "GET";
                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                        {
                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerNestedReader.ReadToEnd();
                                                UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                status = myInnerNestedObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {

                                                    CloseFriendRequest(request);
                                                    User friend = myobj.user;
                                                    string friendName = friend.name;
                                                    string msgContent = "Пользователь " + friendName + " был добавлен в друзья";
                                                    Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                                    string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                                    string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                                    js = new JavaScriptSerializer();
                                                    string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                                    SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                                    List<Game> currentGames = loadedContent.games;
                                                    Settings currentSettings = loadedContent.settings;
                                                    List<FriendSettings> currentFriends = loadedContent.friends;
                                                    List<string> currentCollections = loadedContent.collections;
                                                    Notifications currentNotifications = loadedContent.notifications;
                                                    List<string> currentCategories = loadedContent.categories;
                                                    List<string> currentRecentChats = loadedContent.recentChats;
                                                    Recommendations currentRecommendations = loadedContent.recommendations;
                                                    string currentLogoutDate = loadedContent.logoutDate;
                                                    List<string> currentSections = loadedContent.sections;
                                                    List<FriendSettings> updatedFriends = currentFriends;
                                                    updatedFriends.Add(new FriendSettings()
                                                    {
                                                        id = friendId,
                                                        isFriendOnlineNotification = true,
                                                        isFriendOnlineSound = true,
                                                        isFriendPlayedNotification = true,
                                                        isFriendPlayedSound = true,
                                                        isFriendSendMsgNotification = true,
                                                        isFriendSendMsgSound = true,
                                                        isFavoriteFriend = false,
                                                        categories = new List<string>()
                                                    });
                                                    string savedContent = js.Serialize(new SavedContent
                                                    {
                                                        games = currentGames,
                                                        friends = updatedFriends,
                                                        settings = currentSettings,
                                                        collections = currentCollections,
                                                        notifications = currentNotifications,
                                                        categories = currentCategories,
                                                        recentChats = currentRecentChats,
                                                        recommendations = currentRecommendations,
                                                        logoutDate = currentLogoutDate,
                                                        sections = currentSections
                                                    });
                                                    File.WriteAllText(saveDataFilePath, savedContent);
                                                    MessageBox.Show(msgContent, "Внимание");
                                                }

                                            }
                                        }
                                    }
                                }

                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось принять приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void AcceptGroupRequestHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object rawBtnData = btn.DataContext;
            Dictionary<String, Object> btnData = ((Dictionary<String, Object>)(rawBtnData));
            string groupId = ((string)(btnData["groupId"]));
            string userId = ((string)(btnData["userId"]));
            string requestId = ((string)(btnData["requestId"]));
            Popup request = ((Popup)(btnData["request"]));
            AcceptGroupRequest (groupId, userId, requestId, request);
        }

        public void AcceptGroupRequest (string groupId, string userId, string requestId, Popup request)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/relations/add/?id=" + groupId + @"&user=" + userId + "&request=" + requestId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GroupResponseInfo myInnerObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        string data = groupId;
                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=inviteGroup&data=" + data);
                                        innerNestedWebRequest.Method = "GET";
                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                        {
                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerNestedReader.ReadToEnd();
                                                UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                status = myInnerNestedObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    CloseGroupRequest(request);
                                                    Group group = myInnerObj.group;
                                                    string groupName = group.name;
                                                    string msgContent = "Вы были успешно добавлены в группу " + groupName;
                                                    request.IsOpen = false;
                                                    GetGroupRequests();
                                                    GetFriendsSettings();
                                                    MessageBox.Show(msgContent, "Внимание");

                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удалось принять приглашение", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public CustomPopupPlacement[] PointsStoreItemsPopupPlacementHandler (Size popupSize, Size targetSize, Point offset)
        {
            return new CustomPopupPlacement[]
            {
                new CustomPopupPlacement(new Point(0, 250), PopupPrimaryAxis.Vertical),
                new CustomPopupPlacement(new Point(400, 20), PopupPrimaryAxis.Horizontal)
            };
        }

        public CustomPopupPlacement[] FriendRequestPlacementHandler(Size popupSize, Size targetSize, Point offset)
        {
            return new CustomPopupPlacement[]
            {
                new CustomPopupPlacement(new Point(-50, 100), PopupPrimaryAxis.Vertical),
                new CustomPopupPlacement(new Point(10, 20), PopupPrimaryAxis.Horizontal)
            };
        }

        public CustomPopupPlacement[] MainCommunityScrollPopupPlacementHandler (Size popupSize, Size targetSize, Point offset)
        {
            return new CustomPopupPlacement[]
            {
                new CustomPopupPlacement(new Point(650, 100), PopupPrimaryAxis.Vertical),
                new CustomPopupPlacement(new Point(10, 20), PopupPrimaryAxis.Horizontal)
            };
        }

        private void FilterGamesHandler (object sender, TextChangedEventArgs e)
        {
            FilterGames();
        }

        public void FilterGames ()
        {
            string keywords = keywordsLabel.Text;
            int keywordsLength = keywords.Length;
            bool isFilterEnabled = keywordsLength >= 1;
            if (isFilterEnabled)
            {
                clearGamesListFilterIcon.Visibility = visible;
            }
            GetGamesList (keywords);
        }

        private void ProfileItemSelectedHandler(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = ((ComboBox)(sender));
            int selectedIndex = comboBox.SelectedIndex;
            ProfileItemSelected(selectedIndex);
        }

        public void TogglePrizeCardsTabFromBreadCrumbsHandler (object sender, RoutedEventArgs e)
        {
            TextBlock breadCrumb = ((TextBlock)(sender));
            object breadCrumbData = breadCrumb.DataContext;
            string rawIndex = breadCrumbData.ToString();
            int index = Int32.Parse(rawIndex);
            TogglePrizeCardsTabFromBreadCrumbs(index);
        }

        public void TogglePrizeCardsTabFromBreadCrumbs (int index)
        {
            TogglePrizeCardsTab(index);
        }

        public void TogglePrizeCardsTabFromPriceHandler (object sender, RoutedEventArgs e)
        {
            StackPanel priceBlock = ((StackPanel)(sender));
            object priceBlockData = priceBlock.DataContext;
            string rawPrice = priceBlockData.ToString();
            int price = Int32.Parse(rawPrice);
            TogglePrizeCardsTabFromPrice(price);
        }

        public void OpenAddNoteToPrizeCardHandler (object sender, RoutedEventArgs e)
        {
            OpenAddNoteToPrizeCard();
        }

        public void OpenAddNoteToPrizeCard ()
        {
            prizeCardsControl.SelectedIndex = 5;
        }

        public void OpenSetPaymentMethodToPrizeCardHandler (object sender, RoutedEventArgs e)
        {
            OpenSetPaymentMethodToPrizeCard();
        }

        public void OpenSetPaymentMethodToPrizeCard ()
        {
            prizeCardsControl.SelectedIndex = 6;
        }

        public void TogglePrizeCardsTabFromPrice (int price)
        {
            TogglePrizeCardsTab(4);
        }

        public void TogglePrizeCardsTabHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string rawIndex = btnData.ToString();
            int index = Int32.Parse(rawIndex);
            TogglePrizeCardsTab(index);
        }

        public void TogglePrizeCardsTab (int index)
        {
            prizeCardsControl.SelectedIndex = index;
        }

        private void ProfileItemSelected (int index)
        {
            if (isAppInit)
            {
                bool isActivity = index == 1;
                bool isProfile = index == 2;
                bool isFriends = index == 3;
                bool isGroups = index == 4;
                bool isContent = index == 5;
                bool isIcons = index == 6;
                bool isEquipment = index == 7;
                if (isActivity)
                {
                    OpenFriendsActivity();
                }
                else if (isProfile)
                {
                    ReturnToProfile();
                }
                else if (isFriends)
                {
                    OpenFriendsSettings();
                }
                else if (isGroups)
                {
                    OpenGroupsSettings();
                }
                else if (isContent)
                {
                    OpenContent();
                }
                else if (isIcons)
                {
                    mainControl.SelectedIndex = 12;
                    AddHistoryRecord();
                }
                else if (isEquipment)
                {
                    OpenEquipment();
                }
                ResetMenu();
            }
        }

        public void OpenEquipment ()
        {
            mainControl.SelectedIndex = 60;
            AddHistoryRecord();
        }

        public void OpenEquipmentHandler (object sender, RoutedEventArgs e)
        {
            OpenEquipment();
        }

        public void OpenStoreSearchHandler (object sender, RoutedEventArgs e)
        {
            OpenStoreSearch();
        }

        public void OpenStoreSearch ()
        {
            string keywordsLabelContent = keywordsLabel.Text;
            searchGamesBox.Text = keywordsLabelContent;
            keywordsLabel.Text = "";
            SearchGames();
            mainControl.SelectedIndex = 64;
            AddHistoryRecord();
        }


        public void OpenTradeOffersHandler (object sender, RoutedEventArgs e)
        {
            OpenTradeOffers();
        }

        public void OpenTradeOffers ()
        {
            mainControl.SelectedIndex = 61;
            AddHistoryRecord();
        }

        public void OpenCommentsHistoryHandler (object sender, RoutedEventArgs e)
        {
            OpenCommentsHistory();
        }

        public void OpenAllEventsHandler (object sender, RoutedEventArgs e)
        {
            OpenAllEvents();
        }

        public void OpenAllEvents ()
        {
            mainControl.SelectedIndex = 63;
            AddHistoryRecord();
        }

        public void OpenCommentsHistory ()
        {
            GetCommentsHistory();
            mainControl.SelectedIndex = 62;
            AddHistoryRecord();
        }

        public void OpenContent ()
        {
            mainControl.SelectedIndex = 5;
            AddHistoryRecord();
        }

        public void OpenGroupsSettingsHandler (object sender, RoutedEventArgs e)
        {
            OpenGroupsSettings();
        }

        public void OpenContentTabHandler (object sender, RoutedEventArgs e)
        {
            StackPanel activityShortCut = ((StackPanel)(sender));
            object activityShortCutData = activityShortCut.DataContext;
            string rawIndex = activityShortCutData.ToString();
            int index = Int32.Parse(rawIndex);
            OpenContentTab(index);
        }

        public void OpenContentTab (int index)
        {
            contentControl.SelectedIndex = index;
            OpenContent();
        }

        public void OpenFriendsSettingsHandler(object sender, RoutedEventArgs e)
        {
            OpenFriendsSettings();
        }

        public void OpenFriendsActivity ()
        {
            mainControl.SelectedIndex = 13;
            AddHistoryRecord();
        }

        public void OpenMyActivityHandler (object sender, RoutedEventArgs e)
        {
            OpenMyActivity();
        }

        public void OpenFriendsActivityHandler (object sender, RoutedEventArgs e)
        {
            OpenFriendsActivity();
        }

        public void OpenMyActivity ()
        {
            mainControl.SelectedIndex = 58;
        }

        public void OpenFriendActivitySettingsHandler (object sender, RoutedEventArgs e)
        {
            OpenFriendActivitySettings();
        }

        public void SaveFriendActivitySettingsHandler (object sender, RoutedEventArgs e)
        {
            SaveFriendActivitySettings();
        }

        public void SaveFriendActivitySettings ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings updatedSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            FriendActivity updatedFriendActivitySettings = updatedSettings.friendActivity;

            bool isAddFriend = ((bool)(friendActivitySettingsAddFriendCheckBox.IsChecked));
            bool isOpenAchievement = ((bool)(friendActivitySettingsOpenAchievementCheckBox.IsChecked));
            bool isBuyGame = ((bool)(friendActivitySettingsBuyGameCheckBox.IsChecked));
            bool isInviteGroup = ((bool)(friendActivitySettingsInviteGroupCheckBox.IsChecked));
            bool isCreateGroup = ((bool)(friendActivitySettingsCreateGroupCheckBox.IsChecked));
            bool isAddGameToWishList = ((bool)(friendActivitySettingsAddGameToWishListCheckBox.IsChecked));
            bool isAddReview = ((bool)(friendActivitySettingsAddReviewCheckBox.IsChecked));
            bool isUploadScreenShot = ((bool)(friendActivitySettingsUploadScreenShotCheckBox.IsChecked));
            bool isAddVideo = ((bool)(friendActivitySettingsAddVideoCheckBox.IsChecked));
            bool isAddSubjectToFavorite = ((bool)(friendActivitySettingsAddSubjectToFavoriteCheckBox.IsChecked));
            bool isDoAdvertisiment = ((bool)(friendActivitySettingsDoAdvertisimentCheckBox.IsChecked));
            bool isScheduleEvent = ((bool)(friendActivitySettingsScheduleEventCheckBox.IsChecked));
            bool isSelectPlayerOfWeek = ((bool)(friendActivitySettingsSelectPlayerOfWeekCheckBox.IsChecked));
            bool isUpgradeUserToAdmin = ((bool)(friendActivitySettingsUpgradeUserToAdminCheckBox.IsChecked));
            bool isReceiveComment = ((bool)(friendActivitySettingsReceiveCommentCheckBox.IsChecked));
            bool isProductDoAdvertisiment = ((bool)(friendActivitySettingsProductDoAdvertisimentCheckBox.IsChecked));
            bool isWorkShopDoAdvertisiment = ((bool)(friendActivitySettingsWorkShopDoAdvertisimentCheckBox.IsChecked));
            bool isAddGameRecomendation = ((bool)(friendActivitySettingsAddGameRecomendationCheckBox.IsChecked));
            bool isAddSubject = ((bool)(friendActivitySettingsAddSubjectCheckBox.IsChecked));
            bool isDetectFromScreenShot = ((bool)(friendActivitySettingsDetectFromScreenShotCheckBox.IsChecked));

            updatedFriendActivitySettings.isAddFriend = isAddFriend;
            updatedFriendActivitySettings.isOpenAchievement = isOpenAchievement;
            updatedFriendActivitySettings.isBuyGame = isBuyGame;
            updatedFriendActivitySettings.isInviteGroup = isInviteGroup;
            updatedFriendActivitySettings.isCreateGroup = isCreateGroup;
            updatedFriendActivitySettings.isAddGameToWishList = isAddGameToWishList;
            updatedFriendActivitySettings.isAddReview = isAddReview;
            updatedFriendActivitySettings.isUploadScreenShot = isUploadScreenShot;
            updatedFriendActivitySettings.isAddVideo = isAddVideo;
            updatedFriendActivitySettings.isAddSubjectToFavorite = isAddSubjectToFavorite;
            updatedFriendActivitySettings.isDoAdvertisiment = isDoAdvertisiment;
            updatedFriendActivitySettings.isScheduleEvent = isScheduleEvent;
            updatedFriendActivitySettings.isSelectPlayerOfWeek = isSelectPlayerOfWeek;
            updatedFriendActivitySettings.isUpgradeUserToAdmin = isUpgradeUserToAdmin;
            updatedFriendActivitySettings.isReceiveComment = isReceiveComment;
            updatedFriendActivitySettings.isProductDoAdvertisiment = isProductDoAdvertisiment;
            updatedFriendActivitySettings.isWorkShopDoAdvertisiment = isWorkShopDoAdvertisiment;
            updatedFriendActivitySettings.isAddGameRecomendation = isAddGameRecomendation;
            updatedFriendActivitySettings.isAddSubject = isAddSubject;
            updatedFriendActivitySettings.isDetectFromScreenShot = isDetectFromScreenShot;

            updatedSettings.friendActivity = updatedFriendActivitySettings;

            string savedContent = js.Serialize(new SavedContent
            {
                games = currentGames,
                friends = currentFriends,
                settings = updatedSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);

            OpenFriendsActivity();

            GetFriendActivities();

        }

        public void OpenFriendActivitySettings ()
        {
            GetFriendActivitySettings();
            mainControl.SelectedIndex = 59;
        }

        public void OpenGroupsSettings()
        {
            mainControl.SelectedIndex = 16;
            friendsSettingsControl.SelectedIndex = 8;
            GetGroups();
        }

        public void OpenFriendsSettings()
        {
            mainControl.SelectedIndex = 16;
            friendsSettingsControl.SelectedIndex = 0;
            GetFriendsSettings();
        }

        public void AddHistoryRecord()
        {
            int selectedWindowIndex = mainControl.SelectedIndex;
            historyCursor++;
            history.Add(selectedWindowIndex);
            arrowBackBtn.Foreground = enabledColor;
            arrowForwardBtn.Foreground = disabledColor;
        }

        private void LibraryItemSelectedHandler(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = ((ComboBox)(sender));
            int selectedIndex = comboBox.SelectedIndex;
            LibraryItemSelected(selectedIndex);
        }

        private void LibraryItemSelected (int index)
        {
            bool isHome = index == 1;
            bool isCollections = index == 2;
            bool isDownloads = index == 4;
            if (isHome)
            {
                OpenGamesLibrary();
                AddHistoryRecord();
            }
            else if (isCollections)
            {
                OpenCollections();
            }
            else if (isDownloads)
            {
                OpenDownloads();
            }
            ResetMenu();
        }

        public void OpenCollectionsHandler (object sender, RoutedEventArgs e)
        {
            OpenCollections();
        }


        public void OpenCollections ()
        {
            mainControl.SelectedIndex = 9;
            AddHistoryRecord();
        }

        public void OpenDownloadsHandler (object sender, RoutedEventArgs e)
        {
            OpenDownloads();
        }

        public void OpenDownloads ()
        {
            mainControl.SelectedIndex = 4;
            AddHistoryRecord();
        }

        public void ResetMenu()
        {
            if (isAppInit)
            {
                storeMenu.SelectedIndex = 0;
                libraryMenu.SelectedIndex = 0;
                communityMenu.SelectedIndex = 0;
                profileMenu.SelectedIndex = 0;
                userMenu.SelectedIndex = 0;
            }
        }

        private void ClientLoadedHandler(object sender, RoutedEventArgs e)
        {
            ClientLoaded();
        }

        public void ClientLoaded()
        {
            isAppInit = true;
            mainControl.DataContext = currentUserId;
            ListenSockets();
            IncreaseUserToStats();

            // SetUserStatus("online");
            UpdateUserStatus("online");

        }

        public void GetRequestsCount ()
        {
            int countRequests = 0;

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendRequestsResponseInfo myobj = (FriendRequestsResponseInfo)js.Deserialize(objText, typeof(FriendRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<FriendRequest> myRequests = new List<FriendRequest>();
                            List<FriendRequest> requests = myobj.requests;
                            foreach (FriendRequest request in requests)
                            {
                                string recepientId = request.friend;
                                bool isRequestForMe = currentUserId == recepientId;
                                if (isRequestForMe)
                                {
                                    myRequests.Add(request);
                                }
                            }
                            foreach (FriendRequest myRequest in myRequests)
                            {
                                countRequests++;
                            }
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/requests/all");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GroupRequestsResponseInfo myInnerObj = (GroupRequestsResponseInfo)js.Deserialize(objText, typeof(GroupRequestsResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GroupRequest> localMyRequests = new List<GroupRequest>();
                                        List<GroupRequest> localRequests = myInnerObj.requests;
                                        foreach (GroupRequest request in localRequests)
                                        {
                                            string recepientId = request.user;
                                            bool isRequestForMe = currentUserId == recepientId;
                                            if (isRequestForMe)
                                            {
                                                localMyRequests.Add(request);
                                            }
                                        }
                                        foreach (GroupRequest myRequest in localMyRequests)
                                        {
                                            countRequests++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

            string rawCountRequests = countRequests.ToString();
            string countNewRequestsLabelContent = "Новых приглашений: " + rawCountRequests;
            countNewRequestsLabel.Text = countNewRequestsLabelContent;
            bool isHaveRequests = countRequests >= 1;
            if (isHaveRequests)
            {
                notificationsPopupIcon.Foreground = System.Windows.Media.Brushes.Yellow;
            }
            else
            {
                notificationsPopupIcon.Foreground = System.Windows.Media.Brushes.Black;
            }
        }

        public void SetUserStatus(string userStatus)
        {
            if (client != null)
            {
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/status/set/?id=" + currentUserId + "&status=" + userStatus);
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();

                            RegisterResponseInfo myobj = (RegisterResponseInfo)js.Deserialize(objText, typeof(RegisterResponseInfo));

                            string status = myobj.status;
                            bool isErrorStatus = status == "Error";
                            if (isErrorStatus)
                            {
                                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                            }

                            // client.EmitAsync("user_is_toggle_status", userStatus);

                        }
                    }
                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
        }

        public void IncreaseUserToStats()
        {
            HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/stats/increase");
            webRequest.Method = "GET";
            webRequest.UserAgent = ".NET Framework Test Client";
            using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
            {
                using (var reader = new StreamReader(webResponse.GetResponseStream()))
                {
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    var objText = reader.ReadToEnd();

                    RegisterResponseInfo myobj = (RegisterResponseInfo)js.Deserialize(objText, typeof(RegisterResponseInfo));

                    string status = myobj.status;
                    bool isErrorStatus = status == "Error";
                    if (isErrorStatus)
                    {
                        MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    }
                }
            }
        }

        private void CommunityItemSelectedHandler(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = ((ComboBox)(sender));
            int selectedIndex = comboBox.SelectedIndex;
            CommunityItemSelected(selectedIndex);
        }

        public void CommunityItemSelected(int index)
        {
            bool isMain = index == 1;
            bool isDiscussions = index == 2;
            bool isWorkshop = index == 3;
            bool isPlatform = index == 4;
            bool isBroadcasts = index == 5;
            if (isMain)
            {
                communityActivityControl.DataContext = null;
                communityActivityControl.SelectedIndex = 0;
                mainControl.SelectedIndex = 20;
                GetCommunityInfo();
            }
            else if (isDiscussions)
            {
                mainControl.SelectedIndex = 6;
                AddHistoryRecord();
            }
            else if (isWorkshop)
            {
                mainControl.SelectedIndex = 38;
                AddHistoryRecord();
            }
            else if (isPlatform)
            {
                mainControl.SelectedIndex = 39;
                AddHistoryRecord();
            }
            else if (isBroadcasts)
            {
                OpenCommunityInfo();
                communityControl.SelectedIndex = 3;

            }
            ResetMenu();
        }

        public void OpenDiscussionsFromHelpHandler (object sender, RoutedEventArgs e)
        {
            OpenDiscussionsFromHelp();
        }

        public void OpenDiscussionsFromHelp ()
        {
            mainControl.SelectedIndex = 6;
        }

        public void ToggleHelpCompaintBlockHandler ()
        {
            ToggleHelpCompaintBlock();
        }

        public void ToggleHelpCompaintBlock ()
        {
            Visibility helpCompaintBlockVisibility = helpCompaintBlock.Visibility;
            bool isVisible = helpCompaintBlockVisibility == visible;
            if (isVisible)
            {
                helpCompaintBlock.Visibility = invisible;
            }
            else
            {
                helpCompaintBlock.Visibility = visible;
            }
        }

        private void StoreItemSelectedHandler(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = ((ComboBox)(sender));
            int selectedIndex = comboBox.SelectedIndex;
            StoreItemSelected(selectedIndex);
        }

        public void GetNews ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/news/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        NewsResponseInfo myobj = (NewsResponseInfo)js.Deserialize(objText, typeof(NewsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<News> newsList = myobj.news;
                            news.Children.Clear();
                            foreach (News newsListItem in newsList)
                            {
                                string title = newsListItem.title;
                                string content = newsListItem.content;
                                DateTime date = newsListItem.date;
                                string game = newsListItem.game;
                                string newsGameName = "";
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        GamesListResponseInfo myInnerObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                        status = myobj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            List<GameResponseInfo> games = myInnerObj.games;
                                            int gameIndex = games.FindIndex((GameResponseInfo localGame) =>
                                            {
                                                string localGameId = localGame._id;
                                                bool isFound = localGameId == game;
                                                return isFound;
                                            });
                                            bool isGameFound = gameIndex >= 0;
                                            if (isGameFound)
                                            {
                                                GameResponseInfo myGame = games[gameIndex];
                                                newsGameName = myGame.name;
                                            }
                                        }
                                    }
                                }
                                StackPanel newsItem = new StackPanel();
                                newsItem.Margin = new Thickness(50);
                                Border newsItemBody = new Border();
                                newsItemBody.Margin = new Thickness(0, 15, 0, 15);
                                newsItemBody.Background = System.Windows.Media.Brushes.DarkCyan;
                                newsItemBody.CornerRadius = new CornerRadius(5);
                                DockPanel newsItemBodyWrap = new DockPanel();
                                StackPanel newsItemBodyWrapAside = new StackPanel();
                                newsItemBodyWrapAside.Margin = new Thickness(25);
                                StackPanel newsItemBodyWrapAsideHeader = new StackPanel();
                                newsItemBodyWrapAsideHeader.Orientation = Orientation.Horizontal;
                                Image newsItemBodyWrapAsideHeaderIcon = new Image();
                                newsItemBodyWrapAsideHeaderIcon.HorizontalAlignment = HorizontalAlignment.Right;
                                newsItemBodyWrapAsideHeaderIcon.Margin = new Thickness(15);
                                newsItemBodyWrapAsideHeaderIcon.Width = 25;
                                newsItemBodyWrapAsideHeaderIcon.Height = 25;
                                newsItemBodyWrapAsideHeaderIcon.BeginInit();
                                newsItemBodyWrapAsideHeaderIcon.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + newsGameName));
                                newsItemBodyWrapAsideHeaderIcon.EndInit();
                                newsItemBodyWrapAsideHeaderIcon.ImageFailed += SetDefaultThumbnailHandler;
                                newsItemBodyWrapAsideHeader.Children.Add(newsItemBodyWrapAsideHeaderIcon);
                                TextBlock newsItemBodyWrapAsideHeaderLabel = new TextBlock();
                                newsItemBodyWrapAsideHeaderLabel.VerticalAlignment = VerticalAlignment.Center;
                                newsItemBodyWrapAsideHeaderLabel.Text = newsGameName;
                                newsItemBodyWrapAsideHeader.Children.Add(newsItemBodyWrapAsideHeaderLabel);
                                newsItemBodyWrapAside.Children.Add(newsItemBodyWrapAsideHeader);
                                TextBlock newsItemBodyWrapAsideTitleLabel = new TextBlock();
                                newsItemBodyWrapAsideTitleLabel.FontSize = 24;
                                newsItemBodyWrapAsideTitleLabel.Foreground = System.Windows.Media.Brushes.White;
                                newsItemBodyWrapAsideTitleLabel.Text = title;
                                newsItemBodyWrapAside.Children.Add(newsItemBodyWrapAsideTitleLabel);
                                TextBlock newsItemBodyWrapAsideDateLabel = new TextBlock();
                                newsItemBodyWrapAsideDateLabel.Foreground = System.Windows.Media.Brushes.White;
                                string rawDate = date.ToLongDateString();
                                newsItemBodyWrapAsideDateLabel.Text = rawDate;
                                newsItemBodyWrapAside.Children.Add(newsItemBodyWrapAsideDateLabel);
                                TextBlock newsItemBodyWrapAsideContentLabel = new TextBlock();
                                newsItemBodyWrapAsideContentLabel.Width = 250;
                                newsItemBodyWrapAsideContentLabel.TextWrapping = TextWrapping.Wrap;
                                newsItemBodyWrapAsideContentLabel.Foreground = System.Windows.Media.Brushes.White;
                                newsItemBodyWrapAsideContentLabel.Text = content;
                                newsItemBodyWrapAside.Children.Add(newsItemBodyWrapAsideContentLabel);
                                newsItemBodyWrap.Children.Add(newsItemBodyWrapAside);
                                Image newsItemBodyWrapImg = new Image();
                                newsItemBodyWrapImg.HorizontalAlignment = HorizontalAlignment.Right;
                                newsItemBodyWrapImg.Margin = new Thickness(15);
                                newsItemBodyWrapImg.Width = 200;
                                newsItemBodyWrapImg.Height = 200;
                                newsItemBodyWrapImg.ImageFailed += SetDefaultThumbnailHandler;
                                newsItemBodyWrapImg.BeginInit();
                                newsItemBodyWrapImg.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + newsGameName));
                                newsItemBodyWrapImg.EndInit();
                                newsItemBodyWrap.Children.Add(newsItemBodyWrapImg);
                                newsItemBody.Child = newsItemBodyWrap;
                                newsItem.Children.Add(newsItemBody);
                                StackPanel newsItemFooter = new StackPanel();
                                newsItemFooter.Orientation = Orientation.Horizontal;
                                newsItemFooter.HorizontalAlignment = HorizontalAlignment.Right;
                                PackIcon newsItemFooterIcon = new PackIcon();
                                newsItemFooterIcon.Kind = PackIconKind.ThumbUp;
                                newsItemFooterIcon.Margin = new Thickness(5, 0, 5, 0);
                                TextBlock newsItemFooterLabel = new TextBlock();
                                newsItemFooterLabel.Margin = new Thickness(5, 0, 5, 0);
                                newsItemFooterLabel.Text = "0";
                                newsItemFooterIcon = new PackIcon();
                                newsItemFooterIcon.Kind = PackIconKind.ThumbUp;
                                newsItemFooterIcon.Margin = new Thickness(5, 0, 5, 0);
                                newsItemFooterLabel = new TextBlock();
                                newsItemFooterLabel.Margin = new Thickness(5, 0, 5, 0);
                                newsItemFooterLabel.Text = "0";
                                newsItemFooterLabel = new TextBlock();
                                newsItemFooterLabel.Margin = new Thickness(5, 0, 5, 0);
                                newsItemFooterLabel.Text = "0";
                                newsItem.Children.Add(newsItemFooter);
                                news.Children.Add(newsItem);
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
            // newsAside.Height = news.ActualHeight;
        }

        public void GetNewsNotifications ()
        {

            System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/news/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        NewsResponseInfo myobj = (NewsResponseInfo)js.Deserialize(objText, typeof(NewsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<News> newsList = myobj.news;
                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            string currentLogoutDate = loadedContent.logoutDate;
                            int countUnreadedNews = newsList.Count<News>((News newsItem) =>
                            {
                                DateTime newsItemDate = newsItem.date;
                                
                                // TimeSpan interval = currentLogoutDate.Subtract(newsItemDate);
                                TimeSpan interval = DateTime.Parse(currentLogoutDate).Subtract(newsItemDate);
                                
                                double intervalSeconds = interval.TotalSeconds;
                                Debugger.Log(0, "debug", Environment.NewLine + @"newsDate: " + newsItemDate.ToLongDateString() + @", newsTime: " + newsItemDate.ToLongTimeString() + ", intervalSeconds: " + intervalSeconds.ToString() + Environment.NewLine);
                                bool isUnreaded = intervalSeconds <= -1;
                                return isUnreaded;
                            });
                            bool isHaveUnreadedNews = countUnreadedNews >= 1;
                            Debugger.Log(0, "debug", Environment.NewLine + @"countUnreadedNews: " + countUnreadedNews.ToString() + @", isHaveUnreadedNews: " + isHaveUnreadedNews.ToString() + Environment.NewLine);
                            if (isHaveUnreadedNews)
                            {
                                newsPopupIcon.Foreground = System.Windows.Media.Brushes.Yellow;
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void StoreItemSelected(int index)
        {
            bool isPopular = index == 1;
            bool isHint = index == 2;
            bool isWant = index == 3;
            bool isPointsStore = index == 4;
            bool isNews = index == 5;
            bool isGamesStats = index == 6;
            if (isPopular)
            {
                OpenPopularGames();
            }
            else if (isHint)
            {
                mainControl.SelectedIndex = 28;
            }
            else if (isWant)
            {
                GetWantGames();
            }
            else if (isPointsStore)
            {
                mainControl.SelectedIndex = 34;
                GetPoints();
            }
            else if (isNews)
            {
                OpenNews();
            }
            else if (isGamesStats)
            {
                mainControl.SelectedIndex = 3;
                GetGamesStats();

                AddHistoryRecord();

            }
            ResetMenu();
        }

        public void GetWantGamesHandler (object sender, TextChangedEventArgs e)
        {
            GetWantGames();
        }

        public void GetWantGamesFromBtnHandler (object sender, RoutedEventArgs e)
        {
            GetWantGames();
        }

        public void GetWantGames ()
        {
            string wishGamesBoxContent = wishGamesBox.Text;
            string insensitiveCaseWishGamesBoxContent = wishGamesBoxContent.ToLower();
            int insensitiveCaseWishGamesBoxContentLength = insensitiveCaseWishGamesBoxContent.Length;
            bool isFilterDisabled = insensitiveCaseWishGamesBoxContentLength <= 0;
            mainControl.SelectedIndex = 33;
            wantGamesList.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;

                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            Recommendations currentRecommendations = loadedContent.recommendations;
                            string currentLogoutDate = loadedContent.logoutDate;
                            List<string> exceptTags = currentRecommendations.exceptTags;

                            totalGames = totalGames.Where((GameResponseInfo game) =>
                            {
                                string gameId = game._id;
                                string gameName = game.name;
                                string gamePlatform = game.platform;
                                int gamePrice = game.price;
                                string insensitiveCaseGameName = gameName.ToLower();
                                bool isKeywordsMatches = insensitiveCaseGameName.Contains(insensitiveCaseWishGamesBoxContent);
                                bool isPlatformMatch = true;
                                bool isPriceMatch = true;
                                object rawIsPlatformChecked = macOSPlatformRadioBtn.IsChecked;
                                bool isPlatformChecked = ((bool)(rawIsPlatformChecked));
                                if (isPlatformChecked)
                                {
                                    isPlatformMatch = gamePlatform == "macOS";
                                }
                                rawIsPlatformChecked = linuxPlatformRadioBtn.IsChecked;
                                isPlatformChecked = ((bool)(rawIsPlatformChecked));
                                if (isPlatformChecked)
                                {
                                    isPlatformMatch = gamePlatform == "Linux";
                                }
                                object rawIsPriceChecked = cheaperThan150RubRadioBtn.IsChecked;
                                bool isPriceChecked = ((bool)(rawIsPriceChecked));
                                if (isPriceChecked)
                                {
                                    isPriceMatch = gamePrice < 150;
                                }
                                rawIsPriceChecked = cheaperThan300RubRadioBtn.IsChecked;
                                isPriceChecked = ((bool)(rawIsPriceChecked));
                                if (isPriceChecked)
                                {
                                    isPriceMatch = gamePrice < 300;
                                }
                                bool isGameInWishList = false;

                                HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/tags/relations/all");
                                nestedWebRequest.Method = "GET";
                                nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                {
                                    using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = nestedReader.ReadToEnd();
                                        GameTagRelationsResponseInfo myNestedObj = (GameTagRelationsResponseInfo)js.Deserialize(objText, typeof(GameTagRelationsResponseInfo));
                                        status = myNestedObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            List<GameTagRelation> relations = myNestedObj.relations;
                                            List<GameTagRelation> currentGameRelations = relations.Where<GameTagRelation>((GameTagRelation relation) =>
                                            {
                                                string relationGameId = relation.game;
                                                bool isRelationForCurrentGame = relationGameId == gameId;
                                                return isRelationForCurrentGame;
                                            }).ToList<GameTagRelation>();
                                            List<string> currentGameRelationTags = new List<string>();
                                            foreach (GameTagRelation currentGameRelation in currentGameRelations)
                                            {
                                                string currentGameRelationTagId = currentGameRelation.tag;
                                                currentGameRelationTags.Add(currentGameRelationTagId);
                                            }

                                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/tags/all");
                                            innerNestedWebRequest.Method = "GET";
                                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                            {
                                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = innerNestedReader.ReadToEnd();
                                                    GameTagsResponseInfo myInnerNestedObj = (GameTagsResponseInfo)js.Deserialize(objText, typeof(GameTagsResponseInfo));
                                                    status = myInnerNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<GameTag> totalTags = myInnerNestedObj.tags;
                                                        List<GameTag> currentGameTags = totalTags.Where((GameTag tag) =>
                                                        {
                                                            string tagId = tag._id;
                                                            bool isTagFound = currentGameRelationTags.Contains(tagId);
                                                            return isTagFound;
                                                        }).ToList<GameTag>();
                                                        List<string> currentGameTagNames = new List<string>();
                                                        foreach (GameTag currentGameTag in currentGameTags)
                                                        {
                                                            string currentGameTagTitle = currentGameTag.title;
                                                            currentGameTagNames.Add(currentGameTagTitle);
                                                        }
                                                        isGameInWishList = exceptTags.All((string exceptTag) =>
                                                        {
                                                            bool isExceptTag = currentGameTagNames.Contains(exceptTag);
                                                            bool isNotExceptTag = !isExceptTag;
                                                            return isNotExceptTag;
                                                        });
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                                bool isAddGame = isGameInWishList && (isKeywordsMatches || isFilterDisabled) && isPlatformMatch && isPriceMatch;
                                return isAddGame;
                            }).ToList<GameResponseInfo>();
                            int totalGamesCount = totalGames.Count;
                            bool isGamesExists = totalGamesCount >= 1;
                            if (isGamesExists)
                            {
                                wantGamesList.HorizontalAlignment = HorizontalAlignment.Left;
                                foreach (GameResponseInfo someGame in totalGames)
                                {
                                    string someGameName = someGame.name;
                                    int someGamePrice = someGame.price;
                                    StackPanel gameElement = new StackPanel();
                                    gameElement.Orientation = Orientation.Horizontal;
                                    Image someGameThumbnail = new Image();
                                    someGameThumbnail.Width = 75;
                                    someGameThumbnail.Height = 75;
                                    someGameThumbnail.Margin = new Thickness(15);
                                    someGameThumbnail.BeginInit();
                                    someGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + someGameName));
                                    someGameThumbnail.EndInit();
                                    someGameThumbnail.ImageFailed += SetDefaultThumbnailHandler;
                                    gameElement.Children.Add(someGameThumbnail);
                                    StackPanel someGameAside = new StackPanel();
                                    someGameAside.Margin = new Thickness(15);
                                    TextBlock someGameNameLabel = new TextBlock();
                                    someGameNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                    someGameNameLabel.Text = someGameName;
                                    someGameNameLabel.FontSize = 14;
                                    someGameAside.Children.Add(someGameNameLabel);
                                    string someGamePriceLabelContent = someGamePrice + " Р";
                                    bool isFreeGame = someGamePrice <= 0;
                                    if (isFreeGame)
                                    {
                                        someGamePriceLabelContent = "Бесплатная";
                                    }
                                    TextBlock someGamePriceLabel = new TextBlock();
                                    someGamePriceLabel.Text = someGameName;
                                    someGamePriceLabel.Text = someGamePriceLabelContent;
                                    someGameAside.Children.Add(someGamePriceLabel);
                                    gameElement.Children.Add(someGameAside);
                                    gameElement.Margin = new Thickness(15);
                                    wantGamesList.Children.Add(gameElement);
                                }
                            }
                            else
                            {
                                StackPanel notFound = new StackPanel();
                                notFound.Margin = new Thickness(0, 15, 0, 15);
                                TextBlock notFoundLabel = new TextBlock();
                                notFoundLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                notFoundLabel.TextAlignment = TextAlignment.Center;
                                notFoundLabel.FontSize = 18;
                                notFoundLabel.Text = "ОЙ, ТУТ НИЧЕГО НЕТ";
                                notFound.Children.Add(notFoundLabel);
                                TextBlock notFoundSubLabel = new TextBlock();
                                notFoundSubLabel.HorizontalAlignment = HorizontalAlignment.Center;
                                notFoundSubLabel.TextAlignment = TextAlignment.Center;
                                notFoundSubLabel.FontSize = 18;
                                notFoundSubLabel.Text = "Ни один продукт из вашего списка желаемого не подходит под указанные фильтры.";
                                notFound.Children.Add(notFoundSubLabel);
                                wantGamesList.HorizontalAlignment = HorizontalAlignment.Center;
                                wantGamesList.Children.Add(notFound);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenEditProfileHandler (object sender, RoutedEventArgs e)
        {
            OpenEditProfile();
        }

        public void OpenEditProfile ()
        {
            mainControl.SelectedIndex = 2;
            AddHistoryRecord();
        }

        private void OpenPrivacyInfoHandler(object sender, RoutedEventArgs e)
        {
            OpenPrivacyInfo();
        }

        public void OpenPrivacyInfo()
        {
            mainControl.SelectedIndex = 41;
        }

        private void SaveUserInfoHandler(object sender, RoutedEventArgs e)
        {
            SaveUserInfo();
        }

        async public void SaveUserInfo ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string currentName = user.name;
                            string userNameBoxContent = userNameBox.Text;
                            bool isEditNick = currentName != userNameBoxContent;
                            if (isEditNick)
                            {
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/nicks/add/?id=" + currentUserId + @"&nick=" + userNameBoxContent);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                    }
                                }
                            }
                            int selectedCountryIndex = userCountryBox.SelectedIndex;
                            ItemCollection userCountryBoxItems = userCountryBox.Items;
                            object rawSelectedUserCountryBoxItem = userCountryBoxItems[selectedCountryIndex];
                            ComboBoxItem selectedUserCountryBoxItem = ((ComboBoxItem)(rawSelectedUserCountryBoxItem));
                            object rawUserCountryBoxContent = selectedUserCountryBoxItem.Content;
                            string userCountryBoxContent = ((string)(rawUserCountryBoxContent));
                            string userAboutBoxContent = userAboutBox.Text;

                            int userFriendsSettingsIndex = userFriendsSettingsSelector.SelectedIndex;
                            ItemCollection userFriendsSettingsSelectorItems = userFriendsSettingsSelector.Items;
                            object rawSelectedUserFriendsSettingsItem = userFriendsSettingsSelectorItems[userFriendsSettingsIndex];
                            ComboBoxItem selectedUserFriendsSettingsItem = ((ComboBoxItem)(rawSelectedUserFriendsSettingsItem));
                            object selectedUserFriendsSettingsItemData = selectedUserFriendsSettingsItem.DataContext;
                            string userFriendsSettings = ((string)(selectedUserFriendsSettingsItemData));
                            int userGamesSettingsIndex = userGamesSettingsSelector.SelectedIndex;
                            ItemCollection userGamesSettingsSelectorItems = userGamesSettingsSelector.Items;
                            object rawSelectedUserGamesSettingsItem = userGamesSettingsSelectorItems[userGamesSettingsIndex];
                            ComboBoxItem selectedUserGamesSettingsItem = ((ComboBoxItem)(rawSelectedUserGamesSettingsItem));
                            object selectedUserGamesSettingsItemData = selectedUserGamesSettingsItem.DataContext;
                            string userGamesSettings = ((string)(selectedUserGamesSettingsItemData));
                            int userEquipmentSettingsIndex = userEquipmentSettingsSelector.SelectedIndex;
                            ItemCollection userEquipmentSettingsSelectorItems = userEquipmentSettingsSelector.Items;
                            object rawSelectedUserEquipmentSettingsItem = userEquipmentSettingsSelectorItems[userEquipmentSettingsIndex];
                            ComboBoxItem selectedUserEquipmentSettingsItem = ((ComboBoxItem)(rawSelectedUserEquipmentSettingsItem));
                            object selectedUserEquipmentSettingsItemData = selectedUserEquipmentSettingsItem.DataContext;
                            string userEquipmentSettings = ((string)(selectedUserEquipmentSettingsItemData));
                            int userCommentsSettingsIndex = userCommentsSettingsSelector.SelectedIndex;
                            ItemCollection userCommentsSettingsSelectorItems = userCommentsSettingsSelector.Items;
                            object rawSelectedUserCommentsSettingsItem = userCommentsSettingsSelectorItems[userCommentsSettingsIndex];
                            ComboBoxItem selectedUserCommentsSettingsItem = ((ComboBoxItem)(rawSelectedUserCommentsSettingsItem));
                            object selectedUserCommentsSettingsItemData = selectedUserCommentsSettingsItem.DataContext;
                            string userCommentsSettings = ((string)(selectedUserCommentsSettingsItemData));

                            HttpClient httpClient = new HttpClient();
                            httpClient.DefaultRequestHeaders.Add("User-Agent", "C# App");
                            MultipartFormDataContent form = new MultipartFormDataContent();
                            ImageSource source = editProfileAvatarImg.Source;
                            BitmapImage bitmapImage = ((BitmapImage)(source));
                            byte[] imagebytearraystring = getPngFromImageControl(bitmapImage);
                            form.Add(new ByteArrayContent(imagebytearraystring, 0, imagebytearraystring.Count()), "profile_pic", "mock.png");

                            // string url = @"http://localhost:4000/api/user/edit/?id=" + currentUserId + "&name=" + userNameBoxContent + "&country=" + userCountryBoxContent + "&about=" + userAboutBoxContent + "&friends=" + userFriendsSettings + "&games=" + userGamesSettings + "&equipment=" + userEquipmentSettings + "&comments=" + userCommentsSettings;
                            string url = @"http://localhost:4000/api/user/edit/?id=" + currentUserId + "&name=" + userNameBoxContent + "&country=" + userCountryBoxContent + "&about=" + userAboutBoxContent + "&friends=" + userFriendsSettings + "&games=" + userGamesSettings + "&equipment=" + userEquipmentSettings + "&comments=" + userCommentsSettings;

                            HttpResponseMessage response = httpClient.PostAsync(url, form).Result;
                            httpClient.Dispose();
                            string sd = response.Content.ReadAsStringAsync().Result;
                            /**/
                            js = new JavaScriptSerializer();
                            RegisterResponseInfo myInnerObj = (RegisterResponseInfo)js.Deserialize(sd, typeof(RegisterResponseInfo));
                            status = myInnerObj.status;
                            isOkStatus = status == "OK";
                            // bool isOkStatus = true;
                            if (isOkStatus)
                            {
                                /*GetUser(currentUserId);
                                GetUserInfo(currentUserId, true);
                                GetEditInfo();*/
                                MessageBox.Show("Профиль был обновлен", "Внимание");
                            }
                            else
                            {
                                MessageBox.Show("Не удается обновить профиль", "Ошибка");
                            }

                            /*HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/edit/?id=" + currentUserId + "&name=" + userNameBoxContent + "&country=" + userCountryBoxContent + "&about=" + userAboutBoxContent);
                            webRequest.Method = "POST";
                            webRequest.ContentType = "multipart/form-data";
                            webRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                            {
                                using (var reader = new StreamReader(webResponse.GetResponseStream()))
                                {
                                    JavaScriptSerializer js = new JavaScriptSerializer();
                                    var objText = reader.ReadToEnd();

                                    RegisterResponseInfo myobj = (RegisterResponseInfo)js.Deserialize(objText, typeof(RegisterResponseInfo));

                                    string status = myobj.status;
                                    bool isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        MessageBox.Show("Профиль был обновлен", "Внимание");
                                        GetUser(currentUserId);
                                        GetUserInfo(currentUserId, true);
                                        GetEditInfo();
                                    }
                                    else
                                    {
                                        MessageBox.Show("Не удается редактировать профиль", "Ошибка");
                                    }
                                }
                            }*/

                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            List<Game> currentGames = loadedContent.games;
                            List<FriendSettings> currentFriends = loadedContent.friends;
                            Settings updatedSettings = loadedContent.settings;
                            List<string> currentCollections = loadedContent.collections;
                            Notifications currentNotifications = loadedContent.notifications;
                            List<string> currentCategories = loadedContent.categories;
                            List<string> currentRecentChats = loadedContent.recentChats;
                            Recommendations currentRecommendations = loadedContent.recommendations;
                            string currentLogoutDate = loadedContent.logoutDate;
                            List<string> currentSections = loadedContent.sections;
                            foreach (StackPanel profileTheme in profileThemes.Children)
                            {
                                bool isSelectedTheme = ((TextBlock)(profileTheme.Children[1])).Foreground == System.Windows.Media.Brushes.Blue;
                                if (isSelectedTheme)
                                {

                                    /*object rawThemeName = editProfileThemeName.DataContext;
                                    string themeName = rawThemeName.ToString();*/

                                    object rawThemeName = profileTheme.DataContext;
                                    string themeName = rawThemeName.ToString();

                                    updatedSettings.profileTheme = themeName;
                                    string savedContent = js.Serialize(new SavedContent
                                    {
                                        games = currentGames,
                                        friends = currentFriends,
                                        settings = updatedSettings,
                                        collections = currentCollections,
                                        notifications = currentNotifications,
                                        categories = currentCategories,
                                        recentChats = currentRecentChats,
                                        recommendations = currentRecommendations,
                                        logoutDate = currentLogoutDate,
                                        sections = currentSections
                                    });
                                    File.WriteAllText(saveDataFilePath, savedContent);
                                    break;
                                }
                            }

                            GetUser(currentUserId);
                            GetUserInfo(currentUserId, true);
                            GetEditInfo();

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public byte[] getPngFromImageControl(BitmapImage imageC)
        {
            MemoryStream memStream = new MemoryStream();
            PngBitmapEncoder encoder = new PngBitmapEncoder();
            encoder.Frames.Add(BitmapFrame.Create(imageC));
            encoder.Save(memStream);
            return memStream.ToArray();
        }

        public async void ListenSockets()
        {
            try
            {
                /*
                 * glitch выдает ошибку с сокетами
                 * client = new SocketIO("http://localhost:4000/");
                */

                client = new SocketIO("http://localhost:4000/");
                // client = new SocketIO("https://digitaldistributtionservice.herokuapp.com/");

                client.OnConnected += async (sender, e) =>
                {
                    Debugger.Log(0, "debug", "client socket conntected");
                    await client.EmitAsync("user_is_online", currentUserId);
                };
                client.On("friend_is_played", response =>
                {
                    var rawResult = response.GetValue<string>();
                    string[] result = rawResult.Split(new char[] { '|' });
                    string userId = result[0];
                    string gameName = result[1];
                    try
                    {
                        HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                        webRequest.Method = "GET";
                        webRequest.UserAgent = ".NET Framework Test Client";
                        using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                        {
                            using (var reader = new StreamReader(webResponse.GetResponseStream()))
                            {
                                JavaScriptSerializer js = new JavaScriptSerializer();
                                var objText = reader.ReadToEnd();
                                FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                string status = myobj.status;
                                bool isOkStatus = status == "OK";
                                if (isOkStatus)
                                {
                                    List<Friend> friends = myobj.friends;
                                    List<Friend> myFriends = friends.Where<Friend>((Friend joint) =>
                                    {
                                        string localUserId = joint.user;
                                        bool isMyFriend = localUserId == currentUserId;
                                        return isMyFriend;
                                    }).ToList<Friend>();
                                    List<string> friendsIds = new List<string>();
                                    foreach (Friend myFriend in myFriends)
                                    {
                                        string friendId = myFriend.friend;
                                        friendsIds.Add(friendId);
                                    }
                                    bool isMyFriendOnline = friendsIds.Contains(userId);
                                    Debugger.Log(0, "debug", "myFriends: " + myFriends.Count.ToString());
                                    Debugger.Log(0, "debug", "friendsIds: " + String.Join("|", friendsIds));
                                    Debugger.Log(0, "debug", "isMyFriendOnline: " + isMyFriendOnline);
                                    if (isMyFriendOnline)
                                    {
                                        HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                        innerWebRequest.Method = "GET";
                                        innerWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                        {
                                            using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerReader.ReadToEnd();
                                                UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                status = myInnerObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    User sender = myInnerObj.user;
                                                    string senderName = sender.name;
                                                    Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                                    string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                                    string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                                    js = new JavaScriptSerializer();
                                                    string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                                    SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                                    List<Game> currentGames = loadedContent.games;
                                                    List<FriendSettings> updatedFriends = loadedContent.friends;
                                                    Settings currentSettings = loadedContent.settings;
                                                    List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings friend) =>
                                                    {
                                                        return friend.id == userId;
                                                    }).ToList();
                                                    int countCachedFriends = cachedFriends.Count;
                                                    bool isCachedFriendsExists = countCachedFriends >= 1;
                                                    if (isCachedFriendsExists)
                                                    {
                                                        FriendSettings cachedFriend = cachedFriends[0];
                                                        bool isLocalNotificationEnabled = cachedFriend.isFriendPlayedNotification;
                                                        bool isGlobalNotificationEnabled = currentSettings.isFriendPlayedNotification;
                                                        bool isNotificationEnabled = isLocalNotificationEnabled && isGlobalNotificationEnabled;
                                                        if (isNotificationEnabled)
                                                        {
                                                            this.Dispatcher.Invoke(async () =>
                                                            {
                                                                Popup friendNotification = new Popup();
                                                                friendNotification.Placement = PlacementMode.Custom;
                                                                friendNotification.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                                                friendNotification.PlacementTarget = this;
                                                                friendNotification.Width = 225;
                                                                friendNotification.Height = 275;
                                                                StackPanel friendNotificationBody = new StackPanel();
                                                                friendNotificationBody.Background = friendRequestBackground;
                                                                Image friendNotificationBodySenderAvatar = new Image();
                                                                friendNotificationBodySenderAvatar.Width = 100;
                                                                friendNotificationBodySenderAvatar.Height = 100;
                                                                friendNotificationBodySenderAvatar.BeginInit();
                                                                Uri friendNotificationBodySenderAvatarUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                                                                BitmapImage friendNotificationBodySenderAvatarImg = new BitmapImage(friendNotificationBodySenderAvatarUri);
                                                                friendNotificationBodySenderAvatar.Source = friendNotificationBodySenderAvatarImg;
                                                                friendNotificationBodySenderAvatar.EndInit();
                                                                friendNotificationBody.Children.Add(friendNotificationBodySenderAvatar);
                                                                TextBlock friendNotificationBodySenderLoginLabel = new TextBlock();
                                                                friendNotificationBodySenderLoginLabel.Margin = new Thickness(10);
                                                                string newLine = Environment.NewLine;
                                                                friendNotificationBodySenderLoginLabel.Text = "Пользователь " + senderName + newLine + " играет в " + newLine + gameName;
                                                                friendNotificationBody.Children.Add(friendNotificationBodySenderLoginLabel);
                                                                friendNotification.Child = friendNotificationBody;
                                                                friendRequests.Children.Add(friendNotification);
                                                                friendNotification.IsOpen = true;
                                                                friendNotification.StaysOpen = false;
                                                                friendNotification.PopupAnimation = PopupAnimation.Fade;
                                                                friendNotification.AllowsTransparency = true;
                                                                DispatcherTimer timer = new DispatcherTimer();
                                                                timer.Interval = TimeSpan.FromSeconds(3);
                                                                timer.Tick += delegate
                                                                {
                                                                    friendNotification.IsOpen = false;
                                                                    timer.Stop();
                                                                };
                                                                timer.Start();
                                                                friendNotifications.Children.Add(friendNotification);
                                                            });
                                                            // MessageBox.Show("Пользователь " + senderName + " играет в " + gameName, "Внимание");
                                                        }
                                                        // bool isSoundEnabled = cachedFriend.isFriendPlayedSound;
                                                        bool isLocalSoundEnabled = cachedFriend.isFriendPlayedSound;
                                                        bool isGlobalSoundEnabled = currentSettings.isFriendPlayedSound;
                                                        bool isSoundEnabled = isLocalSoundEnabled && isGlobalSoundEnabled;
                                                        if (isSoundEnabled)
                                                        {
                                                            Application.Current.Dispatcher.Invoke(() =>
                                                            {
                                                                mainAudio.LoadedBehavior = MediaState.Play;
                                                                mainAudio.Source = new Uri(@"C:\wpf_projects\GamaManager\GamaManager\Sounds\notification.wav");
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (System.Net.WebException)
                    {
                        MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                        this.Close();
                    }
                });

                client.On("friend_is_online", response =>
                {
                    var result = response.GetValue<string>();
                    Debugger.Log(0, "debug", Environment.NewLine + "friend is online: " + result + Environment.NewLine);
                    try
                    {
                        HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                        webRequest.Method = "GET";
                        webRequest.UserAgent = ".NET Framework Test Client";
                        using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                        {
                            using (var reader = new StreamReader(webResponse.GetResponseStream()))
                            {
                                JavaScriptSerializer js = new JavaScriptSerializer();
                                var objText = reader.ReadToEnd();

                                FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));

                                string status = myobj.status;
                                bool isOkStatus = status == "OK";
                                if (isOkStatus)
                                {
                                    List<Friend> friends = myobj.friends;
                                    List<Friend> myFriends = friends.Where<Friend>((Friend joint) =>
                                    {
                                        string userId = joint.user;
                                        bool isMyFriend = userId == currentUserId;
                                        return isMyFriend;
                                    }).ToList<Friend>();
                                    List<string> friendsIds = new List<string>();
                                    foreach (Friend myFriend in myFriends)
                                    {
                                        string friendId = myFriend.friend;
                                        friendsIds.Add(friendId);
                                    }
                                    bool isMyFriendOnline = friendsIds.Contains(result);
                                    Debugger.Log(0, "debug", "myFriends: " + myFriends.Count.ToString());
                                    Debugger.Log(0, "debug", "friendsIds: " + String.Join("|", friendsIds));
                                    Debugger.Log(0, "debug", "isMyFriendOnline: " + isMyFriendOnline);
                                    if (isMyFriendOnline)
                                    {
                                        HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + result);
                                        innerWebRequest.Method = "GET";
                                        innerWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                        {
                                            using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerReader.ReadToEnd();

                                                UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                                                status = myInnerObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    User sender = myInnerObj.user;
                                                    string senderName = sender.name;

                                                    Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                                    string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                                    string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                                    js = new JavaScriptSerializer();
                                                    string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                                    SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                                    List<Game> currentGames = loadedContent.games;
                                                    List<FriendSettings> updatedFriends = loadedContent.friends;
                                                    Settings currentSettings = loadedContent.settings;
                                                    List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings friend) =>
                                                    {
                                                        return friend.id == result;
                                                    }).ToList();
                                                    int countCachedFriends = cachedFriends.Count;
                                                    bool isCachedFriendsExists = countCachedFriends >= 1;
                                                    if (isCachedFriendsExists)
                                                    {
                                                        FriendSettings cachedFriend = cachedFriends[0];
                                                        bool isLocalNotificationEnabled = cachedFriend.isFriendOnlineNotification;
                                                        bool isGlobalNotificationEnabled = currentSettings.isFriendOnlineNotification;
                                                        bool isNotificationEnabled = isLocalNotificationEnabled && isGlobalNotificationEnabled;
                                                        if (isNotificationEnabled)
                                                        {

                                                            this.Dispatcher.Invoke(async () =>
                                                            {
                                                                Popup friendNotification = new Popup();
                                                                friendNotification.Placement = PlacementMode.Custom;
                                                                friendNotification.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                                                friendNotification.PlacementTarget = this;
                                                                friendNotification.Width = 225;
                                                                friendNotification.Height = 275;
                                                                StackPanel friendNotificationBody = new StackPanel();
                                                                friendNotificationBody.Background = friendRequestBackground;
                                                                Image friendNotificationBodySenderAvatar = new Image();
                                                                friendNotificationBodySenderAvatar.Width = 100;
                                                                friendNotificationBodySenderAvatar.Height = 100;
                                                                friendNotificationBodySenderAvatar.BeginInit();
                                                                Uri friendNotificationBodySenderAvatarUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                                                                BitmapImage friendNotificationBodySenderAvatarImg = new BitmapImage(friendNotificationBodySenderAvatarUri);
                                                                friendNotificationBodySenderAvatar.Source = friendNotificationBodySenderAvatarImg;
                                                                friendNotificationBodySenderAvatar.EndInit();
                                                                friendNotificationBody.Children.Add(friendNotificationBodySenderAvatar);
                                                                TextBlock friendNotificationBodySenderLoginLabel = new TextBlock();
                                                                friendNotificationBodySenderLoginLabel.Margin = new Thickness(10);
                                                                friendNotificationBodySenderLoginLabel.Text = "Пользователь " + Environment.NewLine + senderName + Environment.NewLine + " теперь в сети";
                                                                friendNotificationBody.Children.Add(friendNotificationBodySenderLoginLabel);
                                                                friendNotification.Child = friendNotificationBody;
                                                                friendRequests.Children.Add(friendNotification);
                                                                friendNotification.IsOpen = true;
                                                                friendNotification.StaysOpen = false;
                                                                friendNotification.PopupAnimation = PopupAnimation.Fade;
                                                                friendNotification.AllowsTransparency = true;
                                                                DispatcherTimer timer = new DispatcherTimer();
                                                                timer.Interval = TimeSpan.FromSeconds(3);
                                                                timer.Tick += delegate
                                                                {
                                                                    friendNotification.IsOpen = false;
                                                                    timer.Stop();
                                                                };
                                                                timer.Start();
                                                                friendNotifications.Children.Add(friendNotification);
                                                            });
                                                        }
                                                        // bool isSoundEnabled = cachedFriend.isFriendOnlineSound;
                                                        bool isLocalSoundEnabled = cachedFriend.isFriendOnlineSound;
                                                        bool isGlobalSoundEnabled = currentSettings.isFriendOnlineSound;
                                                        bool isSoundEnabled = isLocalSoundEnabled && isGlobalSoundEnabled;
                                                        if (isSoundEnabled)
                                                        {
                                                            Application.Current.Dispatcher.Invoke(() =>
                                                            {
                                                                mainAudio.LoadedBehavior = MediaState.Play;
                                                                mainAudio.Source = new Uri(@"C:\wpf_projects\GamaManager\GamaManager\Sounds\notification.wav");
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (System.Net.WebException)
                    {
                        MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                        this.Close();
                    }
                    // здесь GetFriends();
                });
                client.On("friend_send_msg_notification", async response =>
                {
                    var rawResult = response.GetValue<string>();
                    string[] result = rawResult.Split(new char[] { '|' });
                    string userId = result[0];
                    string msg = result[1];
                    string chatId = result[2];
                    string msgType = result[3];
                    string cachedId = result[4];
                    string channelId = result[5];
                    string method = result[6];
                    Debugger.Log(0, "debug", Environment.NewLine + "user " + userId + " send msg: " + msg + Environment.NewLine);
                    try
                    {
                        HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                        webRequest.Method = "GET";
                        webRequest.UserAgent = ".NET Framework Test Client";
                        using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                        {
                            using (var reader = new StreamReader(webResponse.GetResponseStream()))
                            {
                                JavaScriptSerializer js = new JavaScriptSerializer();
                                var objText = reader.ReadToEnd();
                                FriendsResponseInfo myobj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                string status = myobj.status;
                                bool isOkStatus = status == "OK";
                                if (isOkStatus)
                                {
                                    List<Friend> friends = myobj.friends;
                                    List<Friend> myFriends = friends.Where<Friend>((Friend joint) =>
                                    {
                                        string localUserId = joint.user;
                                        bool isMyFriend = localUserId == currentUserId;
                                        return isMyFriend;
                                    }).ToList<Friend>();
                                    List<string> friendsIds = new List<string>();
                                    foreach (Friend myFriend in myFriends)
                                    {
                                        string friendId = myFriend.friend;
                                        friendsIds.Add(friendId);
                                    }
                                    bool isMyFriendOnline = friendsIds.Contains(userId);
                                    Debugger.Log(0, "debug", "myFriends: " + myFriends.Count.ToString());
                                    Debugger.Log(0, "debug", "friendsIds: " + String.Join("|", friendsIds));
                                    Debugger.Log(0, "debug", "isMyFriendOnline: " + isMyFriendOnline);
                                    if (isMyFriendOnline && method == "friend")
                                    {
                                        string currentFriendId = userId;
                                        bool isCurrentChat = currentFriendId == userId;
                                        if (isCurrentChat)
                                        {
                                            this.Dispatcher.Invoke(() =>
                                            {
                                                try
                                                {
                                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                                    innerWebRequest.Method = "GET";
                                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                                    {
                                                        using (StreamReader innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = innerReader.ReadToEnd();

                                                            UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                                                            status = myobj.status;
                                                            isOkStatus = status == "OK";
                                                            if (isOkStatus)
                                                            {
                                                                User friend = myInnerObj.user;
                                                                string senderName = friend.name;
                                                                Application app = Application.Current;
                                                                WindowCollection windows = app.Windows;
                                                                IEnumerable<Window> myWindows = windows.OfType<Window>();
                                                                /*int countChatWindows = myWindows.Count(window =>
                                                                {
                                                                    string windowTitle = window.Title;
                                                                    bool isChatWindow = windowTitle == "Чат";
                                                                    return isChatWindow;
                                                                });*/
                                                                List<Window> chatWindows = myWindows.Where<Window>(window =>
                                                                {
                                                                    string windowTitle = window.Title;
                                                                    bool isChatWindow = windowTitle == "Чат";
                                                                    return isChatWindow;
                                                                }).ToList<Window>();
                                                                int countChatWindows = chatWindows.Count;
                                                                bool isNotOpenedChatWindows = countChatWindows <= 0;
                                                                if (isNotOpenedChatWindows && currentUserId != userId)
                                                                {

                                                                    Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                                                    string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                                                    string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                                                    js = new JavaScriptSerializer();
                                                                    string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                                                    SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                                                    List<Game> currentGames = loadedContent.games;
                                                                    List<FriendSettings> updatedFriends = loadedContent.friends;
                                                                    Settings currentSettings = loadedContent.settings;
                                                                    List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings localFriend) =>
                                                                    {
                                                                        return localFriend.id == userId;
                                                                    }).ToList();
                                                                    int countCachedFriends = cachedFriends.Count;
                                                                    bool isCachedFriendsExists = countCachedFriends >= 1;
                                                                    if (isCachedFriendsExists)
                                                                    {
                                                                        FriendSettings cachedFriend = cachedFriends[0];
                                                                        bool isLocalNotificationEnabled = cachedFriend.isFriendSendMsgNotification;
                                                                        bool isGlobalNotificationEnabled = currentSettings.isFriendSendMsgNotification;
                                                                        bool isNotificationEnabled = isLocalNotificationEnabled && isGlobalNotificationEnabled;
                                                                        if (isNotificationEnabled)
                                                                        {
                                                                            Application.Current.Dispatcher.Invoke(async () =>
                                                                            {
                                                                                if (chatId == currentUserId && friendsIds.Contains(userId))
                                                                                {
                                                                                    Popup friendNotification = new Popup();
                                                                                    friendNotification.DataContext = friend._id;
                                                                                    friendNotification.MouseLeftButtonUp += OpenChatFromPopupHandler;
                                                                                    friendNotification.Placement = PlacementMode.Custom;
                                                                                    friendNotification.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                                                                    friendNotification.PlacementTarget = this;
                                                                                    friendNotification.Width = 225;
                                                                                    friendNotification.Height = 275;
                                                                                    StackPanel friendNotificationBody = new StackPanel();
                                                                                    friendNotificationBody.Background = friendRequestBackground;
                                                                                    Image friendNotificationBodySenderAvatar = new Image();
                                                                                    friendNotificationBodySenderAvatar.Width = 100;
                                                                                    friendNotificationBodySenderAvatar.Height = 100;
                                                                                    friendNotificationBodySenderAvatar.BeginInit();
                                                                                    Uri friendNotificationBodySenderAvatarUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                                                                                    BitmapImage friendNotificationBodySenderAvatarImg = new BitmapImage(friendNotificationBodySenderAvatarUri);
                                                                                    friendNotificationBodySenderAvatar.Source = friendNotificationBodySenderAvatarImg;
                                                                                    friendNotificationBodySenderAvatar.EndInit();
                                                                                    friendNotificationBody.Children.Add(friendNotificationBodySenderAvatar);
                                                                                    TextBlock friendNotificationBodySenderLoginLabel = new TextBlock();
                                                                                    friendNotificationBodySenderLoginLabel.Margin = new Thickness(10);
                                                                                    friendNotificationBodySenderLoginLabel.Text = "Пользователь " + Environment.NewLine + senderName + Environment.NewLine + " оставил вам сообщение";
                                                                                    friendNotificationBody.Children.Add(friendNotificationBodySenderLoginLabel);
                                                                                    friendNotification.Child = friendNotificationBody;
                                                                                    friendRequests.Children.Add(friendNotification);
                                                                                    friendNotification.IsOpen = true;
                                                                                    friendNotification.StaysOpen = false;
                                                                                    friendNotification.PopupAnimation = PopupAnimation.Fade;
                                                                                    friendNotification.AllowsTransparency = true;
                                                                                    DispatcherTimer timer = new DispatcherTimer();
                                                                                    timer.Interval = TimeSpan.FromSeconds(3);
                                                                                    timer.Tick += delegate
                                                                                    {
                                                                                        friendNotification.IsOpen = false;
                                                                                        timer.Stop();
                                                                                    };
                                                                                    timer.Start();
                                                                                    friendNotifications.Children.Add(friendNotification);
                                                                                }
                                                                            });
                                                                        }
                                                                        // bool isSoundEnabled = cachedFriend.isFriendSendMsgSound;
                                                                        bool isLocalSoundEnabled = cachedFriend.isFriendSendMsgSound;
                                                                        bool isGlobalSoundEnabled = currentSettings.isFriendSendMsgSound;
                                                                        bool isSoundEnabled = isLocalSoundEnabled && isGlobalSoundEnabled;
                                                                        if (isSoundEnabled)
                                                                        {
                                                                            Application.Current.Dispatcher.Invoke(() =>
                                                                            {
                                                                                mainAudio.LoadedBehavior = MediaState.Play;
                                                                                mainAudio.Source = new Uri(@"C:\wpf_projects\GamaManager\GamaManager\Sounds\notification.wav");
                                                                            });
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    bool isChatNotOpened = chatWindows.All<Window>((Window window) =>
                                                                    {
                                                                        ChatDialog dialog = window as ChatDialog;
                                                                        List<string> localChats = dialog.chats;
                                                                        bool isChatFound = localChats.Contains(userId);
                                                                        bool isChatNotFound = !isChatFound;
                                                                        return isChatNotFound;
                                                                    });
                                                                    if (isChatNotOpened && currentUserId != userId)
                                                                    {

                                                                        Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                                                        string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                                                        string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                                                        js = new JavaScriptSerializer();
                                                                        string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                                                        SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                                                        List<Game> currentGames = loadedContent.games;
                                                                        List<FriendSettings> updatedFriends = loadedContent.friends;
                                                                        Settings currentSettings = loadedContent.settings;
                                                                        List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings localFriend) =>
                                                                        {
                                                                            return localFriend.id == userId;
                                                                        }).ToList();
                                                                        int countCachedFriends = cachedFriends.Count;
                                                                        bool isCachedFriendsExists = countCachedFriends >= 1;
                                                                        if (isCachedFriendsExists)
                                                                        {
                                                                            FriendSettings cachedFriend = cachedFriends[0];
                                                                            bool isLocalNotificationEnabled = cachedFriend.isFriendSendMsgNotification;
                                                                            bool isGlobalNotificationEnabled = currentSettings.isFriendSendMsgNotification;
                                                                            bool isNotificationEnabled = isLocalNotificationEnabled && isGlobalNotificationEnabled;
                                                                            if (isNotificationEnabled)
                                                                            {
                                                                                Application.Current.Dispatcher.Invoke(async () =>
                                                                                {
                                                                                    if (chatId == currentUserId && friendsIds.Contains(userId))
                                                                                    {
                                                                                        Popup friendNotification = new Popup();
                                                                                        friendNotification.DataContext = friend._id;
                                                                                        friendNotification.MouseLeftButtonUp += OpenChatFromPopupHandler;
                                                                                        friendNotification.Placement = PlacementMode.Custom;
                                                                                        friendNotification.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                                                                        friendNotification.PlacementTarget = this;
                                                                                        friendNotification.Width = 225;
                                                                                        friendNotification.Height = 275;
                                                                                        StackPanel friendNotificationBody = new StackPanel();
                                                                                        friendNotificationBody.Background = friendRequestBackground;
                                                                                        Image friendNotificationBodySenderAvatar = new Image();
                                                                                        friendNotificationBodySenderAvatar.Width = 100;
                                                                                        friendNotificationBodySenderAvatar.Height = 100;
                                                                                        friendNotificationBodySenderAvatar.BeginInit();
                                                                                        Uri friendNotificationBodySenderAvatarUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                                                                                        BitmapImage friendNotificationBodySenderAvatarImg = new BitmapImage(friendNotificationBodySenderAvatarUri);
                                                                                        friendNotificationBodySenderAvatar.Source = friendNotificationBodySenderAvatarImg;
                                                                                        friendNotificationBodySenderAvatar.EndInit();
                                                                                        friendNotificationBody.Children.Add(friendNotificationBodySenderAvatar);
                                                                                        TextBlock friendNotificationBodySenderLoginLabel = new TextBlock();
                                                                                        friendNotificationBodySenderLoginLabel.Margin = new Thickness(10);
                                                                                        friendNotificationBodySenderLoginLabel.Text = "Пользователь " + Environment.NewLine + senderName + Environment.NewLine + " оставил вам сообщение";
                                                                                        friendNotificationBody.Children.Add(friendNotificationBodySenderLoginLabel);
                                                                                        friendNotification.Child = friendNotificationBody;
                                                                                        friendRequests.Children.Add(friendNotification);
                                                                                        friendNotification.IsOpen = true;
                                                                                        friendNotification.StaysOpen = false;
                                                                                        friendNotification.PopupAnimation = PopupAnimation.Fade;
                                                                                        friendNotification.AllowsTransparency = true;
                                                                                        DispatcherTimer timer = new DispatcherTimer();
                                                                                        timer.Interval = TimeSpan.FromSeconds(3);
                                                                                        timer.Tick += delegate
                                                                                        {
                                                                                            friendNotification.IsOpen = false;
                                                                                            timer.Stop();
                                                                                        };
                                                                                        timer.Start();
                                                                                        friendNotifications.Children.Add(friendNotification);
                                                                                    }
                                                                                });
                                                                            }
                                                                            // bool isSoundEnabled = cachedFriend.isFriendSendMsgSound;
                                                                            bool isLocalSoundEnabled = cachedFriend.isFriendSendMsgSound;
                                                                            bool isGlobalSoundEnabled = currentSettings.isFriendSendMsgSound;
                                                                            bool isSoundEnabled = isLocalSoundEnabled && isGlobalSoundEnabled;
                                                                            if (isSoundEnabled)
                                                                            {
                                                                                Application.Current.Dispatcher.Invoke(() =>
                                                                                {
                                                                                    mainAudio.LoadedBehavior = MediaState.Play;
                                                                                    mainAudio.Source = new Uri(@"C:\wpf_projects\GamaManager\GamaManager\Sounds\notification.wav");
                                                                                });
                                                                            }
                                                                        }

                                                                    }
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                                catch (System.Net.WebException)
                                                {
                                                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                                    this.Close();
                                                }
                                            });
                                        }
                                    }

                                    if (method == "talk")
                                    {
                                        HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/talks/all");
                                        innerWebRequest.Method = "GET";
                                        innerWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                        {
                                            using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerReader.ReadToEnd();
                                                TalksResponseInfo myInnerObj = (TalksResponseInfo)js.Deserialize(objText, typeof(TalksResponseInfo));
                                                status = myobj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    List<Talk> totalTalks = myInnerObj.talks;
                                                    HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/talks/relations/all");
                                                    nestedWebRequest.Method = "GET";
                                                    nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                    using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                                    {
                                                        using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                        {
                                                            js = new JavaScriptSerializer();
                                                            objText = nestedReader.ReadToEnd();
                                                            TalkRelationsResponseInfo myNestedObj = (TalkRelationsResponseInfo)js.Deserialize(objText, typeof(TalkRelationsResponseInfo));
                                                            status = myNestedObj.status;
                                                            isOkStatus = status == "OK";
                                                            if (isOkStatus)
                                                            {
                                                                List<TalkRelation> relations = myNestedObj.relations;
                                                                List<TalkRelation> myTalks = relations.Where<TalkRelation>((TalkRelation relation) =>
                                                                {
                                                                    string relationTalk = relation.talk;
                                                                    string relationUser = relation.user;
                                                                    bool isCurrentUser = relationUser == currentUserId;
                                                                    return isCurrentUser;
                                                                }).ToList<TalkRelation>();
                                                                int countMyTalks = myTalks.Count;
                                                                bool isHaveTalks = countMyTalks >= 1;
                                                                if (isHaveTalks)
                                                                {
                                                                    Debugger.Log(0, "debug", Environment.NewLine + "Пришло сообщение проверяю беседы " + isHaveTalks.ToString() + Environment.NewLine);
                                                                    /*foreach (Talk talk in totalTalks)
                                                                    {
                                                                        string talkId = talk._id;
                                                                        bool isMyTalk = false;
                                                                        List<TalkRelation> results = relations.Where<TalkRelation>((TalkRelation relation) =>
                                                                        {
                                                                            string relationTalk = relation.talk;
                                                                            string relationUser = relation.user;
                                                                            bool isCurrentTalk = relationTalk == talkId;
                                                                            bool isCurrentUser = relationUser == currentUserId;
                                                                            bool isLocalMyTalk = isCurrentUser && isCurrentTalk;
                                                                            return isLocalMyTalk;
                                                                        }).ToList<TalkRelation>();
                                                                        int countResults = results.Count;
                                                                        isMyTalk = countResults >= 1;
                                                                        if (isMyTalk)
                                                                        {

                                                                        }
    {                                                                    }*/
                                                                    List<string> myTalkIds = new List<string>();
                                                                    foreach (TalkRelation myTalkRelation in myTalks)
                                                                    {
                                                                        string talkId = myTalkRelation.talk;
                                                                        myTalkIds.Add(talkId);
                                                                    }
                                                                    bool isMsgForMe = myTalkIds.Contains(chatId);
                                                                    if (isMsgForMe)
                                                                    {
                                                                        Debugger.Log(0, "debug", Environment.NewLine + "Пришло сообщение из беседы" + Environment.NewLine);
                                                                        Application.Current.Dispatcher.Invoke(async () =>
                                                                        {

                                                                            HttpWebRequest innserNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/talks/get/?id=" + chatId);
                                                                            innserNestedWebRequest.Method = "GET";
                                                                            innserNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                                            using (HttpWebResponse innserNestedWebResponse = (HttpWebResponse)innserNestedWebRequest.GetResponse())
                                                                            {
                                                                                using (var innserNestedReader = new StreamReader(innserNestedWebResponse.GetResponseStream()))
                                                                                {
                                                                                    js = new JavaScriptSerializer();
                                                                                    objText = innserNestedReader.ReadToEnd();
                                                                                    TalkResponseInfo myInnserNestedObj = (TalkResponseInfo)js.Deserialize(objText, typeof(TalkResponseInfo));
                                                                                    status = myInnserNestedObj.status;
                                                                                    isOkStatus = status == "OK";
                                                                                    if (isOkStatus)
                                                                                    {
                                                                                        HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + userId);
                                                                                        userWebRequest.Method = "GET";
                                                                                        userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                        using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                                        {
                                                                                            using (var userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                                            {
                                                                                                js = new JavaScriptSerializer();
                                                                                                objText = userReader.ReadToEnd();
                                                                                                UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                                status = myUserObj.status;
                                                                                                isOkStatus = status == "OK";
                                                                                                if (isOkStatus)
                                                                                                {
                                                                                                    Application localApp = Application.Current;
                                                                                                    WindowCollection localWindows = localApp.Windows;
                                                                                                    IEnumerable<Window> myWindows = localWindows.OfType<Window>();
                                                                                                    int countTalkWindows = myWindows.Count(window =>
                                                                                                    {
                                                                                                        string windowTitle = window.Title;
                                                                                                        bool isTalkWindow = windowTitle == "Беседа";
                                                                                                        return isTalkWindow;
                                                                                                    });
                                                                                                    bool isNotOpenedTalkWindows = countTalkWindows <= 0;
                                                                                                    bool isMock = true;
                                                                                                    if (isNotOpenedTalkWindows || isMock)
                                                                                                    {   User user = myUserObj.user;
                                                                                                        string userName = user.name;
                                                                                                        Talk talk = myInnserNestedObj.talk;
                                                                                                        string talkTitle = talk.title;
                                                                                                        Popup talkNotification = new Popup();
                                                                                                        // talkNotification.DataContext = chatId;
                                                                                                        Dictionary<String, Object>  talkNotificationData = new Dictionary<String, Object>();
                                                                                                        talkNotificationData.Add("talk", chatId);
                                                                                                        talkNotificationData.Add("channel", channelId);
                                                                                                        talkNotification.DataContext = talkNotificationData;
                                                                                                        talkNotification.MouseLeftButtonUp += OpenTalkFromPopupHandler;
                                                                                                        talkNotification.Placement = PlacementMode.Custom;
                                                                                                        talkNotification.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(FriendRequestPlacementHandler);
                                                                                                        talkNotification.PlacementTarget = this;
                                                                                                        talkNotification.Width = 225;
                                                                                                        talkNotification.Height = 275;
                                                                                                        StackPanel talkNotificationBody = new StackPanel();
                                                                                                        talkNotificationBody.Background = friendRequestBackground;
                                                                                                        Image talkNotificationBodySenderAvatar = new Image();
                                                                                                        talkNotificationBodySenderAvatar.Width = 100;
                                                                                                        talkNotificationBodySenderAvatar.Height = 100;
                                                                                                        talkNotificationBodySenderAvatar.BeginInit();
                                                                                                        Uri talkNotificationBodySenderAvatarUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                                                                                                        BitmapImage talkNotificationBodySenderAvatarImg = new BitmapImage(talkNotificationBodySenderAvatarUri);
                                                                                                        talkNotificationBodySenderAvatar.Source = talkNotificationBodySenderAvatarImg;
                                                                                                        talkNotificationBodySenderAvatar.EndInit();
                                                                                                        talkNotificationBody.Children.Add(talkNotificationBodySenderAvatar);
                                                                                                        TextBlock talkNotificationBodySenderLoginLabel = new TextBlock();
                                                                                                        talkNotificationBodySenderLoginLabel.Margin = new Thickness(10);
                                                                                                        talkNotificationBodySenderLoginLabel.Text = userName + " в" + Environment.NewLine + "беседе " + talkTitle + Environment.NewLine + "оставил вам сообщение";
                                                                                                        talkNotificationBody.Children.Add(talkNotificationBodySenderLoginLabel);
                                                                                                        talkNotification.Child = talkNotificationBody;
                                                                                                        friendRequests.Children.Add(talkNotification);
                                                                                                        talkNotification.IsOpen = true;
                                                                                                        talkNotification.StaysOpen = false;
                                                                                                        talkNotification.PopupAnimation = PopupAnimation.Fade;
                                                                                                        talkNotification.AllowsTransparency = true;
                                                                                                        DispatcherTimer timer = new DispatcherTimer();
                                                                                                        timer.Interval = TimeSpan.FromSeconds(3);
                                                                                                        timer.Tick += delegate
                                                                                                        {
                                                                                                            talkNotification.IsOpen = false;
                                                                                                            timer.Stop();
                                                                                                        };
                                                                                                        timer.Start();
                                                                                                        talkNotifications.Children.Add(talkNotification);

                                                                                                        mainAudio.LoadedBehavior = MediaState.Play;
                                                                                                        mainAudio.Source = new Uri(@"C:\wpf_projects\GamaManager\GamaManager\Sounds\notification.wav");
                                                                                                    
                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        });
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (System.Net.WebException)
                    {
                        MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                        this.Close();
                    }
                });
                client.On("user_receive_friend_request", async response =>
                {
                    var rawResult = response.GetValue<string>();
                    string[] result = rawResult.Split(new char[] { '|' });
                    string friendId = result[0];
                    string userId = result[1];
                    bool isRequestForMe = userId == currentUserId;
                    if (isRequestForMe)
                    {
                        Application.Current.Dispatcher.Invoke(() => GetFriendRequests());
                    }
                });
                client.On("user_send_msg_to_my_topic", async response =>
                {
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        var rawResult = response.GetValue<string>();
                        string[] result = rawResult.Split(new char[] { '|' });
                        string forumId = result[0];
                        string topicId = result[1];
                        string userId = result[2];
                        bool isOtherSender = userId != currentUserId;
                        if (isOtherSender)
                        {
                            int selectedWindowIndex = mainControl.SelectedIndex;
                            bool isForumsWindow = selectedWindowIndex == 6;
                            bool isForumTopicsWindow = selectedWindowIndex == 7;
                            bool isForumTopicMsgsWindow = selectedWindowIndex == 8;
                            if (isForumsWindow)
                            {
                                string keywords = forumsKeywordsBox.Text;
                                GetForums(keywords);
                            }
                            else if (isForumTopicsWindow)
                            {
                                SelectForum(forumId);
                            }
                            else if (isForumTopicMsgsWindow)
                            {
                                SelectTopic(topicId);
                            }
                        }
                    });
                });
                client.On("user_receive_group_request", async response =>
                {
                    var rawResult = response.GetValue<string>();
                    string[] result = rawResult.Split(new char[] { '|' });
                    string groupId = result[0];
                    string userId = result[1];
                    bool isRequestForMe = userId == currentUserId;
                    if (isRequestForMe)
                    {
                        Application.Current.Dispatcher.Invoke(() => GetGroupRequests());
                    }
                });
                client.On("user_receive_comment", async response =>
                {
                    var rawResult = response.GetValue<string>();
                    string[] result = rawResult.Split(new char[] { '|' });
                    string userId = result[0];
                    // string profileId = result[0];
                    string profileId = result[1];
                    bool isRequestForMe = profileId == cachedUserProfileId && userId != currentUserId;
                    Debugger.Log(0, "debug", Environment.NewLine + "profileId: " + profileId + ", userId: " + userId + ", cachedUserProfileId: " + cachedUserProfileId + Environment.NewLine);
                    if (isRequestForMe)
                    {
                        Application.Current.Dispatcher.Invoke(() => GetComments(profileId));
                    }
                });
                await client.ConnectAsync();
            }
            catch (System.Net.WebSockets.WebSocketException)
            {
                Debugger.Log(0, "debug", "Ошибка сокетов");
                await client.ConnectAsync();
            }
        }

        public void OnAnimationCompleted(object sender, EventArgs e)
        {
            Storyboard storyboard = ((Storyboard)(sender));
        }

        private void ClientClosedHandler(object sender, EventArgs e)
        {
            ClientClosed();
        }

        public void ClientClosed ()
        {
            if (isAppInit)
            {
                DecreaseUserToStats();
                UpdateUserStatus("offline");
                client.EmitAsync("user_is_toggle_status", "offline");
            }
        }

        public void DecreaseUserToStats()
        {
            try {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/stats/decrease");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        RegisterResponseInfo myobj = (RegisterResponseInfo)js.Deserialize(objText, typeof(RegisterResponseInfo));

                        string status = myobj.status;
                        bool isErrorStatus = status == "Error";
                        if (isErrorStatus)
                        {
                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenSystemInfoDialogHandler(object sender, RoutedEventArgs e)
        {
            OpenSystemInfoDialog();
        }

        public void OpenSystemInfoDialog()
        {
            Dialogs.SystemInfoDialog dialog = new Dialogs.SystemInfoDialog();
            dialog.Show();
        }

        private void ToggleWindowHandler (object sender, SelectionChangedEventArgs e)
        {
            ToggleWindow();
        }

        public void ToggleWindow ()
        {
            if (isAppInit)
            {
                int selectedWindowIndex = mainControl.SelectedIndex;

                bool isProfileWindow = selectedWindowIndex == 1;
                if (isProfileWindow)
                {
                    object mainControlData = mainControl.DataContext;
                    string userId = ((string)(mainControlData));
                    bool isLocalUser = userId == currentUserId;
                    // GetUserInfo(userId, isLocalUser);
                }
            }
        }

        private void BackForHistoryHandler(object sender, MouseButtonEventArgs e)
        {
            BackForHistory();
        }

        public void AddIllustrationHandler (object sender, RoutedEventArgs e)
        {
            AddIllustration();
        }

        public void AddIllustration()
        {
            if (illustrationGameSelector.Items.Count >= 1)
            {
                try
                {
                    string illustrationNameBoxContent = illustrationNameBox.Text;
                    string illustrationDescBoxContent = illustrationDescBox.Text;
                    object rawIsChecked = drmBox.IsChecked;
                    bool isChecked = ((bool)(rawIsChecked));
                    bool isDrm = false;
                    string rawIsDrm = "false";
                    if (isChecked)
                    {
                        isDrm = true;
                        rawIsDrm = "true";
                    }

                    int illustrationGameSelectorSelectedIndex = illustrationGameSelector.SelectedIndex;
                    ItemCollection illustrationGameSelectorItems = illustrationGameSelector.Items;
                    object rawIllustrationGameSelectorSelectedItem = illustrationGameSelectorItems[illustrationGameSelectorSelectedIndex];
                    ComboBoxItem illustrationGameSelectorSelectedItem = ((ComboBoxItem)(rawIllustrationGameSelectorSelectedItem));
                    object illustrationGameSelectorSelectedItemData = illustrationGameSelectorSelectedItem.DataContext;
                    string gameId = ((string)(illustrationGameSelectorSelectedItemData));

                    string visibility = "Для друзей";
                    object rawIllustrationVisbilityRadioBtnIsChecked = illustrationVisbilityForFriendsRadioBtn.IsChecked;
                    bool illustrationVisbilityRadioBtnIsChecked = ((bool)(rawIllustrationVisbilityRadioBtnIsChecked));
                    if (illustrationVisbilityRadioBtnIsChecked)
                    {
                        visibility = "Для друзей";
                    }
                    rawIllustrationVisbilityRadioBtnIsChecked = illustrationVisbilityForMeRadioBtn.IsChecked;
                    illustrationVisbilityRadioBtnIsChecked = ((bool)(rawIllustrationVisbilityRadioBtnIsChecked));
                    if (illustrationVisbilityRadioBtnIsChecked)
                    {
                        visibility = "Для себя";
                    }
                    rawIllustrationVisbilityRadioBtnIsChecked = illustrationVisbilityForNoOneRadioBtn.IsChecked;
                    illustrationVisbilityRadioBtnIsChecked = ((bool)(rawIllustrationVisbilityRadioBtnIsChecked));
                    if (illustrationVisbilityRadioBtnIsChecked)
                    {
                        visibility = "не показывать";
                    }

                    string url = "http://localhost:4000/api/illustrations/add/?id=" + currentUserId + @"&title=" + illustrationNameBoxContent + @"&desc=" + illustrationDescBoxContent + @"&drm=" + rawIsDrm + @"&ext=" + manualAttachmentExt + @"&game=" + gameId + @"&visibility=" + visibility;
                    HttpClient httpClient = new HttpClient();
                    httpClient.DefaultRequestHeaders.Add("User-Agent", "C# App");
                    MultipartFormDataContent form = new MultipartFormDataContent();
                    byte[] imagebytearraystring = manualAttachment;
                    form.Add(new ByteArrayContent(imagebytearraystring, 0, imagebytearraystring.Count()), "profile_pic", "mock.png");
                    HttpResponseMessage response = httpClient.PostAsync(url, form).Result;
                    httpClient.Dispose();

                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/points/increase/?id=" + currentUserId);
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                mainControl.SelectedIndex = 20;
                                GetCommunityInfo();
                                illustrationNameBox.Text = "";
                                illustrationDescBox.Text = "";
                                illustrationPhotoBtn.Content = "Выберите файл";
                            }
                        }
                    }

                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
        }

        public void BackForHistory()
        {
            int countHistoryRecords = history.Count;
            bool isBackForHistoryRecords = countHistoryRecords >= 2;
            if (isBackForHistoryRecords)
            {
                bool isCanMoveCursor = historyCursor >= 1;
                if (isCanMoveCursor)
                {
                    historyCursor--;
                    int windowIndex = history[historyCursor];
                    mainControl.SelectedIndex = windowIndex;
                    bool isFirstRecord = historyCursor <= 0;
                    arrowForwardBtn.Foreground = enabledColor;
                    if (isFirstRecord)
                    {
                        arrowBackBtn.Foreground = disabledColor;
                    }
                }
            }
            Debugger.Log(0, "debug", Environment.NewLine + "historyCursor: " + historyCursor.ToString() + ", historyCount: " + history.Count().ToString() + Environment.NewLine);
        }

        private void ForwardForHistoryHandler(object sender, MouseButtonEventArgs e)
        {
            ForwardForHistory();
        }

        public void ForwardForHistory()
        {
            int countHistoryRecords = history.Count;
            bool isCanMoveCursor = historyCursor < countHistoryRecords - 1;
            if (isCanMoveCursor)
            {
                historyCursor++;
                int windowIndex = history[historyCursor];
                mainControl.SelectedIndex = windowIndex;
                bool isLastRecord = historyCursor == countHistoryRecords - 1;
                arrowBackBtn.Foreground = enabledColor;
                if (isLastRecord)
                {
                    arrowForwardBtn.Foreground = disabledColor;
                }
            }
            Debugger.Log(0, "debug", Environment.NewLine + "historyCursor: " + historyCursor.ToString() + ", historyCount: " + history.Count().ToString() + Environment.NewLine);
        }

        private void LoginToAnotherAccountHandler(object sender, RoutedEventArgs e)
        {
            LoginToAnotherAccount();
        }

        public void LoginToAnotherAccount()
        {
            Dialogs.AcceptExitDialog dialog = new Dialogs.AcceptExitDialog();
            dialog.Closed += AcceptExitDialogHandler;
            dialog.Show();
        }

        public void AcceptExitDialogHandler(object sender, EventArgs e)
        {
            Dialogs.AcceptExitDialog dialog = ((Dialogs.AcceptExitDialog)(sender));
            object data = dialog.DataContext;
            string dialogData = ((string)(data));
            AcceptExitDialog(dialogData);
        }


        public void AcceptExitDialog(string dialogData)
        {
            bool isAccept = dialogData == "OK";
            if (isAccept)
            {
                Logout();
            }
        }

        public void Logout ()
        {

            // System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();

            Application app = Application.Current;
            WindowCollection windows = app.Windows;
            IEnumerable<Window> myWindows = windows.OfType<Window>();

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            Recommendations currentRecommendations = loadedContent.recommendations;
            List<string> currentSections = loadedContent.sections;
            string savedContent = "";
            
            bool isRestoreChats = currentSettings.isRestoreChats;
            if (isRestoreChats)
            {
                List<Window> chatWindows = myWindows.Where(window =>
                {
                    string windowTitle = window.Title;
                    bool isChatWindow = windowTitle == "Чат";
                    return isChatWindow;
                }).ToList<Window>();
                int countChatWindows = chatWindows.Count;
                bool isOpenedChatWindows = countChatWindows >= 1;
                if (isOpenedChatWindows)
                {
                    ChatDialog chatDialog = ((ChatDialog)(chatWindows[0]));
                    List<string> chats = chatDialog.chats;
                    List<string> updatedRecentChats = loadedContent.recentChats;
                    string currentLogoutDate = loadedContent.logoutDate;
                    updatedRecentChats = chats;
                    savedContent = js.Serialize(new SavedContent
                    {
                        games = currentGames,
                        friends = currentFriends,
                        settings = currentSettings,
                        collections = currentCollections,
                        notifications = currentNotifications,
                        categories = currentCategories,
                        recentChats = updatedRecentChats,
                        logoutDate = currentLogoutDate,
                        sections = currentSections
                    });
                    File.WriteAllText(saveDataFilePath, savedContent);
                }
            }

            List<string> currentRecentChats = loadedContent.recentChats;
            string updatedLogoutDate = loadedContent.logoutDate;
            System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();
            updatedLogoutDate = DateTime.Now.ToString("F");
            savedContent = js.Serialize(new SavedContent
            {
                games = currentGames,
                friends = currentFriends,
                settings = currentSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = updatedLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);

            List<Window> notLoginWindows = myWindows.Where(window =>
            {
                string windowTitle = window.Title;
                bool isLoginWindow = windowTitle == "Войти";
                bool isNotLoginWindow = !isLoginWindow;
                return isNotLoginWindow;
            }).ToList<Window>();
            int notLoginWindowsCount = notLoginWindows.Count;

            Dialogs.LoginDialog dialog = new Dialogs.LoginDialog();
            dialog.Show();
            this.Close();

            for (int i = 0; i < notLoginWindowsCount; i++)
            {
                Window notLoginWindow = notLoginWindows[i];
                notLoginWindow.Close();
            }

        }

        private void OpenPlayerHandler(object sender, RoutedEventArgs e)
        {
            OpenPlayer();
        }

        public void OpenPlayer()
        {
            Dialogs.PlayerDialog dialog = new Dialogs.PlayerDialog(currentUserId);
            dialog.Show();
        }

        public void OpenTalkFromPopupHandler (object sender, RoutedEventArgs e)
        {
            Popup popup = ((Popup)(sender));
            object popupData = popup.DataContext;
            // string talkId = ((string)(popupData));
            Dictionary<String, Object> talkData = ((Dictionary<String, Object>)(popupData));
            string talkId = ((string)(talkData["talk"]));
            string channelId = ((string)(talkData["channel"]));
            OpenTalkFromPopup(talkId, popup, channelId);
        }

        public void OpenTalkFromPopup (string id, Popup popup, string channel)
        {

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            bool isOpenNewChatInNewWindow = currentSettings.isOpenNewChatInNewWindow;

            Application app = Application.Current;
            WindowCollection windows = app.Windows;
            IEnumerable<Window> myWindows = windows.OfType<Window>();
            List<Window> talkWindows = myWindows.Where<Window>(window =>
            {
                string windowTitle = window.Title;
                bool isTalkWindow = windowTitle == "Беседа";
                object windowData = window.DataContext;
                bool isWindowDataExists = windowData != null;
                bool isTalkExists = true;
                if (isWindowDataExists && isTalkWindow)
                {
                    // string localFriend = ((string)(windowData));
                    TalkDialog talkDialog = window as TalkDialog;
                    isTalkExists = talkDialog.chats.Contains(id);
                }
                return isWindowDataExists && isTalkWindow && isTalkExists;
            }).ToList<Window>();
            int countTalkWindows = talkWindows.Count;
            bool isNotOpenedTalkWindows = countTalkWindows <= 0;

            chats.Add(id);

            if (isNotOpenedTalkWindows)
            {
                talkWindows = myWindows.Where<Window>(window =>
                {
                    string windowTitle = window.Title;
                    bool isTalkWindow = windowTitle == "Беседа";
                    return isTalkWindow;
                }).ToList<Window>();
                countTalkWindows = talkWindows.Count;
                isNotOpenedTalkWindows = countTalkWindows <= 0;
                if (isNotOpenedTalkWindows)
                {
                    Dialogs.TalkDialog dialog = new Dialogs.TalkDialog(currentUserId, id, client, false);
                    // dialog.DataContext = id;
                    Dictionary<String, Object>  dialogData = new Dictionary<String, Object>();
                    dialogData.Add("talk", id);
                    dialogData.Add("channel", channel);
                    dialog.DataContext = dialogData;
                    dialog.Closed += DebugHandler;
                    
                    dialog.Loaded += ActivateTextChannelHandler;
                    
                    dialog.Show();
                    popup.IsOpen = false;
                }
                else
                {
                    if (isOpenNewChatInNewWindow)
                    {
                        Dialogs.TalkDialog dialog = new Dialogs.TalkDialog(currentUserId, id, client, false);
                        // dialog.DataContext = id;
                        Dictionary<String, Object> dialogData = new Dictionary<String, Object>();
                        dialogData.Add("talk", id);
                        dialogData.Add("channel", channel);
                        dialog.DataContext = dialogData;
                        dialog.Closed += DebugHandler;
                        dialog.Show();
                        popup.IsOpen = false;
                    }
                    else
                    {
                        Dialogs.TalkDialog dialog = ((Dialogs.TalkDialog)(talkWindows[0]));
                        dialog.Focus();
                        dialog.AddChat(id);
                        dialog.SelectChat(id);
                    }
                }
            }
            else
            {
                if (isOpenNewChatInNewWindow)
                {
                    Dialogs.TalkDialog dialog = new Dialogs.TalkDialog(currentUserId, id, client, false);
                    // dialog.DataContext = id;
                    Dictionary<String, Object> dialogData = new Dictionary<String, Object>();
                    dialogData.Add("talk", id);
                    dialogData.Add("channel", channel);
                    dialog.DataContext = dialogData;
                    dialog.Show();
                }
                else
                {
                    Dialogs.TalkDialog talkWindow = ((TalkDialog)(talkWindows[0]));
                    talkWindow.Focus();
                    talkWindow.SelectChat(id);
                }
            }

            /*Application app = Application.Current;
            WindowCollection windows = app.Windows;
            IEnumerable<Window> myWindows = windows.OfType<Window>();
            List<Window> chatWindows = myWindows.Where<Window>(window =>
            {
                string windowTitle = window.Title;
                bool isChatWindow = windowTitle == "Беседа";
                object windowData = window.DataContext;
                bool isWindowDataExists = windowData != null;
                bool isChatExists = true;
                if (isWindowDataExists && isChatWindow)
                {
                    string localFriend = ((string)(windowData));
                    isChatExists = id == localFriend;
                }
                return isWindowDataExists && isChatWindow && isChatExists;
            }).ToList<Window>();
            int countChatWindows = chatWindows.Count;
            bool isNotOpenedChatWindows = countChatWindows <= 0;
            if (isNotOpenedChatWindows)
            {
                Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, this);
                dialog.Show();
                popup.IsOpen = false;
            }*/
        }

        public void ActivateTextChannelHandler (object sender, RoutedEventArgs e)
        {
            Dialogs.TalkDialog dialog = ((TalkDialog)(sender));
            object rawTalkData = dialog.DataContext;
            // string talkId = ((string)(talkData));
            Dictionary<String, Object> talkData = ((Dictionary<String, Object>)(rawTalkData));
            string talkId = ((string)(talkData["talk"]));
            string receivedChannelId = ((string)(talkData["channel"]));
            /*UIElement rawTextChannels = dialog.textChannels;
            StackPanel textChannels = ((StackPanel)(rawTextChannels));
            foreach (StackPanel textChannel in textChannels.Children)
            {
                object textChannelData = textChannel.DataContext;
                string textChannelId = ((string)(textChannelData));
                // receivedChannelId это id текстового каннала который пришел с сокета
                bool isFound = textChannelId == receivedChannelId;
                if (isFound)
                {
                    int index = textChannels.Children.IndexOf(textChannel);
                    dialog.SelectTextChannel(index);
                    break;
                }
            }*/
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/talks/channels/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        TalkChannelsResponseInfo myobj = (TalkChannelsResponseInfo)js.Deserialize(objText, typeof(TalkChannelsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<TalkChannel> totalChannels = myobj.channels;
                            int channelIndex = -1;
                            foreach (TalkChannel channel in totalChannels)
                            {
                                string channelTalkId = channel.talk;
                                string channelId = channel._id;
                                string channelTitle = channel.title;
                                bool isCurrentTalkChannel = channelTalkId == talkId;
                                if (isCurrentTalkChannel)
                                {
                                    channelIndex++;
                                    bool isChannelFound = channelId == receivedChannelId;
                                    if (isChannelFound)
                                    {
                                        dialog.SelectTextChannel(channelIndex);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenChatFromPopupHandler (object sender, RoutedEventArgs e)
        {
            Popup popup = ((Popup)(sender));
            object popupData = popup.DataContext;
            string friendId = ((string)(popupData));
            OpenChatFromPopup(friendId, popup);
        }

        public void OpenChatFromPopup(string id, Popup popup)
        {

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            bool isOpenNewChatInNewWindow = currentSettings.isOpenNewChatInNewWindow;

            Application app = Application.Current;
            WindowCollection windows = app.Windows;
            IEnumerable<Window> myWindows = windows.OfType<Window>();
            List<Window> chatWindows = myWindows.Where<Window>(window =>
            {
                string windowTitle = window.Title;
                bool isChatWindow = windowTitle == "Чат";
                object windowData = window.DataContext;
                bool isWindowDataExists = windowData != null;
                bool isChatExists = true;
                if (isWindowDataExists && isChatWindow)
                {
                    string localFriend = ((string)(windowData));
                    // isChatExists = id == localFriend;
                    // isChatExists = chats.Contains(id);
                    ChatDialog chatDialog = window as ChatDialog;
                    isChatExists = chatDialog.chats.Contains(id);
                }
                return isWindowDataExists && isChatWindow && isChatExists;
            }).ToList<Window>();
            int countChatWindows = chatWindows.Count;
            bool isNotOpenedChatWindows = countChatWindows <= 0;
            
            chats.Add(id);

            if (isNotOpenedChatWindows)
            {
                chatWindows = myWindows.Where<Window>(window =>
                {
                    string windowTitle = window.Title;
                    bool isChatWindow = windowTitle == "Чат";
                    return isChatWindow;
                }).ToList<Window>();
                countChatWindows = chatWindows.Count;
                isNotOpenedChatWindows = countChatWindows <= 0;
                if (isNotOpenedChatWindows)
                {
                    // Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, chats, this);
                    Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, this);
                    dialog.DataContext = id;
                    dialog.Closed += DebugHandler;
                    dialog.Show();
                    popup.IsOpen = false;
                }
                else
                {
                    if (isOpenNewChatInNewWindow)
                    {
                        // Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, chats, this);
                        Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, this);
                        dialog.DataContext = id;
                        dialog.Closed += DebugHandler;
                        dialog.Show();
                        popup.IsOpen = false;
                    }
                    else
                    {
                        Dialogs.ChatDialog dialog = ((Dialogs.ChatDialog)(chatWindows[0]));
                        dialog.Focus();
                        dialog.AddChat(id);
                        dialog.SelectChat(id);
                    }
                }
            }
            else
            {
                if (isOpenNewChatInNewWindow)
                {
                    // Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, chats, this);
                    Dialogs.ChatDialog dialog = new Dialogs.ChatDialog(currentUserId, client, id, false, this);
                    dialog.DataContext = id;
                    dialog.Show();
                }
                else
                {
                    Dialogs.ChatDialog chatWindow = ((ChatDialog)(chatWindows[0]));
                    chatWindow.Focus();
                    chatWindow.SelectChat(id);
                }
            }
        }

        public void DebugHandler(object sender, EventArgs e)
        {
            Debugger.Log(0, "debug", Environment.NewLine + "chats: " + this.chats.Count.ToString() + Environment.NewLine);
        }

        private void ToggleFullScreenModeHandler(object sender, MouseButtonEventArgs e)
        {
            ToggleFullScreenMode();
        }

        public void ToggleFullScreenMode()
        {
            isFullScreenMode = !isFullScreenMode;
            if (isFullScreenMode)
            {
                this.WindowStyle = WindowStyle.None;
            }
            else
            {
                this.WindowStyle = WindowStyle.SingleBorderWindow;
            }
        }

        public void JoinToGameFromPopupHandler(object sender, RoutedEventArgs e)
        {
            Popup popup = ((Popup)(sender));
            object popupData = popup.DataContext;
            string gameName = ((string)(popupData));
            JoinToGameFromPopup(gameName, popup);
        }

        public void JoinToGameFromPopup(string gameName, Popup popup)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> myGames = loadedContent.games;
            List<string> myGamesNames = new List<string>();
            foreach (Game myGame in myGames)
            {
                string myGameName = myGame.name;
                myGamesNames.Add(myGameName);
            }
            bool isSameGameForMe = myGamesNames.Contains(gameName);
            if (isSameGameForMe)
            {
                RunGame(gameName);
                popup.IsOpen = false;
            }
        }

        private void SetNameOrAvatarHandler(object sender, RoutedEventArgs e)
        {
            SetNameOrAvatar();
        }

        public void SetNameOrAvatar()
        {
            mainControl.SelectedIndex = 2;
            AddHistoryRecord();
        }

        private void UpdateUserStatusHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object data = menuItem.DataContext;
            string status = ((string)(data));
            UpdateUserStatus(status);
        }

        public void UpdateUserStatus (string status)
        {
            bool isOnlineStatus = status == "online";
            bool isOfflineStatus = status == "offline";
            if (isOnlineStatus)
            {
                offlineUserStatusMenuItem.IsChecked = false;
            }
            else if (isOfflineStatus)
            {
                onlineUserStatusMenuItem.IsChecked = false;
            }
            else
            {
                onlineUserStatusMenuItem.IsChecked = false;
                offlineUserStatusMenuItem.IsChecked = false;
            }
            SetUserStatus(status);
        }

        public void ToggleScreenShotsSortHandler (object sender, SelectionChangedEventArgs e)
        {
            if (isAppInit)
            {
                ToggleScreenShotsSort();
            }
        }

        public void ToggleScreenShotsSort ()
        {
            GetScreenShots("", false);
        }

        public void GetScreenShots (string filter, bool isInit)
        {
            List<Canvas> unSortedScreenShots = new List<Canvas>();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string appPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\screenshots\";
            string[] games = Directory.GetDirectories(appPath);
            screenShots.Children.Clear();
            foreach (string game in games)
            {
                DirectoryInfo gameInfo = new DirectoryInfo(game);
                string gameName = gameInfo.Name;
                if (isInit)
                {
                    ComboBoxItem screenShotsFilterItem = new ComboBoxItem();
                    screenShotsFilterItem.Content = gameName;

                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    innerWebRequest.Method = "GET";
                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();

                            GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));

                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> totalGames = myobj.games;
                                List<GameResponseInfo> gameResults = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                                {
                                    string localGameName = totalGamesItem.name;
                                    bool isNamesMatches = localGameName == gameName;
                                    return isNamesMatches;
                                }).ToList<GameResponseInfo>();
                                int countResults = gameResults.Count;
                                bool isResultsFound = countResults >= 1;
                                if (isResultsFound)
                                {
                                    GameResponseInfo foundedGame = gameResults[0];
                                    string gameId = foundedGame._id;
                                    screenShotsFilterItem.DataContext = gameId;
                                }

                                screenShotsFilter.Items.Add(screenShotsFilterItem);
                            }
                        }
                    }
                }
                string[] files = Directory.GetFileSystemEntries(game);
                foreach (string file in files)
                {
                    string ext = System.IO.Path.GetExtension(file);
                    bool isScreenShot = ext == ".jpg";
                    if (isScreenShot)
                    {
                        // Stream myStream = File.Open(file, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);
                        Canvas screenShot = new Canvas();
                        screenShot.Margin = new Thickness(15);
                        screenShot.Width = 250;
                        screenShot.Height = 250;
                        screenShot.BeginInit();
                        Uri screenShotUri = new Uri(file);
                        VisualBrush screenShotBrush = new VisualBrush();
                        Image screenShotBrushVisual = new Image();
                        screenShotBrushVisual.Margin = new Thickness(15);
                        screenShotBrushVisual.Width = 250;
                        screenShotBrushVisual.Height = 250;
                        screenShotBrushVisual.BeginInit();
                        screenShotBrushVisual.Source = new BitmapImage(screenShotUri);
                        screenShotBrushVisual.EndInit();
                        screenShotBrush.Visual = screenShotBrushVisual;
                        screenShot.Background = screenShotBrush;
                        CheckBox screenShotCheckBox = new CheckBox();
                        screenShotCheckBox.Visibility = invisible;
                        screenShot.Children.Add(screenShotCheckBox);
                        Canvas.SetTop(screenShotCheckBox, 25);
                        Canvas.SetLeft(screenShotCheckBox, 25);
                        string insensitiveCaseFilter = filter.ToLower();
                        string insensitiveCaseGameName = gameName.ToLower();
                        int filterLength = filter.Length;
                        bool isNotFilter = filterLength <= 0;
                        bool isWordsMatches = insensitiveCaseGameName.Contains(insensitiveCaseFilter);
                        bool isFilterMatches = isWordsMatches || isNotFilter;
                        if (isFilterMatches)
                        {
                            Dictionary<String, Object> screenShotData = new Dictionary<String, Object>();
                            FileInfo info = new FileInfo(file);
                            DateTime date = info.CreationTime;
                            screenShotData.Add("date", date);

                            screenShotData.Add("path", file);
                            // screenShotData.Add("id", id);

                            screenShot.DataContext = screenShotData;
                            unSortedScreenShots.Add(screenShot);
                        }
                    }
                }
            }
            List<Canvas> sortedScreenShots = new List<Canvas>();
            sortedScreenShots = unSortedScreenShots;
            int sortIndex = screenShotsSortBox.SelectedIndex;
            bool isAsc = sortIndex == 1;
            bool isDesc = sortIndex == 2;
            if (isAsc)
            {
                sortedScreenShots = unSortedScreenShots.OrderBy(screenShot =>
                {
                    object data = screenShot.DataContext;
                    Dictionary<String, Object> screenShotData = ((Dictionary<String, Object>)(data));
                    object rawDate = screenShotData["date"];
                    DateTime date = ((DateTime)(rawDate));
                    return date;
                }).ToList<Canvas>();
            }
            else if (isDesc)
            {
                sortedScreenShots = unSortedScreenShots.OrderByDescending(screenShot =>
                {
                    object data = screenShot.DataContext;
                    Dictionary<String, Object> screenShotData = ((Dictionary<String, Object>)(data));
                    object rawDate = screenShotData["date"];
                    DateTime date = ((DateTime)(rawDate));
                    return date;
                }).ToList<Canvas>();
            }
            UIElementCollection screenShotsContainerChildren = screenShotsContainer.Children;
            
            // UIElement container = screenShotsContainerChildren[2];
            // UIElement rawScreenShotsControl = screenShotsContainerChildren[2];
            UIElement rawScreenShotsControl = screenShotsContainerChildren[0];
            TabControl screenShotsControl = ((TabControl)(rawScreenShotsControl));
            // int screenShotsControlSelectedIndex = screenShotsControl.SelectedIndex;
            int screenShotsControlSelectedIndex = 0;
            ItemCollection screenShotsControlItems = screenShotsControl.Items;
            object rawScreenShotsControlSelectedItem = screenShotsControlItems[screenShotsControlSelectedIndex];
            TabItem screenShotsControlSelectedItem = ((TabItem)(rawScreenShotsControlSelectedItem));
            object rawScreenShotsControlSelectedItemContent = screenShotsControlSelectedItem.Content;
            // UIElement container = ((UIElement)(rawScreenShotsControlSelectedItemContent));
            StackPanel screenShotsControlSelectedItemContent = ((StackPanel)(rawScreenShotsControlSelectedItemContent));
            UIElementCollection screenShotsControlSelectedItemContentChildren = screenShotsControlSelectedItemContent.Children;
            UIElement container = screenShotsControlSelectedItemContentChildren[2];

            bool isWall = container is StackPanel;
            
            if (isWall)
            {
                StackPanel wallContainer = ((StackPanel)(container));
                wallContainer.Children.Clear();
            }
            else
            {
                WrapPanel gridContainer = ((WrapPanel)(container));
                gridContainer.Children.Clear();
            }

            foreach (UIElement screenShot in sortedScreenShots)
            {
                if (isWall)
                {
                    StackPanel wallContainer = ((StackPanel)(container));
                    wallContainer.Children.Add(screenShot);
                }
                else
                {
                    WrapPanel gridContainer = ((WrapPanel)(container));
                    gridContainer.Children.Add(screenShot);
                }
            }
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            userNameContentLabel.Text = userName;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void SelectScreenShotsFilterHandler(object sender, SelectionChangedEventArgs e)
        {
            int selectedIndex = screenShotsFilter.SelectedIndex;
            SelectScreenShotsFilter(selectedIndex);
        }

        public void SelectScreenShotsFilter(int selectedIndex)
        {
            if (isAppInit)
            {
                bool isSecondItem = selectedIndex == 1;
                if (isSecondItem)
                {
                    screenShotsFilter.SelectedIndex = 0;
                    GetScreenShots("", false);
                }
                else
                {
                    object rawSelectedItem = screenShotsFilter.Items[selectedIndex];
                    ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
                    object rawFilter = selectedItem.Content;
                    string filter = rawFilter.ToString();
                    GetScreenShots(filter, false);
                }
                GetFavoriteScreenShotsContent();
                GetIllustrationsContent();
                GetFavoriteIllustrationsContent();
                GetManualsContent();
                GetFavoriteManualsContent();
            }
        }

        private void SetEditProfileTabHandler (object sender, MouseButtonEventArgs e)
        {
            StackPanel tab = ((StackPanel)(sender));
            object tabData = tab.DataContext;
            string tabIndex = tabData.ToString();
            int parsedTabIndex = Int32.Parse(tabIndex);
            SetEditProfileTab(parsedTabIndex);
        }

        public void SetEditProfileTab (int index)
        {
            editProfileTabControl.SelectedIndex = index;
        }

        private void UploadAvatarHandler(object sender, RoutedEventArgs e)
        {
            UploadAvatar();
        }

        public void UploadAvatar()
        {
            Microsoft.Win32.OpenFileDialog ofd = new Microsoft.Win32.OpenFileDialog();
            ofd.Title = "Выберите аватар";
            ofd.Filter = "Png documents (.png)|*.png";
            bool? res = ofd.ShowDialog();
            bool isOpened = res != false;
            if (isOpened)
            {
                string filePath = ofd.FileName;
                editProfileAvatarImg.BeginInit();
                editProfileAvatarImg.Source = new BitmapImage(new Uri(filePath));
                editProfileAvatarImg.EndInit();
            }
        }

        private static byte[] GetMultipartFormData(Dictionary<string, object> postParameters, string boundary)
        {
            Stream formDataStream = new System.IO.MemoryStream();
            bool needsCLRF = false;
            Encoding encoding = Encoding.UTF8;

            foreach (var param in postParameters)
            {

                if (needsCLRF)
                {
                    formDataStream.Write(encoding.GetBytes("\r\n"), 0, encoding.GetByteCount("\r\n"));
                }
                needsCLRF = true;

                if (param.Value is FileParameter) // to check if parameter if of file type
                {
                    FileParameter fileToUpload = (FileParameter)param.Value;

                    // Add just the first part of this param, since we will write the file data directly to the Stream
                    string header = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\"\r\nContent-Type: {3}\r\n\r\n",
                        boundary,
                        param.Key,
                        fileToUpload.FileName ?? param.Key,
                        fileToUpload.ContentType ?? "application/octet-stream");

                    formDataStream.Write(encoding.GetBytes(header), 0, encoding.GetByteCount(header));
                    // Write the file data directly to the Stream, rather than serializing it to a string.
                    formDataStream.Write(fileToUpload.File, 0, fileToUpload.File.Length);
                }
                else
                {
                    string postData = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}",
                        boundary,
                        param.Key,
                        param.Value);
                    formDataStream.Write(encoding.GetBytes(postData), 0, encoding.GetByteCount(postData));
                }
            }

            // Add the end of the request.  Start with a newline
            string footer = "\r\n--" + boundary + "--\r\n";
            formDataStream.Write(encoding.GetBytes(footer), 0, encoding.GetByteCount(footer));

            // Dump the Stream into a byte[]
            formDataStream.Position = 0;
            byte[] formData = new byte[formDataStream.Length];
            formDataStream.Read(formData, 0, formData.Length);
            formDataStream.Close();

            return formData;
        }

        private void SetDefautAvatarHandler(object sender, ExceptionRoutedEventArgs e)
        {
            Image avatar = ((Image)(sender));
            SetDefautAvatar(avatar);
        }

        public void SetDefautAvatar(Image avatar)
        {
            avatar.BeginInit();
            avatar.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
            avatar.EndInit();
        }

        public void SetDefaultThumbnailHandler(object sender, ExceptionRoutedEventArgs e)
        {
            Image avatar = ((Image)(sender));
            SetDefaultThumbnail(avatar);
        }

        public void SetDefaultThumbnail(Image avatar)
        {
            avatar.BeginInit();
            avatar.Source = new BitmapImage(new Uri(@"https://cdn3.iconfinder.com/data/icons/solid-locations-icon-set/64/Games_2-256.png"));
            avatar.EndInit();
        }

        private byte[] ImageFileToByteArray(string fullFilePath)
        {
            FileStream fs = File.OpenRead(fullFilePath);
            byte[] bytes = new byte[fs.Length];
            fs.Read(bytes, 0, Convert.ToInt32(fs.Length));
            fs.Close();
            return bytes;
        }

        private void GenerateDatas()
        {
            this.Collection = new ObservableCollection<Model>();
            this.Collection.Add(new Model(10, 1, 5, 4));
            this.Collection.Add(new Model(10, 1, 5, 4));
            this.Collection.Add(new Model(10, 1, 5, 4));
            this.Collection.Add(new Model(10, 1, 5, 4));
        }

        private void AddDiscussionHandler(object sender, RoutedEventArgs e)
        {
            object btnData = addDiscussionBtn.DataContext;
            string forumId = ((string)(btnData));
            AddDiscussion(forumId);
        }

        public void AddDiscussion(string forumId)
        {
            try
            {
                string title = discussionTitleBox.Text;
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forums/topics/create/?forum=" + forumId + "&title=" + title + "&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumResponseInfo myobj = (ForumResponseInfo)js.Deserialize(objText, typeof(ForumResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            addDiscussionDialog.Visibility = invisible;
                            discussionTitleBox.Text = "";
                            discussionQuestionBox.Text = "";
                            SelectForum(forumId);

                            string eventData = forumId + "|" + "mockTopicId" + "|" + currentUserId;
                            client.EmitAsync("user_send_msg_to_forum", eventData);

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenAddDiscussionDialogHandler(object sender, RoutedEventArgs e)
        {
            OpenAddDiscussionDialog();
        }

        public void OpenAddDiscussionDialog()
        {
            mainControl.SelectedIndex = 7;
            addDiscussionDialog.Visibility = visible;

            addDiscussionUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));

        }

        private void SendMsgToTopicHandler(object sender, RoutedEventArgs e)
        {
            object topicData = addDiscussionMsgBtn.DataContext;
            string topicId = ((string)(topicData));
            SendMsgToTopic(topicId);
        }

        public void SendMsgToTopic(string topicId)
        {
            string newMsgContent = forumTopicMsgBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/forums/topics/msgs/create/?user=" + currentUserId + "&topic=" + topicId + "&content=" + newMsgContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumResponseInfo myobj = (ForumResponseInfo)js.Deserialize(objText, typeof(ForumResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            forumTopicMsgBox.Text = "";
                            SelectTopic(topicId);

                            /*
                                пытался здесь добавить перепрыгивание на последнюю страницу после добавления сообщения, но не работает
                                UIElementCollection forumTopicPagesChildren = forumTopicPages.Children;
                                int countForumTopicPagesChildren = forumTopicPagesChildren.Count;
                                int lastPageLabelIndex = countForumTopicPagesChildren - 1;
                                UIElement lastPage = forumTopicPages.Children[lastPageLabelIndex];
                                TextBlock lastPageLabel = ((TextBlock)(lastPage));
                                SetCountMsgsOnForumTopicPage(topicId, countForumTopicPagesChildren, lastPageLabel);
                            */

                            object btnData = addDiscussionBtn.DataContext;
                            string forumId = ((string)(btnData));
                            string eventData = forumId + "|" + topicId + "|" + currentUserId;
                            client.EmitAsync("user_send_msg_to_forum", eventData);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void FilterForumsHandler(object sender, TextChangedEventArgs e)
        {
            TextBox box = ((TextBox)(sender));
            FilterForums(box);
        }

        public void FilterForums(TextBox box)
        {
            string keywords = box.Text;
            GetForums(keywords);
        }

        private void SetCountMsgsOnForumTopicPageHandler(object sender, MouseButtonEventArgs e)
        {
            TextBlock countLabel = ((TextBlock)(sender));
            object countLabelData = countLabel.DataContext;
            string rawCountLabelData = countLabelData.ToString();
            int countMsgs = Int32.Parse(rawCountLabelData);
            object addDiscussionMsgBtnData = addDiscussionMsgBtn.DataContext;
            string topicId = ((string)(addDiscussionMsgBtnData));

            TextBlock firstPageLabel = ((TextBlock)(forumTopicPages.Children[0]));
            SelectForumTopicPage(1, topicId, firstPageLabel);

            UpdatePaginationPointers(1);
            SetCountMsgsOnForumTopicPage(topicId, countMsgs, countLabel);
        }

        public void SetCountMsgsOnForumTopicPage(string topicId, int countMsgs, TextBlock label)
        {
            forumTopicCountMsgs.DataContext = countMsgs;
            forumTopic15CountMsgs.Foreground = System.Windows.Media.Brushes.White;
            forumTopic30CountMsgs.Foreground = System.Windows.Media.Brushes.White;
            forumTopic50CountMsgs.Foreground = System.Windows.Media.Brushes.White;
            label.Foreground = System.Windows.Media.Brushes.LightGray;
            SelectTopic(topicId);
        }

        public void SelectForumTopicPageHandler(object sender, RoutedEventArgs e)
        {
            TextBlock pageLabel = ((TextBlock)(sender));
            object pageLabelData = pageLabel.DataContext;
            int pageNumber = ((int)(pageLabelData));
            object addDiscussionMsgBtnData = addDiscussionMsgBtn.DataContext;
            string topicId = ((string)(addDiscussionMsgBtnData));

            UpdatePaginationPointers(pageNumber);

            SelectForumTopicPage(pageNumber, topicId, pageLabel);
        }

        public void UpdatePaginationPointers(int pageNumber)
        {
            forumTopicPrevPaginationBtn.Foreground = System.Windows.Media.Brushes.Black;
            forumTopicNextPaginationBtn.Foreground = System.Windows.Media.Brushes.Black;
            bool isFirstPage = pageNumber == 1;
            int countPages = forumTopicPages.Children.Count;
            bool isLastPage = pageNumber == countPages;
            if (isFirstPage)
            {
                forumTopicPrevPaginationBtn.Foreground = System.Windows.Media.Brushes.LightGray;
            }
            if (isLastPage)
            {
                forumTopicNextPaginationBtn.Foreground = System.Windows.Media.Brushes.LightGray;
            }
        }

        public void SelectForumTopicPage(int pageNumber, string topicId, TextBlock pageLabel)
        {
            string rawPageNumber = pageNumber.ToString();
            forumTopicPages.DataContext = rawPageNumber;
            foreach (TextBlock somePageLabel in forumTopicPages.Children)
            {
                somePageLabel.Foreground = System.Windows.Media.Brushes.White;
            }
            pageLabel.Foreground = System.Windows.Media.Brushes.DarkCyan;
            SelectTopic(topicId);
        }

        private void GoToPrevForumTopicPageHandler(object sender, MouseButtonEventArgs e)
        {
            GoToPrevForumTopicPage();
        }

        public void GoToPrevForumTopicPage()
        {
            object topicData = addDiscussionMsgBtn.DataContext;
            string topicId = ((string)(topicData));
            int countPages = forumTopicPages.Children.Count;
            object currentPageNumber = forumTopicPages.DataContext;
            string rawCurrentPageNumber = currentPageNumber.ToString();
            int currentPage = Int32.Parse(rawCurrentPageNumber);
            int currentPageIndex = currentPage - 1;
            bool isCanGo = currentPage > 1;
            if (isCanGo)
            {
                TextBlock pageLabel = ((TextBlock)(forumTopicPages.Children[currentPageIndex - 1]));
                SelectForumTopicPage(currentPageIndex, topicId, pageLabel);
            }
        }

        private void GoToNextForumTopicPageHandler(object sender, MouseButtonEventArgs e)
        {
            GoToNextForumTopicPage();
        }

        public void GoToNextForumTopicPage()
        {
            object topicData = addDiscussionMsgBtn.DataContext;
            string topicId = ((string)(topicData));
            int countPages = forumTopicPages.Children.Count;
            object currentPageNumber = forumTopicPages.DataContext;
            string rawCurrentPageNumber = currentPageNumber.ToString();
            int currentPage = Int32.Parse(rawCurrentPageNumber);
            int currentPageIndex = currentPage - 1;
            bool isCanGo = currentPage < countPages;
            if (isCanGo)
            {
                TextBlock pageLabel = ((TextBlock)(forumTopicPages.Children[currentPageIndex + 1]));
                SelectForumTopicPage(currentPageIndex + 2, topicId, pageLabel);
            }
        }

        private void SelectProfileThemeHandler(object sender, MouseButtonEventArgs e)
        {
            StackPanel theme = ((StackPanel)(sender));
            object themeData = theme.DataContext;
            string themeName = themeData.ToString();
            SelectProfileTheme(themeName, theme);
        }

        public void SelectProfileTheme(string themeName, StackPanel theme)
        {

            foreach (StackPanel profileTheme in profileThemes.Children)
            {
                UIElement rawProfileThemeNameLabel = profileTheme.Children[1];
                TextBlock profileThemeNameLabel = ((TextBlock)(rawProfileThemeNameLabel));
                profileThemeNameLabel.Foreground = System.Windows.Media.Brushes.LightGray;
            }
            UIElement rawThemeNameLabel = theme.Children[1];
            TextBlock themeNameLabel = ((TextBlock)(rawThemeNameLabel));
            themeNameLabel.Foreground = System.Windows.Media.Brushes.Blue;
            editProfileThemeName.DataContext = themeName;

        }

        private void SetAllAccessSettingsHandler(object sender, SelectionChangedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            int index = selector.SelectedIndex;
            SetAllAccessSettings(index);
        }

        private void SetAllAccessSettings(int index)
        {
            if (isAppInit)
            {
                userFriendsSettingsSelector.SelectedIndex = index;
                userGamesSettingsSelector.SelectedIndex = index;
                userEquipmentSettingsSelector.SelectedIndex = index;
                userCommentsSettingsSelector.SelectedIndex = index;
            }
        }

        private void CreateCollectionHandler(object sender, RoutedEventArgs e)
        {
            Dictionary<String, Object> mockData = new Dictionary<String, Object>();
            mockData.Add("name", "");
            mockData.Add("collection", "");
            CreateCollection(mockData);
        }

        private void CreateCollectionFromMenuHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            Dictionary<String, Object> data = ((Dictionary<String, Object>)(menuItemData));
            CreateCollection(data);
        }

        public void CreateCollection(Dictionary<String, Object> data)
        {
            Dialogs.AddCollectiionDialog dialog = new Dialogs.AddCollectiionDialog(currentUserId);
            dialog.DataContext = data;
            dialog.Closed += RefreshGameCollectionsHandler;
            dialog.Show();
        }

        public void RefreshGameCollectionsHandler(object sender, EventArgs e)
        {
            Dialogs.AddCollectiionDialog dialog = ((Dialogs.AddCollectiionDialog)(sender));
            object rawData = dialog.DataContext;
            Dictionary<String, Object> data = ((Dictionary<String, Object>)(rawData));
            string name = ((string)(data["name"]));
            string collection = ((string)(data["collection"]));
            int nameLength = name.Length;
            bool isAddToNewCollection = nameLength >= 1;
            if (isAddToNewCollection)
            {
                AddGameToCollection(data);
                SelectGameCollection(collection);
            }
            RefreshGameCollections();
        }

        public void RefreshGameCollections()
        {
            GetGameCollections();
            GetGamesList("");
        }

        private void ReturnToProfileHandler (object sender, MouseButtonEventArgs e)
        {
            ReturnToProfile();
        }

        public void ReturnToProfile ()
        {
            object mainControlData = mainControl.DataContext;
            string userId = ((string)(mainControlData));

            cachedUserProfileId = userId;

            // string userId = currentUserId;
            bool isLocalUser = userId == currentUserId;
            mainControl.SelectedIndex = 1;
            GetUserInfo(userId, isLocalUser);
            AddHistoryRecord();
        }

        private void ToggleRenameBtnHandler(object sender, MouseButtonEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            ToggleRenameBtn(icon);
        }

        public void ToggleRenameBtn(PackIcon icon)
        {
            bool isEdit = gameCollectionNameLabel.IsEnabled;
            bool toggleMode = !isEdit;
            if (isEdit)
            {
                gameCollectionNameLabel.Background = System.Windows.Media.Brushes.Transparent;
                gameCollectionNameLabel.BorderThickness = new Thickness(0);
                icon.Kind = PackIconKind.Edit;
            }
            else
            {
                gameCollectionNameLabel.Background = System.Windows.Media.Brushes.White;
                gameCollectionNameLabel.BorderThickness = new Thickness(1);
                icon.Kind = PackIconKind.Close;
            }
            gameCollectionNameLabel.IsEnabled = toggleMode;
        }

        private void SaveGameCollectionNameHandler(object sender, KeyboardFocusChangedEventArgs e)
        {

            SaveGameCollectionName();
        }

        public void SaveGameCollectionName()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> updatedCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            string gameCollectionNameLabelContent = gameCollectionNameLabel.Text;
            object rawCurrentGameCollection = gameCollectionNameLabel.DataContext;
            string currentGameCollection = ((string)(rawCurrentGameCollection));
            int collectionIndex = -1;
            foreach (string updatedCollection in updatedCollections)
            {
                collectionIndex++;
                bool isCollectionFound = currentGameCollection == updatedCollection;
                if (isCollectionFound)
                {
                    updatedCollections[collectionIndex] = gameCollectionNameLabelContent;
                    break;
                }
            }
            foreach (Game updatedGame in updatedGames)
            {
                List<string> updatedGameCollections = updatedGame.collections;
                collectionIndex = -1;
                foreach (string updatedGameCollection in updatedGameCollections)
                {
                    collectionIndex++;
                    bool isCollectionFound = currentGameCollection == updatedGameCollection;
                    if (isCollectionFound)
                    {
                        updatedGame.collections[collectionIndex] = gameCollectionNameLabelContent;
                        break;
                    }
                }
            }
            string savedContent = js.Serialize(new SavedContent
            {
                games = updatedGames,
                friends = currentFriends,
                settings = currentSettings,
                collections = updatedCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            GetGamesList("");
            gameCollectionNameLabel.DataContext = gameCollectionNameLabelContent;
            ToggleRenameBtn(renameIcon);
            GetGameCollections();
        }

        public void CreateShortcutHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            string name = ((string)(menuItemData));
            CreateShortcut(name);
        }

        private void CreateShortcut(string name)
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<Game> results = currentGames.Where<Game>((Game game) =>
            {
                string gameName = game.name;
                bool isFound = gameName == name;
                return isFound;
            }).ToList();
            int countResults = results.Count;
            bool isHaveResults = countResults >= 1;
            if (isHaveResults)
            {
                Game result = results[0];
                string gamePath = result.path;
                string link = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + System.IO.Path.DirectorySeparatorChar + name + ".lnk";
                var shell = new IWshRuntimeLibrary.WshShell();
                var shortcut = shell.CreateShortcut(link) as IWshRuntimeLibrary.IWshShortcut;
                shortcut.TargetPath = gamePath;
                shortcut.WorkingDirectory = System.Windows.Forms.Application.StartupPath;
                shortcut.Save();
            }
        }

        private void OpenHiddenGamesHandler(object sender, RoutedEventArgs e)
        {
            OpenHiddenGames();
        }

        public void OpenHiddenGames()
        {
            mainControl.SelectedIndex = 11;
            GetHiddenGames();
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<Game> shadowGames = currentGames.Where<Game>((Game game) =>
            {
                bool isHidden = game.isHidden;
                return isHidden;
            }).ToList<Game>();
            int countHiddenGames = shadowGames.Count;
            string rawCountHiddenGames = countHiddenGames.ToString();
            countHiddenGamesLabel.Text = "(" + rawCountHiddenGames + ")";
        }

        public void RunGameHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            string name = ((string)(menuItemData));
            RunGame(name);
        }

        public void GetHiddenGames()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<string> currentCollections = loadedContent.collections;
            List<Game> shadowGames = currentGames.Where<Game>((Game game) =>
            {
                bool isHidden = game.isHidden;
                return isHidden;
            }).ToList();
            int hiddenGamesCount = shadowGames.Count;
            bool isHaveGames = hiddenGamesCount >= 1;
            hiddenGames.HorizontalAlignment = HorizontalAlignment.Left;
            hiddenGames.Children.Clear();
            if (isHaveGames)
            {
                foreach (Game hiddenGame in shadowGames)
                {
                    string currentGameId = hiddenGame.id;
                    string currentGameName = hiddenGame.name;
                    List<string> currentGameCollections = hiddenGame.collections;
                    string currentGameCover = hiddenGame.cover;

                    Image gameCollectionItem = new Image();
                    gameCollectionItem.Width = 100;
                    gameCollectionItem.Height = 100;
                    gameCollectionItem.Margin = new Thickness(25);
                    gameCollectionItem.BeginInit();
                    bool IsCoverSet = currentGameCover != "";
                    bool isCoverFound = File.Exists(currentGameCover);
                    bool isCoverExists = IsCoverSet && isCoverFound;
                    Uri coverUri = null;
                    if (isCoverExists)
                    {
                        coverUri = new Uri(currentGameCover);
                    }
                    else
                    {
                        coverUri = new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName);
                    }
                    gameCollectionItem.Source = new BitmapImage(coverUri);
                    gameCollectionItem.ImageFailed += SetDefaultThumbnailHandler;
                    gameCollectionItem.EndInit();
                    hiddenGames.Children.Add(gameCollectionItem);
                    gameCollectionItem.DataContext = currentGameName;
                    gameCollectionItem.MouseLeftButtonUp += SelectGameCollectionItemHandler;
                    ContextMenu gameCollectionItemContextMenu = new ContextMenu();

                    MenuItem gameCollectionItemContextMenuItem = new MenuItem();
                    gameCollectionItemContextMenuItem.Header = "Играть";
                    gameCollectionItemContextMenuItem.DataContext = currentGameName;
                    gameCollectionItemContextMenuItem.Click += RunGameHandler;
                    gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                    gameCollectionItemContextMenuItem = new MenuItem();
                    gameCollectionItemContextMenuItem.Header = "Добавить в";
                    MenuItem gameCollectionItemNestedContextMenuItem;
                    Dictionary<String, Object> gameCollectionItemNestedContextMenuItemData;
                    foreach (string currentCollection in currentCollections)
                    {
                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        gameCollectionItemNestedContextMenuItem.Header = currentCollection;
                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                        gameCollectionItemNestedContextMenuItemData.Add("collection", currentCollection);
                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                        gameCollectionItemNestedContextMenuItem.Click += AddGameToCollectionHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                        bool isDisabledCollection = currentGameCollections.Contains(currentCollection);
                        if (isDisabledCollection)
                        {
                            gameCollectionItemNestedContextMenuItem.IsEnabled = false;
                        }
                    }
                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                    gameCollectionItemNestedContextMenuItem.Header = "Создать коллекцию";
                    gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                    gameCollectionItemNestedContextMenuItemData.Add("name", currentGameName);
                    gameCollectionItemNestedContextMenuItemData.Add("collection", "mockCollectionName");
                    gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                    gameCollectionItemNestedContextMenuItem.Click += CreateCollectionFromMenuHandler;
                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                    gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                    gameCollectionItemContextMenuItem = new MenuItem();
                    string gameCollectionItemContextMenuItemHeaderContent = "Убрать из ";
                    gameCollectionItemContextMenuItem.Header = gameCollectionItemContextMenuItemHeaderContent;

                    foreach (string hiddenGameCollection in hiddenGame.collections)
                    {
                        gameCollectionItemNestedContextMenuItem = new MenuItem();
                        gameCollectionItemNestedContextMenuItem.Header = hiddenGameCollection;
                        gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                        gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                        gameCollectionItemNestedContextMenuItemData.Add("collection", hiddenGameCollection);
                        gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                        gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionHandler;
                        gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);
                    }
                    gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                    gameCollectionItemContextMenuItem = new MenuItem();
                    gameCollectionItemContextMenuItem.Header = "Управление";

                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                    gameCollectionItemNestedContextMenuItem.Header = "Создать ярлык на рабочем столе";
                    gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                    gameCollectionItemNestedContextMenuItem.Click += CreateShortcutHandler;
                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                    if (IsCoverSet)
                    {
                        gameCollectionItemNestedContextMenuItem.Header = "Удалить свою обложку";
                    }
                    else
                    {
                        gameCollectionItemNestedContextMenuItem.Header = "Задать свою обложку";
                    }
                    gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                    gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                    gameCollectionItemNestedContextMenuItemData.Add("collection", "");
                    gameCollectionItemNestedContextMenuItemData.Add("cover", currentGameCover);
                    gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                    gameCollectionItemNestedContextMenuItem.Click += ToggleGameCoverHandler;
                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                    gameCollectionItemNestedContextMenuItem.Header = "Просмотреть локальные файлы";
                    gameCollectionItemNestedContextMenuItem.DataContext = currentGameName;
                    gameCollectionItemNestedContextMenuItem.Click += ShowGamesLocalFilesHandler;
                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                    bool isHiddenGame = hiddenGame.isHidden;
                    if (isHiddenGame)
                    {
                        gameCollectionItemNestedContextMenuItem.Header = "Убрать из скрытого";
                    }
                    else
                    {
                        gameCollectionItemNestedContextMenuItem.Header = "Скрыть игру";
                    }

                    gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                    gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                    gameCollectionItemNestedContextMenuItemData.Add("collection", "");
                    gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                    gameCollectionItemNestedContextMenuItem.Click += ToggleGameVisibilityHandler;
                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                    gameCollectionItemNestedContextMenuItem = new MenuItem();
                    gameCollectionItemNestedContextMenuItem.Header = "Удалить с утройства";
                    gameCollectionItemNestedContextMenuItemData = new Dictionary<String, Object>();
                    gameCollectionItemNestedContextMenuItemData.Add("game", currentGameName);
                    gameCollectionItemNestedContextMenuItemData.Add("collection", "");
                    gameCollectionItemNestedContextMenuItem.DataContext = gameCollectionItemNestedContextMenuItemData;
                    gameCollectionItemNestedContextMenuItem.Click += RemoveGameFromCollectionsMenuHandler;
                    gameCollectionItemContextMenuItem.Items.Add(gameCollectionItemNestedContextMenuItem);

                    gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                    gameCollectionItemContextMenuItem = new MenuItem();
                    gameCollectionItemContextMenuItem.Header = "Свойства";
                    Dictionary<String, Object> gameCollectionItemContextMenuItemData = new Dictionary<String, Object>();
                    gameCollectionItemContextMenuItemData.Add("game", currentGameName);
                    bool isCustomGame = currentGameId == "mockId";
                    gameCollectionItemContextMenuItemData.Add("isCustomGame", isCustomGame);
                    gameCollectionItemContextMenuItem.DataContext = currentGameName;
                    gameCollectionItemContextMenuItem.Click += OpenGameSettingsHandler;
                    gameCollectionItemContextMenu.Items.Add(gameCollectionItemContextMenuItem);

                    gameCollectionItem.ContextMenu = gameCollectionItemContextMenu;
                }
            }
            else
            {
                hiddenGames.HorizontalAlignment = HorizontalAlignment.Center;
                TextBlock gameCollectionsNotFoundLabel = new TextBlock();
                gameCollectionsNotFoundLabel.Text = "Срытых игр не обнаружено.";
                hiddenGames.Children.Add(gameCollectionsNotFoundLabel);
            }
        }

        public void ToggleGameVisibilityHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            Dictionary<String, Object> data = ((Dictionary<String, Object>)(menuItemData));
            ToggleGameVisibility(data);
        }

        public void ToggleGameVisibility(Dictionary<String, Object> data)
        {
            string name = ((string)(data["game"]));
            string collection = ((string)(data["collection"]));

            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> updatedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            List<Game> results = updatedGames.Where<Game>((Game game) =>
            {
                string gameName = game.name;
                bool isFound = gameName == name;
                return isFound;
            }).ToList();
            int countResults = results.Count;
            bool isHaveResults = countResults >= 1;
            if (isHaveResults)
            {
                Game result = results[0];
                bool isHidden = result.isHidden;
                bool toggledVisibility = !isHidden;
                result.isHidden = toggledVisibility;
                string savedContent = js.Serialize(new SavedContent
                {
                    games = updatedGames,
                    friends = currentFriends,
                    settings = currentSettings,
                    collections = currentCollections,
                    notifications = currentNotifications,
                    categories = currentCategories,
                    recentChats = currentRecentChats,
                    recommendations = currentRecommendations,
                    logoutDate = currentLogoutDate,
                    sections = currentSections
                });
                File.WriteAllText(saveDataFilePath, savedContent);
            }

            GetGameCollectionItems(collection);
            GetGamesList("");
            GetHiddenGames();

        }

        public void AddExternalGameHandler (object sender, RoutedEventArgs e)
        {
            AddExternalGame();
        }

        public void AddExternalGame ()
        {
            Dialogs.AddExternalGameDialog dialog = new Dialogs.AddExternalGameDialog(currentUserId);
            dialog.Closed += GetGamesListHandler;
            dialog.Show();
        }

        public void GetGamesListHandler (object sender, EventArgs e)
        {
            GetGamesList("");
            GetDownloads();
            GetScreenShots("", false);

        }

        private void OpenGameActivationHandler (object sender, RoutedEventArgs e)
        {
            OpenGameActivation();
        }

        public void OpenGameActivation ()
        {
            Dialogs.ActivationGameDialog dialog = new Dialogs.ActivationGameDialog();
            dialog.Show();
        }

        private void OpenNewsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenNews();
        }

        public void OpenNews ()
        {
            mainControl.SelectedIndex = 14;
            GetNews();
            AddHistoryRecord();
            newsPopupIcon.Foreground = System.Windows.Media.Brushes.Black;
        }

        private void ToggleNotificationsPopupHandler(object sender, MouseButtonEventArgs e)
        {
            ToggleNotificationsPopup();
        }

        public void ToggleNotificationsPopup()
        {
            /*bool isOpen = notificationsPopup.IsOpen;
            bool toggleValue = !isOpen;
            notificationsPopup.IsOpen = toggleValue;*/
            notificationsPopup.IsOpen = true;
        }



        private void SelectAccountSettingsItemHandler(object sender, MouseButtonEventArgs e)
        {
            StackPanel item = ((StackPanel)(sender));
            object data = item.DataContext;
            string rawIndex = data.ToString();
            int index = Int32.Parse(rawIndex);
            SelectAccountSettingsItem(index);
        }

        public void SelectAccountSettingsItem (int index)
        {
            accountSettingsControl.SelectedIndex = index;
            foreach (StackPanel accountSettingsTab in accountSettingsTabs.Children)
            {
                accountSettingsTab.Background = System.Windows.Media.Brushes.Transparent;
            }
            UIElementCollection accountSettingsTabsChildren = accountSettingsTabs.Children;
            UIElement rawActiveAccountSettingsTab = accountSettingsTabsChildren[index];
            StackPanel activeAccountSettingsTab = ((StackPanel)(rawActiveAccountSettingsTab));
            activeAccountSettingsTab.Background = System.Windows.Media.Brushes.LightGray;

            bool isAbout = index == 0;
            bool isLang = index == 2;
            if (isAbout)
            {
                GetAboutAccountSettings();
            }
            else if (isLang)
            {
                GetLangSettings();
            }

        }

        private void SelectFriendSettingsItemHandler(object sender, MouseButtonEventArgs e)
        {
            StackPanel item = ((StackPanel)(sender));
            object data = item.DataContext;
            string rawIndex = data.ToString();
            int index = Int32.Parse(rawIndex);
            SelectFriendSettingsItem(index);
        }

        public void SelectFriendSettingsItem(int index)
        {
            friendsSettingsControl.SelectedIndex = index;
        }

        private void DeleteAccountHandler(object sender, MouseButtonEventArgs e)
        {
            DeleteAccount();
        }

        public void DeleteAccount()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/delete/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        ForumsListResponseInfo myobj = (ForumsListResponseInfo)js.Deserialize(objText, typeof(ForumsListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string userPath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId;
                            try
                            {
                                Logout();
                                Directory.Delete(userPath, true);
                            }
                            catch (System.Net.WebException)
                            {
                                MessageBox.Show("Не удается удалить каталог пользователя", "Ошибка");
                            }
                        }
                        else
                        {
                            MessageBox.Show("Не удается удалить аккаунт", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetAccountSettings()
        {
            string idLabelContent = @"Office ware game manager ID: " + currentUserId;
            idLabel.Text = idLabelContent;
            GetAboutAccountSettings();
            GetLangSettings();
        }

        public void GetAboutAccountSettings ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string country = user.country;
                            int amount = user.amount;
                            bool isEmailConfirmed = user.isEmailConfirmed;
                            string accountSettingsCountryLabelContent = "Страна: " + country;
                            accountSettingsCountryLabel.Text = accountSettingsCountryLabelContent;
                            string rawAmount = amount.ToString();
                            string amountMeasure = "руб.";
                            string accountSettingsAmountLabelContent = rawAmount + " " + amountMeasure;
                            accountSettingsAmountLabel.Text = accountSettingsAmountLabelContent;
                            if (isEmailConfirmed)
                            {
                                emailConfirmedLabel.Text = "Подтвержден";
                            }
                            else
                            {
                                emailConfirmedLabel.Text = "Не подтвержден";
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void RejectFriendRequestsHandler(object sender, RoutedEventArgs e)
        {
            RejectFriendRequests();
        }

        private void FindUserByFriendCodeHandler (object sender, TextChangedEventArgs e)
        {
            FindUserByFriendCode();
        }

        public void FindUserByFriendCode ()
        {
            string friendCodeBoxContent = friendCodeBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendCodeBoxContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            foundedFriendByFriendCodeAvatar.BeginInit();
                            foundedFriendByFriendCodeAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + friendCodeBoxContent));
                            foundedFriendByFriendCodeAvatar.EndInit();
                            foundedFriendByFriendCodeNameLabel.Text = userName;
                            foundedFriendByFriendCode.Visibility = visible;
                        }
                        else
                        {
                            foundedFriendByFriendCode.Visibility = invisible;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenBlackListManagementHandler(object sender, RoutedEventArgs e)
        {
            OpenBlackListManagement();
        }

        public void OpenBlackListManagement()
        {

        }

        private void OpenFriendProfilePopupHandler (object sender, RoutedEventArgs e)
        {
            OpenFriendProfilePopup();
        }

        public void OpenFriendProfilePopup ()
        {
            friendProfilePopup.IsOpen = true;

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/subs/all/");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserSubsResponseInfo myobj = (UserSubsResponseInfo)js.Deserialize(objText, typeof(UserSubsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<UserSub> subs = myobj.subs;

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                    status = myobj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        List<Friend> friends = myInnerObj.friends;

                                        List<Friend> myFriends = friends.Where<Friend>((Friend friend) =>
                                        {
                                            return friend.user == currentUserId;
                                        }).ToList<Friend>();

                                        List<string> friendsIds = new List<string>();
                                        foreach (Friend myFriend in myFriends)
                                        {
                                            string friendId = myFriend.friend;
                                            friendsIds.Add(friendId);
                                        }
                                        bool isMyFriend = friendsIds.Contains(cachedUserProfileId);
                                        if (isMyFriend)
                                        {
                                            friendProfilePopupBodyRemoveFriend.Visibility = visible;
                                            friendProfilePopupBodyAddNick.Visibility = visible;
                                            friendProfilePopupBodyTradeOffer.Visibility = visible;
                                        }
                                        else
                                        {
                                            friendProfilePopupBodyRemoveFriend.Visibility = invisible;
                                            friendProfilePopupBodyAddNick.Visibility = invisible;
                                            friendProfilePopupBodyTradeOffer.Visibility = invisible;
                                        }

                                        int countBetweenSubs = subs.Count<UserSub>((UserSub userSub) =>
                                        {
                                            string userSubUserId = userSub.user;
                                            string userSubSubId = userSub.sub;
                                            bool isCurrentUser = userSubUserId == currentUserId;
                                            bool isCurrentSub = userSubSubId == cachedUserProfileId;
                                            bool isBetween = isCurrentUser && isCurrentSub;
                                            return isBetween;
                                        });
                                        bool isSubscribed = countBetweenSubs >= 1;
                                        friendProfilePopupBodySubLabel.MouseLeftButtonUp -= SubscribeUserHandler;
                                        friendProfilePopupBodySubLabel.MouseLeftButtonUp -= UnSubscribeUserHandler;
                                        if (isSubscribed)
                                        {
                                            friendProfilePopupBodySubLabel.Text = "Отписаться";
                                            friendProfilePopupBodySubLabel.MouseLeftButtonUp += UnSubscribeUserHandler;
                                        }
                                        else
                                        {
                                            friendProfilePopupBodySubLabel.Text = "Подписаться";
                                            friendProfilePopupBodySubLabel.MouseLeftButtonUp += SubscribeUserHandler;
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        public void SubscribeUserHandler (object sender, RoutedEventArgs e)
        {
            SubscribeUser();
        }

        public void SubscribeUser ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/subs/add/?id=" + currentUserId + "&sub=" + cachedUserProfileId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            friendProfilePopup.IsOpen = false;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void UnSubscribeUserHandler (object sender, RoutedEventArgs e)
        {
            UnSubscribeUser();
        }

        public void UnSubscribeUser ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/subs/remove/?user=" + currentUserId + "&sub=" + cachedUserProfileId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            friendProfilePopup.IsOpen = false;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void FriendsSettingsControlItemSelectedHandler(object sender, SelectionChangedEventArgs e)
        {
            FriendsSettingsControlItemSelected();
        }

        public void FriendsSettingsControlItemSelected ()
        {
            int selectedIndex = friendsSettingsControl.SelectedIndex;
            bool isGameSubs = selectedIndex == 7;
            bool isGroups = selectedIndex == 10;
            bool isAddGroup = selectedIndex == 11;
            if (isGameSubs)
            {
                OpenGameSubs();
            }
            else if (isAddGroup)
            {
                mainControl.SelectedIndex = 18;
            }
            else if (isGroups)
            {
                mainControl.SelectedIndex = 17;
            }
        }

        private void ToggleFriendSubsListManagementHandler (object sender, RoutedEventArgs e)
        {
            ToggleFriendSubsListManagement();
        }

        public void ToggleFriendSubsListManagement ()
        {
            Visibility friendSubsListManagementVisibility = friendSubsListManagement.Visibility;
            bool isVisible = friendSubsListManagementVisibility == visible;
            if (isVisible)
            {
                friendSubsListManagement.Visibility = invisible;
                foreach (StackPanel myUserSub in myUserSubs.Children)
                {
                    foreach (UIElement myUserSubElement in myUserSub.Children)
                    {
                        bool isCheckBox = myUserSubElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = myUserSubElement as CheckBox;
                            checkBox.Visibility = invisible;
                        }
                    }
                }
            }
            else
            {
                friendSubsListManagement.Visibility = visible;
                foreach (StackPanel myUserSub in myUserSubs.Children)
                {
                    foreach (UIElement myUserSubElement in myUserSub.Children)
                    {
                        bool isCheckBox = myUserSubElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = myUserSubElement as CheckBox;
                            checkBox.Visibility = visible;
                        }
                    }
                }

            }
        }

        private void ToggleFriendsListManagementHandler(object sender, RoutedEventArgs e)
        {
            ToggleFriendsListManagement();
        }

        public void ToggleFriendsListManagement()
        {
            Visibility friendsListManagementVisibility = friendsListManagement.Visibility;
            bool isVisible = friendsListManagementVisibility == visible;
            if (isVisible)
            {
                friendsListManagement.Visibility = invisible;
                foreach (StackPanel onlineFriendsListItem in onlineFriendsList.Children)
                {
                    foreach (UIElement onlineFriendsListItemElement in onlineFriendsListItem.Children)
                    {
                        bool isCheckBox = onlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = onlineFriendsListItemElement as CheckBox;
                            checkBox.Visibility = invisible;
                        }
                    }
                }
                foreach (StackPanel offlineFriendsListItem in offlineFriendsList.Children)
                {
                    foreach (UIElement offlineFriendsListItemElement in offlineFriendsListItem.Children)
                    {
                        bool isCheckBox = offlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = offlineFriendsListItemElement as CheckBox;
                            checkBox.Visibility = invisible;
                        }
                    }
                }
            }
            else
            {
                friendsListManagement.Visibility = visible;
                foreach (StackPanel onlineFriendsListItem in onlineFriendsList.Children)
                {
                    foreach (UIElement onlineFriendsListItemElement in onlineFriendsListItem.Children)
                    {
                        bool isCheckBox = onlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = onlineFriendsListItemElement as CheckBox;
                            checkBox.Visibility = visible;
                        }
                    }
                }
                foreach (StackPanel offlineFriendsListItem in offlineFriendsList.Children)
                {
                    foreach (UIElement offlineFriendsListItemElement in offlineFriendsListItem.Children)
                    {
                        bool isCheckBox = offlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = offlineFriendsListItemElement as CheckBox;
                            checkBox.Visibility = visible;
                        }
                    }
                }
            }
        }

        public void UnsubscribeFriendsHandler (object sender, RoutedEventArgs e)
        {
            UnsubscribeFriends();
        }

        public void UnsubscribeFriends ()
        {

        }

        private void RemoveFriendsHandler (object sender, RoutedEventArgs e)
        {
            RemoveFriends();
        }

        public void RemoveFriends()
        {
            foreach (StackPanel onlineFriendsListItem in onlineFriendsList.Children)
            {
                foreach (UIElement onlineFriendsListItemElement in onlineFriendsListItem.Children)
                {
                    bool isCheckBox = onlineFriendsListItemElement is CheckBox;
                    if (isCheckBox)
                    {
                        CheckBox checkBox = onlineFriendsListItemElement as CheckBox;
                        object rawIsChecked = checkBox.IsChecked;
                        bool isChecked = ((bool)(rawIsChecked));
                        if (isChecked)
                        {
                            object friendData = onlineFriendsListItem.DataContext;
                            string friendId = ((string)(friendData));
                            try
                            {
                                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/remove/?id=" + currentUserId + "&friend=" + friendId);
                                webRequest.Method = "GET";
                                webRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                                {
                                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                                    {
                                        JavaScriptSerializer js = new JavaScriptSerializer();
                                        var objText = reader.ReadToEnd();
                                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        string status = myobj.status;
                                        bool isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                            js = new JavaScriptSerializer();
                                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                            List<Game> currentGames = loadedContent.games;
                                            List<FriendSettings> updatedFriends = loadedContent.friends;
                                            Settings currentSettings = loadedContent.settings;
                                            List<string> currentCollections = loadedContent.collections;
                                            Notifications currentNotifications = loadedContent.notifications;
                                            List<string> currentCategories = loadedContent.categories;
                                            List<string> currentRecentChats = loadedContent.recentChats;
                                            Recommendations currentRecommendations = loadedContent.recommendations;
                                            string currentLogoutDate = loadedContent.logoutDate;
                                            List<string> currentSections = loadedContent.sections;
                                            List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings friend) =>
                                            {
                                                return friend.id == friendId;
                                            }).ToList();
                                            int countCachedFriends = cachedFriends.Count;
                                            bool isCachedFriendsExists = countCachedFriends >= 1;
                                            if (isCachedFriendsExists)
                                            {
                                                FriendSettings cachedFriend = cachedFriends[0];
                                                updatedFriends.Remove(cachedFriend);
                                                string savedContent = js.Serialize(new SavedContent
                                                {
                                                    games = currentGames,
                                                    friends = updatedFriends,
                                                    settings = currentSettings,
                                                    collections = currentCollections,
                                                    notifications = currentNotifications,
                                                    categories = currentCategories,
                                                    recentChats = currentRecentChats,
                                                    recommendations = currentRecommendations,
                                                    logoutDate = currentLogoutDate,
                                                    sections = currentSections
                                                });
                                                File.WriteAllText(saveDataFilePath, savedContent);
                                                GetOnlineFriends();
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Не удается удалить друга", "Ошибка");
                                        }
                                    }
                                }
                            }
                            catch (System.Net.WebException)
                            {
                                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                this.Close();
                            }
                        }
                    }
                }
            }
            foreach (StackPanel offlineFriendsListItem in offlineFriendsList.Children)
            {
                foreach (UIElement offlineFriendsListItemElement in offlineFriendsListItem.Children)
                {
                    bool isCheckBox = offlineFriendsListItemElement is CheckBox;
                    if (isCheckBox)
                    {
                        CheckBox checkBox = offlineFriendsListItemElement as CheckBox;
                        object rawIsChecked = checkBox.IsChecked;
                        bool isChecked = ((bool)(rawIsChecked));
                        if (isChecked)
                        {
                            object friendData = offlineFriendsListItem.DataContext;
                            string friendId = ((string)(friendData));
                            try
                            {
                                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/remove/?id=" + currentUserId + "&friend=" + friendId);
                                webRequest.Method = "GET";
                                webRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                                {
                                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                                    {
                                        JavaScriptSerializer js = new JavaScriptSerializer();
                                        var objText = reader.ReadToEnd();
                                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        string status = myobj.status;
                                        bool isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                            js = new JavaScriptSerializer();
                                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                            List<Game> currentGames = loadedContent.games;
                                            List<FriendSettings> updatedFriends = loadedContent.friends;
                                            Settings currentSettings = loadedContent.settings;
                                            List<string> currentCollections = loadedContent.collections;
                                            Notifications currentNotifications = loadedContent.notifications;
                                            List<string> currentCategories = loadedContent.categories; 
                                            List<string> currentRecentChats = loadedContent.recentChats;
                                            Recommendations currentRecommendations = loadedContent.recommendations;
                                            string currentLogoutDate = loadedContent.logoutDate;
                                            List<string> currentSections = loadedContent.sections;
                                            List<FriendSettings> cachedFriends = updatedFriends.Where<FriendSettings>((FriendSettings friend) =>
                                            {
                                                return friend.id == friendId;
                                            }).ToList();
                                            int countCachedFriends = cachedFriends.Count;
                                            bool isCachedFriendsExists = countCachedFriends >= 1;
                                            if (isCachedFriendsExists)
                                            {
                                                FriendSettings cachedFriend = cachedFriends[0];
                                                updatedFriends.Remove(cachedFriend);
                                                string savedContent = js.Serialize(new SavedContent
                                                {
                                                    games = currentGames,
                                                    friends = updatedFriends,
                                                    settings = currentSettings,
                                                    collections = currentCollections,
                                                    notifications = currentNotifications,
                                                    categories = currentCategories,
                                                    recentChats = currentRecentChats,
                                                    recommendations = currentRecommendations,
                                                    logoutDate = currentLogoutDate,
                                                    sections = currentSections
                                                });
                                                File.WriteAllText(saveDataFilePath, savedContent);
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Не удается удалить друга", "Ошибка");
                                        }
                                    }
                                }
                            }
                            catch (System.Net.WebException)
                            {
                                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                                this.Close();
                            }
                        }
                    }
                }
            }
            GetFriendsSettings();
        }

        public void OpenManualsHandler (object sender, RoutedEventArgs e)
        {
            OpenManuals();
        }

        public void OpenManuals ()
        {
            try
            {
                string currentGameName = gameNameLabel.Text;
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> gameResults = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                string localGameName = totalGamesItem.name;
                                bool isNamesMatches = localGameName == currentGameName;
                                return isNamesMatches;
                            }).ToList<GameResponseInfo>();
                            int countResults = gameResults.Count;
                            bool isResultsFound = countResults >= 1;
                            if (isResultsFound)
                            {
                                GameResponseInfo foundedGame = gameResults[0];
                                string gameId = foundedGame._id;
                                mainControl.SelectedIndex = 20;
                                SelectCommunityGameAnnotation(gameId);
                                communityControl.SelectedIndex = 7;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenCommunityCenterHandler (object sender, RoutedEventArgs e)
        {
            OpenCommunityCenter();
        }

        public void OpenCommunityCenter ()
        {
            try
            {
                string currentGameName = gameNameLabel.Text;
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> gameResults = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                string localGameName = totalGamesItem.name;
                                bool isNamesMatches = localGameName == currentGameName;
                                return isNamesMatches;
                            }).ToList<GameResponseInfo>();
                            int countResults = gameResults.Count;
                            bool isResultsFound = countResults >= 1;
                            if (isResultsFound)
                            {
                                GameResponseInfo foundedGame = gameResults[0];
                                string gameId = foundedGame._id;
                                mainControl.SelectedIndex = 20;
                                SelectCommunityGameAnnotation(gameId);
                                communityControl.SelectedIndex = 0;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenWorkShopHandler (object sender, RoutedEventArgs e)
        {
            OpenWorkShop();
        }

        public void OpenWorkShop ()
        {
            try
            {
                string currentGameName = gameNameLabel.Text;
                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                innerWebRequest.Method = "GET";
                innerWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> gameResults = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                string localGameName = totalGamesItem.name;
                                bool isNamesMatches = localGameName == currentGameName;
                                return isNamesMatches;
                            }).ToList<GameResponseInfo>();
                            int countResults = gameResults.Count;
                            bool isResultsFound = countResults >= 1;
                            if (isResultsFound)
                            {
                                GameResponseInfo foundedGame = gameResults[0];
                                string gameId = foundedGame._id;
                                mainControl.SelectedIndex = 20;
                                SelectCommunityGameAnnotation(gameId);
                                communityControl.SelectedIndex = 5;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectFriendSubsTypeHandler (object sender, MouseButtonEventArgs e)
        {
            TextBlock typeLabel = ((TextBlock)(sender));
            object typeLabelData = typeLabel.DataContext;
            string type = typeLabelData.ToString();
            SelectFriendSubsType(type);
        }

        private void SelectFriendsTypeHandler (object sender, MouseButtonEventArgs e)
        {
            TextBlock typeLabel = ((TextBlock)(sender));
            object typeLabelData = typeLabel.DataContext;
            string type = typeLabelData.ToString();
            SelectFriendSubsType(type);
        }

        public void SelectFriendSubsType(string type)
        {
            bool isAll = type == "All";
            bool isNothing = type == "Nothing";
            bool isInvert = type == "Invert";
            if (isAll)
            {
                foreach (StackPanel myUserSub in myUserSubs.Children)
                {
                    foreach (UIElement myUserSubElement in myUserSub.Children)
                    {
                        bool isCheckBox = myUserSubElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = myUserSubElement as CheckBox;
                            checkBox.IsChecked = true;
                        }
                    }
                }
            }
            else if (isNothing)
            {
                foreach (StackPanel myUserSub in myUserSubs.Children)
                {
                    foreach (UIElement myUserSubElement in myUserSub.Children)
                    {
                        bool isCheckBox = myUserSubElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = myUserSubElement as CheckBox;
                            checkBox.IsChecked = false;
                        }
                    }
                }
            }
            else if (isInvert)
            {
                foreach (StackPanel myUserSub in myUserSubs.Children)
                {
                    foreach (UIElement myUserSubElement in myUserSubs.Children)
                    {
                        bool isCheckBox = myUserSubElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = myUserSubElement as CheckBox;
                            object rawIsChecked = checkBox.IsChecked;
                            bool isChecked = ((bool)(rawIsChecked));
                            checkBox.IsChecked = !isChecked;
                        }
                    }
                }
            }
        }


        public void SelectFriendsType(string type)
        {
            bool isAll = type == "All";
            bool isNothing = type == "Nothing";
            bool isInvert = type == "Invert";
            if (isAll)
            {
                foreach (StackPanel onlineFriendsListItem in onlineFriendsList.Children)
                {
                    foreach (UIElement onlineFriendsListItemElement in onlineFriendsListItem.Children)
                    {
                        bool isCheckBox = onlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = onlineFriendsListItemElement as CheckBox;
                            checkBox.IsChecked = true;
                        }
                    }
                }
                foreach (StackPanel offlineFriendsListItem in offlineFriendsList.Children)
                {
                    foreach (UIElement offlineFriendsListItemElement in offlineFriendsListItem.Children)
                    {
                        bool isCheckBox = offlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = offlineFriendsListItemElement as CheckBox;
                            checkBox.IsChecked = true;
                        }
                    }
                }
            }
            else if (isNothing)
            {
                foreach (StackPanel onlineFriendsListItem in onlineFriendsList.Children)
                {
                    foreach (UIElement onlineFriendsListItemElement in onlineFriendsListItem.Children)
                    {
                        bool isCheckBox = onlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = onlineFriendsListItemElement as CheckBox;
                            checkBox.IsChecked = false;
                        }
                    }
                }
                foreach (StackPanel offlineFriendsListItem in offlineFriendsList.Children)
                {
                    foreach (UIElement offlineFriendsListItemElement in offlineFriendsListItem.Children)
                    {
                        bool isCheckBox = offlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = offlineFriendsListItemElement as CheckBox;
                            checkBox.IsChecked = false;
                        }
                    }
                }
            }
            else if (isInvert)
            {
                foreach (StackPanel onlineFriendsListItem in onlineFriendsList.Children)
                {
                    foreach (UIElement onlineFriendsListItemElement in onlineFriendsListItem.Children)
                    {
                        bool isCheckBox = onlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = onlineFriendsListItemElement as CheckBox;
                            object rawIsChecked = checkBox.IsChecked;
                            bool isChecked = ((bool)(rawIsChecked));
                            checkBox.IsChecked = !isChecked;
                        }
                    }
                }
                foreach (StackPanel offlineFriendsListItem in offlineFriendsList.Children)
                {
                    foreach (UIElement offlineFriendsListItemElement in offlineFriendsListItem.Children)
                    {
                        bool isCheckBox = offlineFriendsListItemElement is CheckBox;
                        if (isCheckBox)
                        {
                            CheckBox checkBox = offlineFriendsListItemElement as CheckBox;
                            object rawIsChecked = checkBox.IsChecked;
                            bool isChecked = ((bool)(rawIsChecked));
                            checkBox.IsChecked = !isChecked;
                        }
                    }
                }
            }
        }

        private void OpenDiscussionsHandler (object sender, RoutedEventArgs e)
        {
            OpenDiscussions();
        }

        public void OpenDiscussions ()
        {
            string currentGameName = gameNameLabel.Text;
            forumsKeywordsBox.Text = currentGameName;
            mainControl.SelectedIndex = 6;
        }

        private void SearchGroupsHandler(object sender, MouseButtonEventArgs e)
        {
            SearchGroups();
        }

        public void SearchGroups()
        {
            mainControl.SelectedIndex = 17;
        }

        private void GetSearchedGroupsHandler(object sender, TextChangedEventArgs e)
        {
            GetSearchedGroups();
        }

        private void GetGroupsHandler (object sender, TextChangedEventArgs e)
        {
            GetGroups();
        }

        private void AddGroupRequestHandler (object sender, MouseButtonEventArgs e)
        {
            AddGroupRequest();
        }

        public void AddGroupRequest ()
        {
            /*object mainControlData = mainControl.DataContext;
            string friendId = ((string)(mainControlData));*/
            string friendId = cachedUserProfileId;
            Dialogs.AddGroupRequestDialog dialog = new Dialogs.AddGroupRequestDialog(currentUserId, friendId, client);
            dialog.Show();
            friendProfilePopup.IsOpen = false;
        }

        private void AddGroupHandler (object sender, RoutedEventArgs e)
        {
            AddGroup();
        }

        public void AddGroup ()
        {
            try
            {
                string groupNameBoxContent = groupNameBox.Text;
                int groupLangSelectorIndex = groupLangSelector.SelectedIndex;
                ItemCollection groupLangSelectorItems = groupLangSelector.Items;
                object rawGroupLangSelectorItem = groupLangSelectorItems[groupLangSelectorIndex];
                ComboBoxItem groupLangSelectorItem = ((ComboBoxItem)(rawGroupLangSelectorItem));
                object groupLangSelectorItemData = groupLangSelectorItem.DataContext;
                string groupLang = groupLangSelectorItemData.ToString();
                int groupCountrySelectorIndex = groupCountrySelector.SelectedIndex;
                ItemCollection groupCountrySelectorItems = groupCountrySelector.Items;
                object rawGroupCountrySelectorItem = groupCountrySelectorItems[groupCountrySelectorIndex];
                ComboBoxItem groupCountrySelectorItem = ((ComboBoxItem)(rawGroupCountrySelectorItem));
                object groupCountrySelectorItemData = groupCountrySelectorItem.DataContext;
                string groupCountry = groupCountrySelectorItemData.ToString();
                string groupFanPageBoxContent = groupFanPageBox.Text;
                string groupTwitchBoxContent = groupTwitchBox.Text;
                string groupYoutubeBoxContent = groupYoutubeBox.Text;
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/add/?name=" + groupNameBoxContent + "&id=" + currentUserId + "&lang=" + groupLang + "&country=" + groupCountry + "&fanpage=" + groupFanPageBoxContent + "&twitch=" + groupTwitchBoxContent + "&youtube=" + groupYoutubeBoxContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        CreateGroupResponseInfo myobj = (CreateGroupResponseInfo)js.Deserialize(objText, typeof(CreateGroupResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            
                            string data = myobj.id;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=createGroup&data=" + data);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        MessageBox.Show("Группа была создана", "Внимание");
                                        groupNameBox.Text = "";
                                        groupLangSelector.SelectedIndex = 0;
                                        groupCountrySelector.SelectedIndex = 0;
                                        groupFanPageBox.Text = "";
                                        groupTwitchBox.Text = "";
                                        groupYoutubeBox.Text = "";
                                        GetFriendsSettings();
                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void GetGroupRequestsForMeHandler(object sender, TextChangedEventArgs e)
        {
            GetGroupRequestsForMe();
        }

        public void GetGroupRequestsForMe()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/requests/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GroupRequestsResponseInfo myobj = (GroupRequestsResponseInfo)js.Deserialize(objText, typeof(GroupRequestsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GroupRequest> requestsForMe = new List<GroupRequest>();
                            List<GroupRequest> requests = myobj.requests;
                            foreach (GroupRequest request in requests)
                            {
                                string recepientId = request.user;
                                bool isRequestForMe = currentUserId == recepientId;
                                if (isRequestForMe)
                                {
                                    requestsForMe.Add(request);
                                }
                            }
                            myGroupRequests.Children.Clear();
                            int countRequestsForMe = requestsForMe.Count;
                            bool isHaveRequests = countRequestsForMe >= 1;
                            if (isHaveRequests)
                            {
                                foreach (GroupRequest requestForMe in requestsForMe)
                                {
                                    string requestId = requestForMe._id;
                                    string groupId = requestForMe.group;
                                    string userId = requestForMe.user;
                                    HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/groups/get/?id=" + groupId);
                                    innerWebRequest.Method = "GET";
                                    innerWebRequest.UserAgent = ".NET Framework Test Client";
                                    using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                    {
                                        using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                        {
                                            js = new JavaScriptSerializer();
                                            objText = innerReader.ReadToEnd();
                                            GroupResponseInfo myInnerObj = (GroupResponseInfo)js.Deserialize(objText, typeof(GroupResponseInfo));
                                            status = myInnerObj.status;
                                            isOkStatus = status == "OK";
                                            if (isOkStatus)
                                            {
                                                Group group = myInnerObj.group;
                                                string groupName = group.name;
                                                string insensitiveCaseSenderName = groupName.ToLower();
                                                string myGroupRequestsBoxContent = myGroupRequestsBox.Text;
                                                string insensitiveCaseKeywords = myGroupRequestsBoxContent.ToLower();
                                                bool isGroupFound = insensitiveCaseSenderName.Contains(insensitiveCaseKeywords);
                                                int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                                                bool isFilterDisabled = insensitiveCaseKeywordsLength <= 0;
                                                bool isRequestMatch = isGroupFound || isFilterDisabled;
                                                if (isRequestMatch)
                                                {
                                                    StackPanel myGroupRequest = new StackPanel();
                                                    myGroupRequest.Margin = new Thickness(15);
                                                    myGroupRequest.Width = 250;
                                                    myGroupRequest.Height = 50;
                                                    myGroupRequest.Orientation = Orientation.Horizontal;
                                                    myGroupRequest.Background = System.Windows.Media.Brushes.DarkCyan;
                                                    Image myGroupRequestIcon = new Image();
                                                    myGroupRequestIcon.Width = 50;
                                                    myGroupRequestIcon.Height = 50;
                                                    myGroupRequestIcon.BeginInit();
                                                    myGroupRequestIcon.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                                    myGroupRequestIcon.EndInit();
                                                    myGroupRequestIcon.ImageFailed += SetDefautAvatarHandler;
                                                    myGroupRequest.Children.Add(myGroupRequestIcon);
                                                    TextBlock myGroupRequestGroupNameLabel = new TextBlock();
                                                    myGroupRequestGroupNameLabel.Margin = new Thickness(10, 0, 10, 0);
                                                    myGroupRequestGroupNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                                    myGroupRequestGroupNameLabel.Text = groupName;
                                                    myGroupRequest.Children.Add(myGroupRequestGroupNameLabel);
                                                    myGroupRequests.Children.Add(myGroupRequest);
                                                    ContextMenu myGroupRequestContextMenu = new ContextMenu();
                                                    MenuItem myGroupRequestContextMenuItem = new MenuItem();
                                                    myGroupRequestContextMenuItem.Header = "Принять";
                                                    Dictionary<String, Object> myGroupRequestContextMenuItemData = new Dictionary<String, Object>();
                                                    myGroupRequestContextMenuItemData.Add("groupId", groupId);
                                                    myGroupRequestContextMenuItemData.Add("userId", userId);
                                                    myGroupRequestContextMenuItemData.Add("requestId", requestId);
                                                    myGroupRequestContextMenuItem.DataContext = myGroupRequestContextMenuItemData;
                                                    myGroupRequestContextMenuItem.Click += AcceptGroupRequestFromSettingsHandler;
                                                    myGroupRequestContextMenu.Items.Add(myGroupRequestContextMenuItem);
                                                    myGroupRequestContextMenuItem = new MenuItem();
                                                    myGroupRequestContextMenuItem.Header = "Отклонить";
                                                    myGroupRequestContextMenuItemData = new Dictionary<String, Object>();
                                                    myGroupRequestContextMenuItemData.Add("groupId", groupId);
                                                    myGroupRequestContextMenuItemData.Add("userId", userId);
                                                    myGroupRequestContextMenuItemData.Add("requestId", requestId);
                                                    myGroupRequestContextMenuItem.DataContext = myGroupRequestContextMenuItemData;
                                                    myGroupRequestContextMenuItem.Click += RejectGroupRequestFromSettingsHandler;
                                                    myGroupRequestContextMenu.Items.Add(myGroupRequestContextMenuItem);
                                                    myGroupRequest.ContextMenu = myGroupRequestContextMenu;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                TextBlock requestsNotFoundLabel = new TextBlock();
                                requestsNotFoundLabel.Margin = new Thickness(15);
                                requestsNotFoundLabel.FontSize = 18;
                                requestsNotFoundLabel.Text = "Извините, здесь ничего нет.";
                                myGroupRequests.Children.Add(requestsNotFoundLabel);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void ToggleCommentFooterHandler(object sender, TextChangedEventArgs e)
        {
            ToggleCommentFooter();
        }

        public void ToggleCommentFooter()
        {
            string userProfileCommentBoxContent = userProfileCommentBox.Text;
            int userProfileCommentBoxContentLength = userProfileCommentBoxContent.Length;
            bool isContentExists = userProfileCommentBoxContentLength >= 1;
            if (isContentExists)
            {
                userProfileCommentFooter.Visibility = visible;
            }
            else
            {
                userProfileCommentFooter.Visibility = invisible;
            }
        }

        private void SendCommentHandler(object sender, RoutedEventArgs e)
        {
            SendComment();
        }

        public void SendComment()
        {
            string userProfileCommentBoxContent = userProfileCommentBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/comments/add/?id=" + cachedUserProfileId + "&msg=" + userProfileCommentBoxContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            userProfileCommentBox.Text = "";
                            GetComments(cachedUserProfileId);
                            string eventData = currentUserId + "|" + cachedUserProfileId;
                            client.EmitAsync("user_send_comment", eventData);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetComments(string id)
        {
            comments.Children.Clear();
            string userProfileCommentBoxContent = userProfileCommentBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/comments/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        CommentsResponseInfo myobj = (CommentsResponseInfo)js.Deserialize(objText, typeof(CommentsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Comment> commentsList = myobj.comments;
                            foreach (Comment commentsListItem in commentsList)
                            {
                                string msg = commentsListItem.msg;
                                StackPanel comment = new StackPanel();
                                comment.Background = System.Windows.Media.Brushes.AliceBlue;
                                comment.Margin = new Thickness(15);
                                comment.Orientation = Orientation.Horizontal;
                                Image commentAvatar = new Image();
                                commentAvatar.Margin = new Thickness(15);
                                commentAvatar.Width = 50;
                                commentAvatar.Height = 50;
                                commentAvatar.BeginInit();
                                commentAvatar.Source = new BitmapImage(new Uri(@"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png"));
                                commentAvatar.EndInit();
                                comment.Children.Add(commentAvatar);
                                TextBlock commenMsgLabel = new TextBlock();
                                commenMsgLabel.Margin = new Thickness(15);
                                commenMsgLabel.Text = msg;
                                comment.Children.Add(commenMsgLabel);
                                comments.Children.Add(comment);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void PickFileHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            PickFile(btn);
        }

        public void PickFile (Button btn)
        {
            Microsoft.Win32.OpenFileDialog ofd = new Microsoft.Win32.OpenFileDialog();
            ofd.Title = "Выберите обложку";
            ofd.Filter = "Png documents (.png)|*.png";
            bool? res = ofd.ShowDialog();
            bool isOpened = res != false;
            if (isOpened)
            {
                string path = ofd.FileName;
                manualAttachmentExt = System.IO.Path.GetExtension(path);
                manualAttachment = ImageFileToByteArray(path);
                btn.Content = path;
            }
        }

        private void ShowScreenShotUploadersDialogHandler (object sender, RoutedEventArgs e)
        {
            ShowScreenShotUploadersDialog();
        }

        public void ShowScreenShotUploadersDialog ()
        {
            Dialogs.ScreenShotsUploaderDialog dialog = new Dialogs.ScreenShotsUploaderDialog(currentUserId);
            dialog.Show();
        }

        private void OpenAddReviewHandler (object sender, RoutedEventArgs e)
        {
            string name = gameNameLabel.Text;
            OpenAddReview(name);
        }

        public void AddReviewHandler (object sender, RoutedEventArgs e)
        {
            AddReview();
        }

        public void AddReview ()
        {
            try
            {
                object rawGame = reviewGameLabel.DataContext;
                Game game = ((Game)(rawGame));
                string hours = game.hours;
                string gameId = game.id;
                string reviewDescBoxContent = reviewDescBox.Text;
                string rawIsCommentsEnabled = "false";
                object rawReviewCommentsPermissionCheckBoxIsChecked = reviewCommentsPermissionCheckBox.IsChecked;
                bool reviewCommentsPermissionCheckBoxIsChecked = ((bool)(rawReviewCommentsPermissionCheckBoxIsChecked));
                if (reviewCommentsPermissionCheckBoxIsChecked)
                {
                    rawIsCommentsEnabled = "true";
                }
                int reviewVisibiltySelectorSelectedIndex = reviewVisibiltySelector.SelectedIndex;
                ItemCollection reviewVisibiltySelectorItems = reviewVisibiltySelector.Items;
                object rawReviewVisibiltySelectedSelectorItem = reviewVisibiltySelectorItems[reviewVisibiltySelectorSelectedIndex];
                ComboBoxItem reviewVisibiltySelectedSelectorItem = ((ComboBoxItem)(rawReviewVisibiltySelectedSelectorItem));
                object rawReviewVisibiltySelectedSelectorItemContent = reviewVisibiltySelectedSelectorItem.Content;
                string reviewVisibiltySelectedSelectorItemContent = rawReviewVisibiltySelectedSelectorItemContent.ToString();
                string rawIsFreeProduct = "false";
                object rawReviewGameFreeCheckBoxIsChecked = reviewGameFreeCheckBox.IsChecked;
                bool reviewGameFreeCheckBoxIsChecked = ((bool)(rawReviewGameFreeCheckBoxIsChecked));
                if (reviewGameFreeCheckBoxIsChecked)
                {
                    rawIsFreeProduct = "true";
                }
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/add/?id=" + currentUserId + @"&game=" + gameId + @"&hours=" + hours + @"&desc=" + reviewDescBoxContent + @"&comments=" + rawIsCommentsEnabled + @"&visibility=" + reviewVisibiltySelectedSelectorItemContent + @"&free=" + rawIsFreeProduct);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        CreateReviewResponseInfo myobj = (CreateReviewResponseInfo)js.Deserialize(objText, typeof(CreateReviewResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/points/increase/?id=" + currentUserId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        string data = myobj.id;
                                        HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=createReview&data=" + data);
                                        nestedWebRequest.Method = "GET";
                                        nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                        {
                                            using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = nestedReader.ReadToEnd();
                                                UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                status = myNestedObj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    reviewDescBox.Text = "";
                                                    reviewVisibiltySelector.SelectedIndex = 0;
                                                    reviewCommentsPermissionCheckBox.IsChecked = false;
                                                    reviewGameFreeCheckBox.IsChecked = false;
                                                    mainControl.SelectedIndex = 20;
                                                    GetCommunityInfo();
                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }

            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenAddReview (string name)
        {
            mainControl.SelectedIndex = 26;
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> loadedGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            List<Game> results = loadedGames.Where<Game>((Game game) =>
            {
                return game.name == name;
            }).ToList<Game>();
            int resultsCount = results.Count;
            bool isFound = resultsCount >= 1;
            if (isFound)
            {
                Game result = results[0];
                string gameId = result.id;
                reviewGameLabel.Text = name;
                reviewGameLabel.DataContext = result;
            }
        }

        private void OpenLabsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenLabs();
        }

        public void OpenLabs ()
        {
            GetExperiments();
            mainControl.SelectedIndex = 29;
        }

        private void OpenPointsStoreHandler (object sender, MouseButtonEventArgs e)
        {
            OpenPointsStore();
        }

        public void FindFriendsHandler (object sender, RoutedEventArgs e)
        {
            FindFriends();
        }

        public void FindFriends ()
        {
            OpenAddFriendDialog();
        }

        public void OpenPointsStore ()
        {
            mainControl.SelectedIndex = 31;
            GetPoints();
        }

        public void GetPoints ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            int points = user.points;
                            string rawPoints = points.ToString();
                            userPointsLabel.Text = rawPoints;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void OpenStoreHandler (object sender, RoutedEventArgs e)
        {
            OpenStore();
        }

        public void OpenStore ()
        {
            addGamePopup.IsOpen = false;
            OpenPopularGames();
        }

        public void OpenPopularGames ()
        {
            mainControl.SelectedIndex = 32;
            GetPopularGames();
        }

        public void GetPopularGames ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            totalGames = totalGames.OrderByDescending(x => x.likes).ToList<GameResponseInfo>();
                            int gamesCount = totalGames.Count;
                            bool isGamesExists = gamesCount >= 1;
                            if (isGamesExists)
                            {
                                popularGame.Visibility = visible;
                                GameResponseInfo popularGamesItem = totalGames[0];
                                string gameName = popularGamesItem.name;
                                popularGame.BeginInit();
                                popularGame.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + gameName));
                                popularGame.EndInit();
                            }
                            else
                            {
                                popularGame.Visibility = invisible;
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void ToggleWantListSettingsHandler (object sender, RoutedEventArgs e)
        {
            ToggleButton btn = ((ToggleButton)(sender));
            ToggleWantListSettings(btn);
        }

        public void ToggleWantListSettings (ToggleButton btn)
        {
            object isRawChecked = btn.IsChecked;
            bool isChecked = ((bool)(isRawChecked));
            wantListPopup.IsOpen = isChecked;
        }

        private void ToggleSortWantGamesHandler (object sender, SelectionChangedEventArgs e)
        {
            ComboBox list = ((ComboBox)(sender));
            ToggleSortWantGames(list);
        }

        public void ToggleSortWantGames (ComboBox list)
        {
            if (isAppInit)
            {
                int selectedIndex = list.SelectedIndex;
                ItemCollection listItems = list.Items;
                object rawSelectedItem = listItems[selectedIndex];
                ComboBoxItem selectedItem = ((ComboBoxItem)(rawSelectedItem));
                object rawSelectedItemContent = selectedItem.Content;
                string selectedItemContent = rawSelectedItemContent.ToString();
                list.SelectedIndex = 0;
                wantListSelectedItemLabel.Text = selectedItemContent;
            }
        }

        private void OpenPointsHistoryHandler (object sender, MouseButtonEventArgs e)
        {
            OpenPointsHistory();
        }

        public void OpenPointsHistory ()
        {
            mainControl.SelectedIndex = 35;
        }

        public void OpenPointsHistoryFromHelpHandler (object sender, RoutedEventArgs e)
        {
            OpenPointsHistory();
        }

        public void OpenGameInPointsStoreHandler (object sender, RoutedEventArgs e)
        {
            OpenGameInPointsStore();
        }

        public void OpenGameInPointsStore ()
        {
            string currentGameName = gameNameLabel.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> gameResults = totalGames.Where<GameResponseInfo>((GameResponseInfo totalGamesItem) =>
                            {
                                string localGameName = totalGamesItem.name;
                                bool isNamesMatches = localGameName == currentGameName;
                                return isNamesMatches;
                            }).ToList<GameResponseInfo>();
                            int countResults = gameResults.Count;
                            bool isResultsFound = countResults >= 1;
                            if (isResultsFound)
                            {
                                mainControl.SelectedIndex = 34;
                                GetPoints();
                                GameResponseInfo foundedGame = gameResults[0];
                                string gameId = foundedGame._id;
                                string foundedGameName = foundedGame.name;
                                pointStoreGameNameLabel.Text = foundedGameName;
                                pointStoreGameThumbnail.ImageSource = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName));
                                pointsStoreControl.SelectedIndex = 14;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenSmileysHandler (object sender, RoutedEventArgs e)
        {
            OpenSmileys();
        }

        public void OpenSmileys()
        {
            smileys.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isSmileys = type == "smileys";
                                if (isSmileys)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    smileys.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 13;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenChatEffectsHandler (object sender, RoutedEventArgs e)
        {
            OpenChatEffects();
        }

        public void OpenChatEffects ()
        {
            chatEffects.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isChatEffects = type == "chatEffects";
                                if (isChatEffects)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    chatEffects.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 12;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenStickersHandler(object sender, RoutedEventArgs e)
        {
            OpenStickers();
        }

        public void OpenStickers ()
        {
            stickers.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isSticker = type == "sticker";
                                if (isSticker)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    stickers.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 11;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenShowCaseProfileHandler (object sender, RoutedEventArgs e)
        {
            OpenShowCaseProfile();
        }

        public void OpenShowCaseProfile ()
        {
            profileShowCases.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isProfileShowCases = type == "profileShowCases";
                                if (isProfileShowCases)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    profileShowCases.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 10;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenArtistProfilesHandler(object sender, RoutedEventArgs e)
        {
            OpenArtistProfiles();
        }

        public void OpenArtistProfiles ()
        {
            artistProfiles.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isArtistProfiles = type == "artistProfiles";
                                if (isArtistProfiles)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    artistProfiles.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 9;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenGameProfilesHandler (object sender, RoutedEventArgs e)
        {
            OpenGameProfiles();
        }

        public void OpenGameProfiles()
        {
            gameProfiles.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isGameProfiles = type == "gameProfiles";
                                if (isGameProfiles)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    gameProfiles.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 8;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }

        }

        public void OpenSeasonIconHandler (object sender, RoutedEventArgs e)
        {
            OpenSeasonIcon();
        }

        public void OpenSeasonIcon()
        {
            seasonPoints.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isSeasonIcon = type == "seasonIcon";
                                if (isSeasonIcon)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    seasonPoints.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 7;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenBackgroundsHandler(object sender, RoutedEventArgs e)
        {
            OpenBackgrounds();
        }

        public void OpenBackgrounds()
        {
            backgrounds.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isBackground = type == "background";
                                if (isBackground)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    backgrounds.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 6;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenAvatarHandler (object sender, RoutedEventArgs e)
        {
            OpenAvatar();
        }

        public void OpenAvatar()
        {
            accountItems.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isAvatar = type == "avatar";
                                if (isAvatar)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    accountItems.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 5;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenPointsStoreFromHelpHandler (object sender, RoutedEventArgs e)
        {
            OpenPointsStoreFromHelp();
        }

        public void OpenPointsStoreFromHelp ()
        {
            mainControl.SelectedIndex = 34;
            OpenPointsHelp();
        }

        public void OpenPointsStoreItemHandler (object sender, RoutedEventArgs e)
        {
            Border element = ((Border)(sender));
            object elementData = element.DataContext;
            string id = ((string)(elementData));
            OpenPointsStoreItem(id);
        }

        public void OpenPointsStoreItem (string id)
        {

            pointsStorePopup.Placement = PlacementMode.Custom;
            pointsStorePopup.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(PointsStoreItemsPopupPlacementHandler);
            pointsStorePopup.PlacementTarget = this;

            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/get/?id=" + id);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemResponseInfo myobj = (PointsStoreItemResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            PointsStoreItem item = myobj.item;
                            string title = item.title;
                            string desc = item.desc;
                            string type = item.type;
                            int price = item.price;
                            string rawPrice = price.ToString();
                            pointsStorePopupTitleLabel.Text = title;
                            pointsStorePopupDescLabel.Text = desc;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get?id=" + currentUserId);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        User user = myInnerObj.user;
                                        int points = user.points;
                                        string rawPoints = points.ToString();
                                        pointsStorePopupCountLabel.Text = rawPoints;
                                        pointsStorePopupPreview.BeginInit();
                                        pointsStorePopupPreview.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo?id=" + id));
                                        pointsStorePopupPreview.EndInit();
                                        string pointsStorePopupFooterLabelContent = "";
                                        bool isAvatar = type == "avatar";
                                        string newLine = Environment.NewLine;
                                        if (isAvatar)
                                        {
                                            pointsStorePopupFooterLabelContent = "Приобретите этот анимированный аватар за очки Steam. Анимация всегда" + newLine + "воспроизводится в ваших профиле и мини-профиле, а также" + newLine + "ненадолго отображается при смене статуса или отправке сообщения в чате Steam.";
                                        }
                                        pointsStorePopupFooterLabel.Text = pointsStorePopupFooterLabelContent;
                                        string pointsStorePopupNotPayedLabelContent = "";
                                        bool isNotPoints = points < price;
                                        if (isNotPoints)
                                        {
                                            buyPointsStoreItemBtn.Content = @"Как получить очки";
                                            buyPointsStoreItemBtn.DataContext = "not points";
                                            int leftPoints = price - points;
                                            string rawLeftPoints = leftPoints.ToString();
                                            pointsStorePopupNotPayedLabelContent = "Для получения этого предмета не хватает " + rawLeftPoints + " очк.";
                                        }
                                        else
                                        {
                                            buyPointsStoreItemBtn.Content = @"Купить";
                                            buyPointsStoreItemBtn.DataContext = "have points";
                                            string measure = "очков";
                                            pointsStorePopupNotPayedLabelContent = "При покупке предмета будут потрачены " + rawPrice + " " + measure;
                                        }
                                        pointsStorePopupNotPayedLabel.Text = pointsStorePopupNotPayedLabelContent;
                                        pointsStorePopup.IsOpen = true;
                                        buyPointsStoreItemBtn.IsEnabled = true;
                                        pointsStorePopup.DataContext = id;
                                        HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/relations/all");
                                        nestedWebRequest.Method = "GET";
                                        nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                        {
                                            using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = nestedReader.ReadToEnd();
                                                PointsStoreItemRelationsResponseInfo myNestedObj = (PointsStoreItemRelationsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemRelationsResponseInfo));
                                                status = myobj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    List<PointsStoreItemRelation> relations = myNestedObj.relations;
                                                    List<PointsStoreItemRelation> myPayedRelations = relations.Where<PointsStoreItemRelation>((PointsStoreItemRelation relation) =>
                                                    {
                                                        string userId = relation.user;
                                                        string itemId = relation.item;
                                                        bool isMyItem = currentUserId == userId;
                                                        bool isCurrentItem = id == itemId;
                                                        bool isMyPayedItem = isCurrentItem && isMyItem;
                                                        return isMyPayedItem;
                                                    }).ToList<PointsStoreItemRelation>();
                                                    int myPayedRelationsCount = myPayedRelations.Count;
                                                    bool isPayed = myPayedRelationsCount >= 1;
                                                    if (isPayed)
                                                    {
                                                        buyPointsStoreItemBtn.IsEnabled = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenCommunityRewardsHandler(object sender, RoutedEventArgs e)
        {
            OpenCommunityRewards();
        }

        public void OpenCommunityRewards()
        {
            communityRewards.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isAvatar = type == "avatar";
                                if (isAvatar)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    communityRewards.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 4;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenSubjectsSetHandler (object sender, RoutedEventArgs e)
        {
            OpenSubjectsSet();
        }

        public void OpenSubjectsSet()
        {
            subjectsSet.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isSubjectsSet = type == "subjectsSet";
                                if (isSubjectsSet)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    subjectsSet.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 3;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenGameSubjectsHandler (object sender, RoutedEventArgs e)
        {
            OpenGameSubjects();
        }

        public void OpenGameSubjects()
        {
            gameSubjects.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemsResponseInfo myobj = (PointsStoreItemsResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemsResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<PointsStoreItem> items = myobj.items;
                            foreach (PointsStoreItem item in items)
                            {
                                string type = item.type;
                                bool isGameSubject = type == "gameSubject";
                                if (isGameSubject)
                                {
                                    string id = item._id;
                                    string title = item.title;
                                    string desc = item.desc;
                                    int price = item.price;
                                    string rawPrice = price.ToString();
                                    Border element = new Border();
                                    element.Background = System.Windows.Media.Brushes.LightGray;
                                    element.Width = 175;
                                    element.Height = 175;
                                    element.Margin = new Thickness(15);
                                    element.CornerRadius = new CornerRadius(5);
                                    StackPanel elementBody = new StackPanel();
                                    Image elementPhoto = new Image();
                                    elementPhoto.Width = 80;
                                    elementPhoto.Height = 80;
                                    elementPhoto.Margin = new Thickness(15, 5, 15, 5);
                                    elementPhoto.BeginInit();
                                    elementPhoto.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/points/item/photo/?id=" + id));
                                    elementPhoto.EndInit();
                                    elementBody.Children.Add(elementPhoto);
                                    Separator elementSeparator = new Separator();
                                    elementSeparator.BorderBrush = System.Windows.Media.Brushes.Black;
                                    elementSeparator.BorderThickness = new Thickness(1);
                                    elementBody.Children.Add(elementSeparator);
                                    TextBlock elementTitleLabel = new TextBlock();
                                    elementTitleLabel.Text = title;
                                    elementTitleLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementTitleLabel);
                                    TextBlock elementDescLabel = new TextBlock();
                                    elementDescLabel.Text = desc;
                                    elementDescLabel.Margin = new Thickness(15, 5, 15, 5);
                                    elementBody.Children.Add(elementDescLabel);
                                    StackPanel elementPrice = new StackPanel();
                                    elementPrice.HorizontalAlignment = HorizontalAlignment.Right;
                                    elementPrice.Orientation = Orientation.Horizontal;
                                    elementPrice.Margin = new Thickness(0, 5, 0, 5);
                                    PackIcon elementPriceIcon = new PackIcon();
                                    elementPriceIcon.Kind = PackIconKind.Circle;
                                    elementPriceIcon.Width = 15;
                                    elementPriceIcon.Height = 15;
                                    elementPriceIcon.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceIcon);
                                    TextBlock elementPriceLabel = new TextBlock();
                                    elementPriceLabel.Text = rawPrice;
                                    elementPriceLabel.Margin = new Thickness(15, 0, 15, 0);
                                    elementPrice.Children.Add(elementPriceLabel);
                                    elementBody.Children.Add(elementPrice);
                                    element.Child = elementBody;
                                    accountItems.Children.Add(element);
                                    element.DataContext = id;
                                    element.MouseLeftButtonUp += OpenPointsStoreItemHandler;
                                }
                            }
                            pointsStoreControl.SelectedIndex = 2;
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
            }
        }

        public void OpenFavoriteSubjectsHandler(object sender, RoutedEventArgs e)
        {
            OpenFavoriteSubjects();
        }

        public void OpenFavoriteSubjects()
        {
            pointsStoreControl.SelectedIndex = 1;
        }

        public void OpenPointsHelpHandler (object sender, RoutedEventArgs e)
        {
            OpenPointsHelp();
        }

        public void OpenPointsHelp()
        {
            pointsStoreControl.SelectedIndex = 0;
        }

        private void SaveLangSettingsHandler (object sender, RoutedEventArgs e)
        {
            SaveLangSettings();
        }

        public void GetLangSettings ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            Settings currentSettings = loadedContent.settings;
            string currentLang = currentSettings.language;
            ItemCollection langSelectorItems = langSelector.Items;
            foreach (ComboBoxItem langSelectorItem in langSelectorItems)
            {
                object rawSelectedLangData = langSelectorItem.DataContext;
                string selectedLangData = ((string)(rawSelectedLangData));
                bool isLangFound = selectedLangData == currentLang;
                if (isLangFound)
                {
                    int currentLangIndex = langSelectorItems.IndexOf(langSelectorItem);
                    langSelector.SelectedIndex = currentLangIndex;
                    break;
                }
            }
        }

        public void SaveLangSettings ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings updatedSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            int selectedLangIndex = langSelector.SelectedIndex;
            ItemCollection langSelectorItems = langSelector.Items;
            object rawSelectedLang = langSelectorItems[selectedLangIndex];
            ComboBoxItem selectedLang = ((ComboBoxItem)(rawSelectedLang));
            object rawSelectedLangData = selectedLang.DataContext;
            string selectedLangData = ((string)(rawSelectedLangData));
            updatedSettings.language = selectedLangData;
            string savedContent = js.Serialize(new SavedContent
            {
                games = currentGames,
                friends = currentFriends,
                settings = updatedSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            this.Close();
        }

        private void OpenUpdateEmailHandler (object sender, MouseButtonEventArgs e)
        {
            OpenUpdateEmail();
        }

        public void OpenUpdateEmail()
        {
            Random rd = new Random();
            int rand_num = rd.Next(0, 1000);
            string code = rand_num.ToString();
            emailUpdateControl.DataContext = code;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string email = user.login;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/email/set/accept/?id=" + currentUserId + @"&code=" + code + @"&to=" + email);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        mainControl.SelectedIndex = 36;
                                        try
                                        {
                                            MailMessage message = new MailMessage();
                                            SmtpClient smtp = new SmtpClient();
                                            message.From = new System.Net.Mail.MailAddress("glebdyakov2000@gmail.com");
                                            message.To.Add(new System.Net.Mail.MailAddress(email));
                                            string subjectBoxContent = @"Подтверждение аккаунта Office ware game manager";
                                            message.Subject = subjectBoxContent;
                                            message.IsBodyHtml = true; //to make message body as html  
                                            string messageBodyBoxContent = "<h3>Здравствуйте, " + email + "!</h3><p>" + code + "</p><p>Код для смены E-mail вашего аккаунта Office ware game manager</p>";
                                            message.Body = messageBodyBoxContent;
                                            smtp.Port = 587;
                                            smtp.Host = "smtp.gmail.com"; //for gmail host  
                                            smtp.EnableSsl = true;
                                            smtp.UseDefaultCredentials = false;
                                            smtp.Credentials = new NetworkCredential("glebdyakov2000@gmail.com", "ttolpqpdzbigrkhz");
                                            smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                                            smtp.Send(message);
                                        }
                                        catch (Exception)
                                        {
                                            MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenUpdatePasswordHandler (object sender, MouseButtonEventArgs e)
        {
            OpenUpdatePassword();
        }

        public void OpenUpdatePassword ()
        {
            Random rd = new Random();
            int rand_num = rd.Next(0, 1000);
            string code = rand_num.ToString();
            passwordUpdateControl.DataContext = code;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string email = user.login;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/password/set/accept/?id=" + currentUserId + @"&code=" + code + @"&to=" + email);
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        mainControl.SelectedIndex = 37;

                                        try
                                        {
                                            MailMessage message = new MailMessage();
                                            SmtpClient smtp = new SmtpClient();
                                            message.From = new System.Net.Mail.MailAddress("glebdyakov2000@gmail.com");
                                            message.To.Add(new System.Net.Mail.MailAddress(email));
                                            string subjectBoxContent = @"Подтверждение аккаунта Office ware game manager";
                                            message.Subject = subjectBoxContent;
                                            message.IsBodyHtml = true; //to make message body as html  
                                            string messageBodyBoxContent = "<h3>Здравствуйте, " + email + "!</h3><p>" + code + "</p><p>Код для смены пароля вашего аккаунта Office ware game manager</p>";
                                            message.Body = messageBodyBoxContent;
                                            smtp.Port = 587;
                                            smtp.Host = "smtp.gmail.com"; //for gmail host  
                                            smtp.EnableSsl = true;
                                            smtp.UseDefaultCredentials = false;
                                            smtp.Credentials = new NetworkCredential("glebdyakov2000@gmail.com", "ttolpqpdzbigrkhz");
                                            smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                                            smtp.Send(message);
                                        }
                                        catch (Exception)
                                        {
                                            MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void AcceptEmailUpdateHandler (object sender, RoutedEventArgs e)
        {
            AcceptEmailUpdate();
        }

        public void AcceptEmailUpdate()
        {
            object emailUpdateControlData = emailUpdateControl.DataContext;
            bool isDataExists = emailUpdateControlData != null;
            if (isDataExists)
            {
                string code = ((string)(emailUpdateControlData));
                string emailCodeBoxContent = emailCodeBox.Text;
                bool isCodeMatches = code == emailCodeBoxContent;
                if (isCodeMatches)
                {
                    emailUpdateControl.SelectedIndex = 1;
                }
                else
                {
                    MessageBox.Show("Код введен неправильно", "Ошибка");
                }
            }
        }

        private void AcceptPasswordUpdateHandler(object sender, RoutedEventArgs e)
        {
            AcceptPasswordUpdate();
        }

        public void AcceptPasswordUpdate()
        {
            object passwordUpdateControlData = passwordUpdateControl.DataContext;
            bool isDataExists = passwordUpdateControlData != null;
            if (isDataExists)
            {
                string code = ((string)(passwordUpdateControlData));
                string passwordCodeBoxContent = passwordCodeBox.Text;
                bool isCodeMatches = code == passwordCodeBoxContent;
                if (isCodeMatches)
                {
                    passwordUpdateControl.SelectedIndex = 1;
                }
                else
                {
                    MessageBox.Show("Код введен неправильно", "Ошибка");
                }
            }
        }

        public void EmailUpdateHandler (object sender, RoutedEventArgs e)
        {
            EmailUpdate();
        }

        public void EmailUpdate ()
        {
            string updatedEmailBoxContent = updatedEmailBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/email/set/?id=" + currentUserId + @"&email=" + updatedEmailBoxContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainControl.SelectedIndex = 0;
                            emailUpdateControl.SelectedIndex = 0;
                            MessageBox.Show("E-mail был обновлен", "Внимание");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void PasswordUpdateHandler(object sender, RoutedEventArgs e)
        {
            PasswordUpdate();
        }

        public void PasswordUpdate()
        {
            string updatedPasswordBoxContent = updatedPasswordBox.Password;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/password/set/?id=" + currentUserId + @"&password=" + updatedPasswordBoxContent);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainControl.SelectedIndex = 0;
                            passwordUpdateControl.SelectedIndex = 0;
                            MessageBox.Show("Пароль был обновлен", "Внимание");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenStoreSettingsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenStoreSettings();
        }

        public void OpenStoreSettings()
        {

            mainControl.SelectedIndex = 15;
            
            // accountSettingsControl.SelectedIndex = 1;
            SelectAccountSettingsItem(1);
        }

        private void ToggleScreenShotsManagementHandler (object sender, RoutedEventArgs e)
        {
            ToggleScreenShotsManagement();
        }

        public void ToggleScreenShotsDisplayHandler (object sender, RoutedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            ToggleScreenShotsDisplay(selector);
        }

        public void ToggleScreenShotsDisplay (ComboBox selector)
        {
            if (isAppInit)
            {
                int selectedIndex = selector.SelectedIndex;
                bool isWall = selectedIndex == 0;

                // screenShotsContainer.Children.RemoveAt(2);
                UIElementCollection screenShotsContainerChildren = screenShotsContainer.Children;
                // UIElement rawScreenShotsControl = screenShotsContainerChildren[2];
                UIElement rawScreenShotsControl = screenShotsContainerChildren[0];
                TabControl screenShotsControl = ((TabControl)(rawScreenShotsControl));
                // int screenShotsControlSelectedIndex = screenShotsControl.SelectedIndex;
                int screenShotsControlSelectedIndex = 0;
                ItemCollection screenShotsControlItems = screenShotsControl.Items;
                object rawScreenShotsControlSelectedItem = screenShotsControlItems[screenShotsControlSelectedIndex];
                TabItem screenShotsControlSelectedItem = ((TabItem)(rawScreenShotsControlSelectedItem));
                // screenShotsControlSelectedItem.Content = null;
                object rawScreenShotsControlSelectedItemContent = screenShotsControlSelectedItem.Content;
                StackPanel screenShotsControlSelectedItemContent = ((StackPanel)(rawScreenShotsControlSelectedItemContent));
                UIElementCollection screenShotsControlSelectedItemContentChildren = screenShotsControlSelectedItemContent.Children;
                screenShotsControlSelectedItemContent.Children.RemoveAt(2);
                // UIElement container = ((UIElement)(rawScreenShotsControlSelectedItemContent));

                if (isWall)
                {
                    StackPanel container = new StackPanel();
                    container.Margin = new Thickness(25);

                    // screenShotsContainer.Children.Add(container);
                    // screenShotsControlSelectedItem.Content = container;
                    screenShotsControlSelectedItemContent.Children.Add(container);
                }
                else
                {
                    WrapPanel container = new WrapPanel();
                    container.Margin = new Thickness(25);

                    // screenShotsContainer.Children.Add(container);
                    // screenShotsControlSelectedItem.Content = container;
                    screenShotsControlSelectedItemContent.Children.Add(container);

                }
                GetScreenShots("", false);
            }
        }

        public void ToggleScreenShotsManagement ()
        {

            UIElementCollection screenShotsContainerChildren = screenShotsContainer.Children;
            // UIElement container = screenShotsContainerChildren[2];
            // UIElement rawScreenShotsControl = screenShotsContainerChildren[2];
            UIElement rawScreenShotsControl = screenShotsContainerChildren[0];
            TabControl screenShotsControl = ((TabControl)(rawScreenShotsControl));
            // int screenShotsControlSelectedIndex = screenShotsControl.SelectedIndex;
            int screenShotsControlSelectedIndex = 0;
            ItemCollection screenShotsControlItems = screenShotsControl.Items;
            object rawScreenShotsControlSelectedItem = screenShotsControlItems[screenShotsControlSelectedIndex];
            TabItem screenShotsControlSelectedItem = ((TabItem)(rawScreenShotsControlSelectedItem));
            object rawScreenShotsControlSelectedItemContent = screenShotsControlSelectedItem.Content;
            // UIElement container = ((UIElement)(rawScreenShotsControlSelectedItemContent));
            StackPanel screenShotsControlSelectedItemContent = ((StackPanel)(rawScreenShotsControlSelectedItemContent));
            UIElementCollection screenShotsControlSelectedItemContentChildren = screenShotsControlSelectedItemContent.Children;
            UIElement container = screenShotsControlSelectedItemContentChildren[2];

            bool isWall = container is StackPanel;
            
            Visibility screenShotsManagementVisibility = screenShotsManagement.Visibility;
            bool isVisible = screenShotsManagementVisibility == visible;
            if (isVisible)
            {
                screenShotsManagement.Visibility = invisible;
                if (isWall)
                {
                    StackPanel wallContainer = ((StackPanel)(container));
                    UIElementCollection wallContainerChildren = wallContainer.Children;
                    foreach (UIElement wallContainerChild in wallContainerChildren)
                    {
                        Canvas screenShot = ((Canvas)(wallContainerChild));
                        UIElementCollection screenShotChildren = screenShot.Children;
                        UIElement rawCheckBox = screenShotChildren[0];
                        CheckBox checkBox = ((CheckBox)(rawCheckBox));
                        checkBox.Visibility = invisible;
                    }
                }
                else
                {
                    WrapPanel rowContainer = ((WrapPanel)(container));
                    UIElementCollection rowContainerChildren = rowContainer.Children;
                    foreach (UIElement rowContainerChild in rowContainerChildren)
                    {
                        Canvas screenShot = ((Canvas)(rowContainerChild));
                        UIElementCollection screenShotChildren = screenShot.Children;
                        UIElement rawCheckBox = screenShotChildren[0];
                        CheckBox checkBox = ((CheckBox)(rawCheckBox));
                        checkBox.Visibility = invisible;
                    }
                }
            }
            else
            {
                screenShotsManagement.Visibility = visible;
                if (isWall)
                {
                    StackPanel wallContainer = ((StackPanel)(container));
                    UIElementCollection wallContainerChildren = wallContainer.Children;
                    foreach (UIElement wallContainerChild in wallContainerChildren)
                    {
                        Canvas screenShot = ((Canvas)(wallContainerChild));
                        UIElementCollection screenShotChildren = screenShot.Children;
                        UIElement rawCheckBox = screenShotChildren[0];
                        CheckBox checkBox = ((CheckBox)(rawCheckBox));
                        checkBox.Visibility = visible;
                    }
                }
                else
                {
                    WrapPanel rowContainer = ((WrapPanel)(container));
                    UIElementCollection rowContainerChildren = rowContainer.Children;
                    foreach (UIElement rowContainerChild in rowContainerChildren)
                    {
                        Canvas screenShot = ((Canvas)(rowContainerChild));
                        UIElementCollection screenShotChildren = screenShot.Children;
                        UIElement rawCheckBox = screenShotChildren[0];
                        CheckBox checkBox = ((CheckBox)(rawCheckBox));
                        checkBox.Visibility = visible;
                    }
                }
            }
        }

        private void OpenAboutManagerDialogHandler (object sender, RoutedEventArgs e)
        {
            OpenAboutManagerDialog();
        }

        public void OpenAboutManagerDialog ()
        {
            Dialogs.AboutManagerDialog dialog = new Dialogs.AboutManagerDialog();
            dialog.Show();
        }

        private void OpenSupportServiceHandler (object sender, RoutedEventArgs e)
        {
            OpenSupportService();
        }

        public void OpenSupportService ()
        {
            helpFeedBack.Visibility = invisible;
            helpControl.SelectedIndex = 0;
            mainControl.SelectedIndex = 40;
        }

        private void SetEditProfileTabFromHelpHandler (object sender, RoutedEventArgs e)
        {
            DockPanel item = ((DockPanel)(sender));
            object itemData = item.DataContext;
            string rawIndex = itemData.ToString();
            int index = Int32.Parse(rawIndex);
            SetEditProfileTabFromHelp(index);
        }

        public void SetEditProfileTabFromHelp (int index)
        {
            mainControl.SelectedIndex = 2;
            SetEditProfileTab(index);
        }

        private void OpenLawInfoHandler (object sender, RoutedEventArgs e)
        {
            OpenLawInfo();
        }

        public void OpenLawInfo ()
        {
            mainControl.SelectedIndex = 42;
        }

        private void OpenSubAggermentHandler (object sender, RoutedEventArgs e)
        {
            OpenSubAggerment();
        }

        public void OpenSubAggerment ()
        {
            mainControl.SelectedIndex = 43;
        }

        private void SelectGamesForFamilyViewOrSetAddressHandler (object sender, RoutedEventArgs e)
        {
            SelectGamesForFamilyViewOrSetAddress();
        }

        public void SelectGamesForFamilyViewOrSetAddress ()
        {
            object rawIsSelectedGames = familyViewSelectedGamesRadionBtn.IsChecked;
            bool isSelectedGames = ((bool)(rawIsSelectedGames));
            if (isSelectedGames)
            {
                SelectGamesForFamilyView();
            }
            else
            {
                SetFamilyViewAddress();
            }
        }

        public void SetFamilyViewAddressHandler (object sender, RoutedEventArgs e)
        {
            SetFamilyViewAddress();
        }

        public void SelectGamesForFamilyView ()
        {
            familyViewManagementControl.SelectedIndex = 1;
            GetFamilyViewGames();
        }

        public void GetFamilyViewGames ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            familyViewGames.RowDefinitions.Clear();
            familyViewGames.Children.Clear();
            foreach (Game game in currentGames)
            {
                string gameId = game.id;
                string gameName = game.name;
                string insensitiveCaseGameName = gameName.ToLower();
                string keywords = familyViewGamesBox.Text;
                string insensitiveCaseKeywords = keywords.ToLower();
                bool isKeywordsMatch = insensitiveCaseGameName.Contains(insensitiveCaseKeywords);
                int insensitiveCaseKeywordsLength = insensitiveCaseKeywords.Length;
                bool isFilterDisabled = insensitiveCaseKeywordsLength < 0; ;
                bool isAddGame = isKeywordsMatch || isFilterDisabled;
                if (isAddGame)
                {
                    RowDefinition row = new RowDefinition();
                    familyViewGames.RowDefinitions.Add(row);
                    RowDefinitionCollection rows = familyViewGames.RowDefinitions;
                    int countRows = rows.Count;
                    int lastRowIndex = countRows - 1;
                    CheckBox checkBox = new CheckBox();
                    familyViewGames.Children.Add(checkBox);
                    Grid.SetRow(checkBox, lastRowIndex);
                    Grid.SetColumn(checkBox, 0);
                    TextBlock gameNameLabel = new TextBlock();
                    gameNameLabel.DataContext = gameId;
                    gameNameLabel.Text = gameName;
                    familyViewGames.Children.Add(gameNameLabel);
                    Grid.SetRow(gameNameLabel, lastRowIndex);
                    Grid.SetColumn(gameNameLabel, 1);
                }
            }
        }

        public void SetFamilyViewAddress ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string email = user.login;
                            familyViewRecoveryEmailBox.Text = email;
                            familyViewManagementControl.SelectedIndex = 2;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void SetFamilyViewPinCodeHandler (object sender, RoutedEventArgs e)
        {
            SetFamilyViewPinCode();
        }

        public void SetFamilyViewPinCode ()
        {
            familyViewPinCodeErrorsLabel.Visibility = invisible;
            familyViewManagementControl.SelectedIndex = 3;
        }

        private void CheckFamilyViewPinCodeHandler (object sender, RoutedEventArgs e)
        {
            CheckFamilyViewPinCode();
        }

        public void CheckFamilyViewPinCode ()
        {
            string familyViewRecoveryEmailBoxContent = familyViewRecoveryEmailBox.Text;
            string familyViewPinCodeBoxContent = familyViewPinCodeBox.Password;
            string familyViewPinCodeConfirmBoxContent = familyViewPinCodeConfirmBox.Password;
            bool isCodeMatch = familyViewPinCodeBoxContent == familyViewPinCodeConfirmBoxContent;
            if (isCodeMatch)
            {

                Random rd = new Random();
                int rand_num = rd.Next(0, 1000);
                string secret = rand_num.ToString();
                familyViewManagementControl.DataContext = secret;
                try
                {
                    MailMessage message = new MailMessage();
                    SmtpClient smtp = new SmtpClient();
                    message.From = new System.Net.Mail.MailAddress("glebdyakov2000@gmail.com");
                    message.To.Add(new System.Net.Mail.MailAddress(familyViewRecoveryEmailBoxContent));
                    string subjectBoxContent = @"Ваш аккаунт Office ware game manager: активация семейного просмотра";
                    message.Subject = subjectBoxContent;
                    message.IsBodyHtml = true; //to make message body as html  
                    string messageBodyBoxContent = "<h3>Здравствуйте, " + familyViewRecoveryEmailBoxContent + "!</h3><p>Мы получили запрос на включение семейного просмотра на вашем аккаунте Steam.</p><p>Вот ваш код:</p><p>" + secret + "</p>";
                    message.Body = messageBodyBoxContent;
                    smtp.Port = 587;
                    smtp.Host = "smtp.gmail.com"; //for gmail host  
                    smtp.EnableSsl = true;
                    smtp.UseDefaultCredentials = false;
                    smtp.Credentials = new NetworkCredential("glebdyakov2000@gmail.com", "ttolpqpdzbigrkhz");
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                    smtp.Send(message);

                    string familyViewRecoveryEmailLabelContent = @"Чтобы включить семейный просмотр на вашем аккаунте, введите код,&#10;отправленный на адресс эл. почты " + familyViewRecoveryEmailBoxContent + ".";
                    familyViewRecoveryEmailLabel.Text = familyViewRecoveryEmailLabelContent;
                    familyViewManagementControl.SelectedIndex = 4;

                }
                catch (Exception)
                {
                    MessageBox.Show("Произошла ошибка при отправке письма", "Ошибка");
                }

            }
            else
            {
                familyViewPinCodeErrorsLabel.Visibility = visible;
            }
        }

        private void CheckFamilyViewSecretCodeHandler (object sender, RoutedEventArgs e)
        {
            CheckFamilyViewSecretCode();
        }

        public void CheckFamilyViewSecretCode ()
        {
            object secretData = familyViewManagementControl.DataContext;
            string secret = ((string)(secretData));
            string familyViewSecretCodeBoxContent = familyViewSecretCodeBox.Password;
            bool isSecretMatch = familyViewSecretCodeBoxContent == secret;
            if (isSecretMatch)
            {
                Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                JavaScriptSerializer js = new JavaScriptSerializer();
                string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                List<Game> currentGames = loadedContent.games;
                List<FriendSettings> currentFriends = loadedContent.friends;
                Settings updatedSettings = loadedContent.settings;
                List<string> currentCollections = loadedContent.collections;
                Notifications currentNotifications = loadedContent.notifications;
                List<string> currentCategories = loadedContent.categories; 
                List<string> currentRecentChats = loadedContent.recentChats;
                Recommendations currentRecommendations = loadedContent.recommendations;
                string currentLogoutDate = loadedContent.logoutDate;
                List<string> currentSections = loadedContent.sections;
                updatedSettings.familyView = true;
                string familyViewPinCodeBoxContent = familyViewPinCodeBox.Password;
                updatedSettings.familyViewCode = familyViewPinCodeBoxContent;
                List<string> selectedGames = new List<string>();
                foreach (UIElement familyViewGameItem in familyViewGames.Children)
                {
                    bool isCheckBox = familyViewGameItem is CheckBox;
                    if (isCheckBox)
                    {
                        CheckBox checkBox = ((CheckBox)(familyViewGameItem));
                        object rawIsChecked = checkBox.IsChecked;
                        bool isChecked = ((bool)(rawIsChecked));
                        if (isChecked)
                        {
                            int checkBoxIndex = familyViewGames.Children.IndexOf(familyViewGameItem);
                            int labelIndex = checkBoxIndex + 1;
                            UIElement label = familyViewGames.Children[labelIndex];
                            TextBlock gameNameLabel = ((TextBlock)(label));
                            object labelData = gameNameLabel.DataContext;
                            string id = ((string)(labelData));
                            selectedGames.Add(id);
                        }
                    }
                }
                updatedSettings.familyViewGames = selectedGames;
                string savedContent = js.Serialize(new SavedContent
                {
                    games = currentGames,
                    friends = currentFriends,
                    settings = updatedSettings,
                    collections = currentCollections,
                    notifications = currentNotifications,
                    categories = currentCategories,
                    recentChats = currentRecentChats,
                    recommendations = currentRecommendations,
                    logoutDate = currentLogoutDate,
                    sections = currentSections
                });
                File.WriteAllText(saveDataFilePath, savedContent);
                GetFamilyView();
                familyViewManagementControl.SelectedIndex = 5;
            }
        }

        private void ToggleFamilyViewModeHandler (object sender, RoutedEventArgs e)
        {
            ToggleFamilyViewMode();
        }

        public void ShowFamilyViewPopupHandler(object sender, RoutedEventArgs e)
        {
            ShowFamilyViewPopup();
        }

        public void ShowFamilyViewPopup ()
        {
            familyViewPopup.IsOpen = true;
            if (isFamilyViewMode)
            {
                familyViewPopupControl.SelectedIndex = 0;
            }
            else
            {
                familyViewPopupControl.SelectedIndex = 1;
            }
        }

        public void ToggleFamilyViewMode ()
        {
            if (isFamilyViewMode)
            {
                Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                JavaScriptSerializer js = new JavaScriptSerializer();
                string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                Settings currentSettings = loadedContent.settings;
                string familyViewCode = currentSettings.familyViewCode;
                string familyViewPopupCodeBoxContent = familyViewPopupCodeBox.Text;
                bool isCodeMatch = familyViewPopupCodeBoxContent == familyViewCode;
                if (isCodeMatch)
                {
                    isFamilyViewMode = !isFamilyViewMode;
                    if (isFamilyViewMode)
                    {
                        familyViewPopupControl.SelectedIndex = 0;
                        familyViewIcon.Foreground = System.Windows.Media.Brushes.Green;
                    }
                    else
                    {
                        familyViewPopupControl.SelectedIndex = 1;
                        familyViewIcon.Foreground = System.Windows.Media.Brushes.Orange;
                    }
                    CloseFamilyViewPopup();
                }
            }
            else
            {
                isFamilyViewMode = !isFamilyViewMode;
                if (isFamilyViewMode)
                {
                    familyViewPopupControl.SelectedIndex = 0;
                    familyViewIcon.Foreground = System.Windows.Media.Brushes.Green;
                }
                else
                {
                    familyViewPopupControl.SelectedIndex = 1;
                    familyViewIcon.Foreground = System.Windows.Media.Brushes.Orange;
                }
                CloseFamilyViewPopup();
            }
        }

        private void CloseFamilyViewPopupHandler (object sender, RoutedEventArgs e)
        {
            CloseFamilyViewPopup();
        }

        public void CloseFamilyViewPopup ()
        {
            familyViewPopup.IsOpen = false;
        }

        private void DisableFamilyViewHandler (object sender, RoutedEventArgs e)
        {
            DisableFamilyView();
        }

        public void DisableFamilyView ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings updatedSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories; 
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            updatedSettings.familyView = false;
            string familyViewPinCodeBoxContent = "";
            updatedSettings.familyViewCode = familyViewPinCodeBoxContent;
            string savedContent = js.Serialize(new SavedContent
            {
                games = currentGames,
                friends = currentFriends,
                settings = updatedSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = currentSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            GetFamilyView();
            familyViewManagementControl.SelectedIndex = 0;
        }

        private void OpenFamilyViewDisableHandler (object sender, RoutedEventArgs e)
        {
            OpenFamilyViewDisable();
        }

        public void OpenFamilyViewDisable ()
        {
            familyViewManagementControl.SelectedIndex = 6;
        }

        private void OpenIncreaseAmountHandler (object sender, MouseButtonEventArgs e)
        {
            OpenIncreaseAmount();
        }

        public void OpenIncreaseAmount ()
        {
            mainControl.SelectedIndex = 45;
            GetAmountInfo();
        }

        public void GetAmountInfo()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            int amount = user.amount;
                            string rawAmount = amount.ToString();
                            string measure = "руб.";
                            string amountLabelContent = rawAmount + " " + measure;
                            amountLabel.Text = amountLabelContent;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void IncreaseAmountHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string amount = btnData.ToString();
            // string rawAmount = btnData.ToString();
            // int amount = Int32.Parse(rawAmount);
            IncreaseAmount(amount);
        }

        public void IncreaseAmount (string amount)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/amount/increase/?id=" + currentUserId + @"&amount=" + amount);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            GetAmountInfo();
                            MessageBox.Show("Счет был пополнен.", "Внимание");
                        }
                        else
                        {
                            MessageBox.Show("Не удалось пополнить счет.", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void RefreshFamilyViewGamesHandler (object sender, TextChangedEventArgs e)
        {
            RefreshFamilyViewGames();
        }

        public void RefreshFamilyViewGames ()
        {
            GetFamilyViewGames();
        }

        public void OpenAccountDataHandler (object sender, RoutedEventArgs e)
        {
            OpenAccountData();
        }

        public void OpenAccountData ()
        {
            mainControl.SelectedIndex = 68;
        }

        public void OpenTradeHistoryHandler (object sender, RoutedEventArgs e)
        {
            OpenTradeHistory();
        }

        public void OpenTradeHistory ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string userName = user.name;
                            tradeHistoryUserNameLabel.Text = userName;
                            tradeHistoryUserAvatar.BeginInit();
                            tradeHistoryUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));
                            tradeHistoryUserAvatar.EndInit();
                            mainControl.SelectedIndex = 69;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenUpdatePhoneHandler (object sender, RoutedEventArgs e)
        {
            OpenUpdatePhone();
        }

        public void OpenUpdatePhone ()
        {
            mainControl.SelectedIndex = 46;
        }

        private void TogglePhoneCountryCodeHandler (object sender, SelectionChangedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            ItemCollection selectorItems = selector.Items;
            int selectedIndex = selector.SelectedIndex;
            object selectedItem = selectorItems[selectedIndex];
            ComboBoxItem selectedCountryCodeItem = ((ComboBoxItem)(selectedItem));
            object selectedCountryCodeItemData = selectedCountryCodeItem.DataContext;
            string countryCode = selectedCountryCodeItemData.ToString();
            TogglePhoneCountryCode(countryCode);
        }

        public void TogglePhoneCountryCode (string countryCode)
        {
            if (isAppInit)
            {
                phoneBox.Text = countryCode;
                string phoneFormatLabelContent = countryCode + "9123456789";
                phoneFormatLabel.Text = phoneFormatLabelContent;
            }
        }

        private void UpdatePhoneHandler (object sender, RoutedEventArgs e)
        {
            UpdatePhone();
        }

        public void UpdatePhone ()
        {
            string phone = phoneBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/phone/set/?id=" + currentUserId + @"&phone=" + phone);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            GetAccountSettings();
                            MessageBox.Show("Номер телефона был обновлен.", "Внимание");
                        }
                        else
                        {
                            MessageBox.Show("Не удалось обновить номер телефона.", "Ошибка");
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void CancelUpdatePhoneHandler (object sender, RoutedEventArgs e)
        {
            CancelUpdatePhone();
        }

        public void CancelUpdatePhone ()
        {
            phoneBox.Text = "";
        }

        private void OpenEmailSettingsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenEmailSettings();
        }

        public void OpenEmailSettings ()
        {
            GetEmailSettings();
            mainControl.SelectedIndex = 47;
        }

        public void GetEmailSettings ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            string email = user.login;
                            string emailSettingsLoginLabelContent = "НАСТРОЙКИ РАССЫЛКИ ДЛЯ " + email + ":";
                            emailSettingsLoginLabel.Text = emailSettingsLoginLabelContent;
                            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                            js = new JavaScriptSerializer();
                            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                            Notifications currentNotifications = loadedContent.notifications;
                            List<string> currentCategories = loadedContent.categories;
                            bool isNotificationsEnabled = currentNotifications.isNotificationsEnabled;
                            if (isNotificationsEnabled)
                            {
                                notificationsEnabledCheckBox.IsChecked = isNotificationsEnabled;
                            }
                            else
                            {
                                bool isNotificationsDisabled = !isNotificationsEnabled;
                                notificationsDisabledCheckBox.IsChecked = isNotificationsDisabled;
                            }
                            notificationsProductFromWantListWithDiscountCheckBox.IsChecked = currentNotifications.notificationsProductFromWantListWithDiscount;
                            notificationsProductFromWantListUpdateAcccessCheckBox.IsChecked = currentNotifications.notificationsProductFromWantListUpdateAcccess;
                            notificationsProductFromSubsOrFavoritesUpdateAcccessCheckBox.IsChecked = currentNotifications.notificationsProductFromSubsOrFavoritesUpdateAcccess;
                            notificationsProductFromDeveloperUpdateAcccessCheckBox.IsChecked = currentNotifications.notificationsProductFromDeveloperUpdateAcccess;
                            notificationsStartYearlyDiscountCheckBox.IsChecked = currentNotifications.notificationsStartYearlyDiscount;
                            notificationsGroupUpdateGameReviewCheckBox.IsChecked = currentNotifications.notificationsGroupUpdateGameReview;
                            notificationsUpdateIconCheckBox.IsChecked = currentNotifications.notificationsUpdateIcon;
                            notificationsUpdateGamesCheckBox.IsChecked = currentNotifications.notificationsUpdateGames;
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void RejectEmailSubsHandler (object sender, RoutedEventArgs e)
        {
            RejectEmailSubs();
        }

        public void RejectEmailSubs ()
        {
            if (isAppInit)
            {
                notificationsProductFromWantListWithDiscountCheckBox.IsEnabled = false;
                notificationsProductFromWantListUpdateAcccessCheckBox.IsEnabled = false;
                notificationsProductFromSubsOrFavoritesUpdateAcccessCheckBox.IsEnabled = false;
                notificationsProductFromDeveloperUpdateAcccessCheckBox.IsEnabled = false;
                notificationsStartYearlyDiscountCheckBox.IsEnabled = false;
                notificationsGroupUpdateGameReviewCheckBox.IsEnabled = false;
                notificationsUpdateIconCheckBox.IsEnabled = false;
                notificationsUpdateGamesCheckBox.IsEnabled = false;
            }
        }

        private void AcceptEmailSubsHandler (object sender, RoutedEventArgs e)
        {
            AcceptEmailSubs();
        }

        public void AcceptEmailSubs()
        {
            if (isAppInit)
            {
                notificationsProductFromWantListWithDiscountCheckBox.IsEnabled = true;
                notificationsProductFromWantListUpdateAcccessCheckBox.IsEnabled = true;
                notificationsProductFromSubsOrFavoritesUpdateAcccessCheckBox.IsEnabled = true;
                notificationsProductFromDeveloperUpdateAcccessCheckBox.IsEnabled = true;
                notificationsStartYearlyDiscountCheckBox.IsEnabled = true;
                notificationsGroupUpdateGameReviewCheckBox.IsEnabled = true;
                notificationsUpdateIconCheckBox.IsEnabled = true;
                notificationsUpdateGamesCheckBox.IsEnabled = true;
            }
        }

        private void SaveEmailSettigsHandler(object sender, RoutedEventArgs e)
        {
            SaveEmailSettigs();
        }

        public void SaveEmailSettigs ()
        {
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> currentFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications updatedNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> currentSections = loadedContent.sections;
            updatedNotifications.isNotificationsEnabled = ((bool)(notificationsEnabledCheckBox.IsChecked));
            updatedNotifications.notificationsProductFromWantListWithDiscount = ((bool)(notificationsProductFromWantListWithDiscountCheckBox.IsChecked));
            updatedNotifications.notificationsProductFromWantListUpdateAcccess = ((bool)(notificationsProductFromWantListUpdateAcccessCheckBox.IsChecked));
            updatedNotifications.notificationsProductFromSubsOrFavoritesUpdateAcccess = ((bool)(notificationsProductFromSubsOrFavoritesUpdateAcccessCheckBox.IsChecked));
            updatedNotifications.notificationsProductFromDeveloperUpdateAcccess = ((bool)(notificationsProductFromDeveloperUpdateAcccessCheckBox.IsChecked));
            updatedNotifications.notificationsStartYearlyDiscount = ((bool)(notificationsStartYearlyDiscountCheckBox.IsChecked));
            updatedNotifications.notificationsGroupUpdateGameReview = ((bool)(notificationsGroupUpdateGameReviewCheckBox.IsChecked));
            updatedNotifications.notificationsUpdateIcon = ((bool)(notificationsUpdateIconCheckBox.IsChecked));
            updatedNotifications.notificationsUpdateGames = ((bool)(notificationsUpdateGamesCheckBox.IsChecked));
            string rawDiscountValue = "true";
            bool notificationsStartYearlyDiscount = updatedNotifications.notificationsStartYearlyDiscount;
            if (notificationsStartYearlyDiscount)
            {
                rawDiscountValue = "true";
            }
            else
            {
                rawDiscountValue = "false";
            }
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/user/discount/set/?id=" + currentUserId + @"&value=" + rawDiscountValue);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        PointsStoreItemResponseInfo myobj = (PointsStoreItemResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            string savedContent = js.Serialize(new SavedContent
                            {
                                games = currentGames,
                                friends = currentFriends,
                                settings = currentSettings,
                                collections = currentCollections,
                                notifications = updatedNotifications,
                                categories = currentCategories,
                                recentChats = currentRecentChats,
                                recommendations = currentRecommendations,
                                logoutDate = currentLogoutDate,
                                sections = currentSections
                            });
                            File.WriteAllText(saveDataFilePath, savedContent);

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        private void OpenAddPaymentVariantHandler (object sender, MouseButtonEventArgs e)
        {
            OpenAddPaymentVariant();
        }

        public void OpenAddPaymentVariant ()
        {
            mainControl.SelectedIndex = 48;
        }

        private void ClosePointsStorePopupHandler (object sender, RoutedEventArgs e)
        {
            ClosePointsStorePopup();
        }

        public void ClosePointsStorePopup ()
        {
            pointsStorePopup.IsOpen = false;
        }

        private void BuyPointsStoreItemHandler (object sender, RoutedEventArgs e)
        {
            BuyPointsStoreItem();
        }

        public void BuyPointsStoreItem ()
        {
            object pointsStorePopupData = pointsStorePopup.DataContext;
            string id = ((string)(pointsStorePopupData));
            object rawBtnData = buyPointsStoreItemBtn.DataContext;
            string btnData = ((string)(rawBtnData));
            bool isCanBuy = btnData == "have points";
            if (isCanBuy)
            {
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/relations/get/?id=" + id);
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            PointsStoreItemResponseInfo myobj = (PointsStoreItemResponseInfo)js.Deserialize(objText, typeof(PointsStoreItemResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                PointsStoreItem item = myobj.item;
                                int price = item.price;
                                string rawPrice = price.ToString();
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/points/items/relations/add/?id=" + id + @"&user=" + currentUserId + @"&price=" + rawPrice);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myobj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            MessageBox.Show("Спасибо за приобретение!", "Внимание");
                                        }
                                        else
                                        {
                                            MessageBox.Show("Не удалось купить товар!", "Внимание");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            else
            {
                OpenPointsHelp();
            }
            ClosePointsStorePopup();
        }

        private void GetSearchedFriendsHandler (object sender, TextChangedEventArgs e)
        {
            GetSearchedFriends(searchedFriendsBox);
        }

        public void GetSearchedFriends (TextBox localSearchedFriendsBox)
        {
            searchedFriends.Children.Clear();
            try
            {
                // HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/all");
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UsersResponseInfo myobj = (UsersResponseInfo)js.Deserialize(objText, typeof(UsersResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<string> usersIds = new List<string>();
                            List<User> localUsers = myobj.users;
                            foreach (User user in localUsers)
                            {
                                string userId = user._id;
                                bool isMe = userId == currentUserId;
                                bool isNotMe = !isMe;
                                if (isNotMe)
                                {
                                    string userName = user.name;
                                    // string searchedFriendsBoxContent = searchedFriendsBox.Text;
                                    string searchedFriendsBoxContent = localSearchedFriendsBox.Text;
                                    int searchedFriendsBoxContentLength = searchedFriendsBoxContent.Length;
                                    bool isFilterDisabled = searchedFriendsBoxContentLength <= 0;
                                    string insensitiveCaseSearchedFriendsBoxContent = searchedFriendsBoxContent.ToLower();
                                    bool isKeywordsMatch = userName.Contains(insensitiveCaseSearchedFriendsBoxContent);
                                    bool isFriendMatch = isKeywordsMatch || isFilterDisabled;
                                    if (isFriendMatch)
                                    {
                                        DockPanel usersItem = new DockPanel();
                                        // usersItem.Orientation = Orientation.Horizontal;
                                        usersItem.Height = 65;
                                        usersItem.Margin = new Thickness(0, 5, 0, 5);
                                        string userLogin = user.login;

                                        Uri userAvatarUri = new Uri("https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male-128.png");
                                        // Uri userAvatarUri = new Uri("http://localhost:4000/api/user/avatar/?id=" + userId);

                                        Image userAvatar = new Image();
                                        userAvatar.Width = 50;
                                        userAvatar.Height = 50;
                                        userAvatar.Margin = new Thickness(5);
                                        userAvatar.BeginInit();
                                        userAvatar.Source = new BitmapImage(userAvatarUri);
                                        userAvatar.EndInit();
                                        usersItem.Children.Add(userAvatar);
                                        TextBlock usersItemLoginLabel = new TextBlock();
                                        usersItemLoginLabel.Margin = new Thickness(5, 5, 5, 5);
                                        usersItemLoginLabel.Text = userLogin;
                                        usersItem.Children.Add(usersItemLoginLabel);
                                        searchedFriends.Children.Add(usersItem);
                                        usersItem.DataContext = userId;
                                        ContextMenu usersItemContextMenu = new ContextMenu();
                                        MenuItem usersItemContextMenuItem = new MenuItem();
                                        usersItemContextMenuItem.Header = "Открыть профиль";
                                        usersItemContextMenuItem.DataContext = userId;
                                        usersItemContextMenuItem.Click += OpenUserProfileHandler;
                                        usersItemContextMenu.Items.Add(usersItemContextMenuItem);
                                        usersItem.ContextMenu = usersItemContextMenu;

                                        HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                        innerWebRequest.Method = "GET";
                                        innerWebRequest.UserAgent = ".NET Framework Test Client";
                                        using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                        {
                                            using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                            {
                                                js = new JavaScriptSerializer();
                                                objText = innerReader.ReadToEnd();

                                                FriendsResponseInfo myInnerObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));

                                                status = myobj.status;
                                                isOkStatus = status == "OK";
                                                if (isOkStatus)
                                                {
                                                    List<Friend> friends = myInnerObj.friends;

                                                    List<Friend> myFriends = friends.Where<Friend>((Friend friend) =>
                                                    {
                                                        return friend.user == currentUserId;
                                                    }).ToList<Friend>();

                                                    List<string> friendsIds = new List<string>();
                                                    foreach (Friend myFriend in myFriends)
                                                    {
                                                        string friendId = myFriend.friend;
                                                        friendsIds.Add(friendId);
                                                    }
                                                    bool isMyFriend = friendsIds.Contains(userId);
                                                    if (isMyFriend)
                                                    {
                                                        TextBlock usersItemFriendsLabel = new TextBlock();
                                                        usersItemFriendsLabel.Text = "Вы друзья";
                                                        usersItemFriendsLabel.HorizontalAlignment = HorizontalAlignment.Right;
                                                        usersItem.Children.Add(usersItemFriendsLabel);
                                                        usersItemLoginLabel.Foreground = disabledColor;
                                                    }
                                                    else
                                                    {
                                                        Button usersItemAddFriendBtn = new Button();
                                                        usersItemAddFriendBtn.Content = "Добавить в друзья";
                                                        usersItemAddFriendBtn.Width = 125;
                                                        usersItemAddFriendBtn.Height = 25;
                                                        usersItemAddFriendBtn.HorizontalAlignment = HorizontalAlignment.Right;
                                                        usersItemAddFriendBtn.DataContext = userId;
                                                        usersItemAddFriendBtn.Click += AddFriendHandler;
                                                        usersItem.Children.Add(usersItemAddFriendBtn);
                                                        // usersItem.MouseLeftButtonUp += ShowFriendCodeHandler;
                                                    }
                                                    usersIds.Add(userId);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }

        }

        private void DetectFriendSearchHandler (object sender, KeyEventArgs e)
        {
            TextBox box = ((TextBox)(sender));
            Key key = e.Key;
            DetectFriendSearch(key, box);
        }

        public void DetectFriendSearch (Key key, TextBox box)
        {
            string boxContent = box.Text;
            Key enterKey = Key.Enter;
            bool isEnter = key == enterKey;
            if (isEnter)
            {
                searchedFriendsBox.Text = boxContent;
                GetSearchedFriends(box);
                mainControl.SelectedIndex = 49;
            }
        }

        public void AddFriendHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object id = btn.DataContext;
            string friendId = ((string)(id));
            AddFriend(friendId);
        }

        public void AddFriend (string friendId)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        FriendRequestsResponseInfo myObj = (FriendRequestsResponseInfo)js.Deserialize(objText, typeof(FriendRequestsResponseInfo));
                        string status = myObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<FriendRequest> requests = myObj.requests;
                            int countRequests = requests.Count<FriendRequest>((FriendRequest request) =>
                            {
                                string requestUser = request.user;
                                string requestFriend = request.friend;
                                bool isCurrentUser = requestUser == currentUserId; 
                                bool isCurrentFriend = requestFriend == friendId;
                                bool isExists = isCurrentUser && isCurrentFriend;
                                return isExists;
                            });
                            bool isFriendRequestExists = countRequests >= 1;
                            bool isFriendRequestNotExists = !isFriendRequestExists;
                            if (isFriendRequestNotExists)
                            {
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/requests/add/?id=" + currentUserId + @"&friend=" + friendId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            // webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (StreamReader nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    UserResponseInfo myNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        User friend = myNestedObj.user;
                                                        string friendLogin = friend.login;
                                                        string msgContent = "Приглашение пользователю " + friendLogin + " было отправлено";
                                                        Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                                                        string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                                                        string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                                                        js = new JavaScriptSerializer();
                                                        string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                                                        SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                                                        List<Game> currentGames = loadedContent.games;
                                                        List<FriendSettings> currentFriends = loadedContent.friends;
                                                        List<FriendSettings> updatedFriends = currentFriends;
                                                        Settings currentSettings = loadedContent.settings;
                                                        List<string> currentCollections = loadedContent.collections;
                                                        Notifications currentNotifications = loadedContent.notifications;
                                                        List<string> currentCategories = loadedContent.categories;
                                                        List<string> currentRecentChats = loadedContent.recentChats;
                                                        Recommendations currentRecommendations = loadedContent.recommendations;
                                                        string currentLogoutDate = loadedContent.logoutDate;
                                                        List<string> currentSections = loadedContent.sections;
                                                        updatedFriends.Add(new FriendSettings()
                                                        {
                                                            id = friendId,
                                                            isFriendOnlineNotification = true,
                                                            isFriendOnlineSound = true,
                                                            isFriendPlayedNotification = true,
                                                            isFriendPlayedSound = true,
                                                            isFriendSendMsgNotification = true,
                                                            isFriendSendMsgSound = true,
                                                            isFavoriteFriend = false,
                                                            categories = new List<string>() { }
                                                        });
                                                        string savedContent = js.Serialize(new SavedContent
                                                        {
                                                            games = currentGames,
                                                            friends = updatedFriends,
                                                            settings = currentSettings,
                                                            collections = currentCollections,
                                                            notifications = currentNotifications,
                                                            categories = currentCategories,
                                                            recentChats = currentRecentChats,
                                                            recommendations = currentRecommendations,
                                                            logoutDate = currentLogoutDate,
                                                            sections = currentSections
                                                        });
                                                        File.WriteAllText(saveDataFilePath, savedContent);
                                                        string eventData = currentUserId + "|" + friendId;
                                                        client.EmitAsync("user_send_friend_request", eventData);
                                                        MessageBox.Show(msgContent, "Приглашение отправлено");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                string msgContent = "Приглашение пользователю уже отправлено";
                                MessageBox.Show(msgContent, "Приглашение отправлено");
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void ShowFriendCodeHandler (object sender, RoutedEventArgs e)
        {
            StackPanel user = ((StackPanel)(sender));
            object rawUserId = user.DataContext;
            string userId = ((string)(rawUserId));
            ShowFriendCode(userId);
        }

        public void ShowFriendCode (string userId)
        {
            // friendCodeLabel.Text = userId;
        }

        public void OpenUserProfileHandler(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = ((MenuItem)(sender));
            object menuItemData = menuItem.DataContext;
            string id = ((string)(menuItemData));
            OpenUserProfile(id);
        }

        public void OpenUserProfile (string id)
        {
            mainControl.DataContext = id;
            ReturnToProfile();
        }

        private void CancelFriendSearchHandler (object sender, MouseButtonEventArgs e)
        {
            CancelFriendSearch();
        }

        public void CancelFriendSearch ()
        {
            mainControl.SelectedIndex = 16;
        }

        private void friendCodeBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void CopyMyFriendCodeHandler (object sender, RoutedEventArgs e)
        {
            CopyMyFriendCode();
        }

        private void CopyMyFriendCode ()
        {
            myFriendCodeBox.SelectAll();
            myFriendCodeBox.Copy();
            myFriendCodeBox.Select(0, 0);
        }

        private void CopyMyFriendLinkHandler (object sender, RoutedEventArgs e)
        {
            CopyMyFriendLink();
        }

        private void CopyMyFriendLink ()
        {
            addFriendRequestLinkBox.SelectAll();
            addFriendRequestLinkBox.Copy();
            addFriendRequestLinkBox.Select(0, 0);
        }

        private void SearchGameHandler (object sender, TextChangedEventArgs e)
        {
            TextBox box = ((TextBox)(sender));
            string boxContent = box.Text;
            SearchGame(boxContent);
        }

        private void SearchGame (string boxContent)
        {
            int gameCursor = -1;
            // searchGameBoxPopupBody.Children.Clear();
            string keywords = boxContent.ToLower();
            int keywordsLength = keywords.Length;
            bool isFilterEnabled = keywordsLength >= 1;
            if (isFilterEnabled)
            {
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> totalGames = myobj.games;
                                foreach (GameResponseInfo someGame in totalGames)
                                {
                                    string someGameName = someGame.name;
                                    bool isGameFound = someGameName.Contains(keywords);
                                    if (isGameFound)
                                    {
                                        gameCursor++;
                                        int someGamePrice = someGame.price;
                                        bool isNotFirstGame = gameCursor >= 1;
                                        if (isNotFirstGame)
                                        {
                                            Separator separator = new Separator();
                                            separator.BorderBrush = System.Windows.Media.Brushes.Black;
                                            separator.BorderThickness = new Thickness(1);
                                            separator.Margin = new Thickness(25, 5, 25, 5);
                                            // searchGameBoxPopupBody.Children.Add(separator);
                                        }
                                        StackPanel searchedGame = new StackPanel();
                                        searchedGame.Margin = new Thickness(15);
                                        searchedGame.Orientation = Orientation.Horizontal;
                                        Image searchedGameThumbnail = new Image();
                                        searchedGameThumbnail.Width = 75;
                                        searchedGameThumbnail.Height = 75;
                                        searchedGameThumbnail.BeginInit();
                                        searchedGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + someGameName));
                                        searchedGameThumbnail.EndInit();
                                        searchedGame.Children.Add(searchedGameThumbnail);
                                        StackPanel searchedGameAside = new StackPanel();
                                        searchedGameAside.Margin = new Thickness(15);
                                        TextBlock someGameNameLabel = new TextBlock();
                                        someGameNameLabel.FontSize = 14;
                                        someGameNameLabel.Text = someGameName;
                                        searchedGameAside.Children.Add(someGameNameLabel);
                                        TextBlock someGamePriceLabel = new TextBlock();
                                        string rawSomeGamePrice = someGamePrice.ToString();
                                        string measure = "Р";
                                        string someGamePriceLabelContent = rawSomeGamePrice + " " + measure;
                                        bool isFreeGame = someGamePrice <= 0;
                                        if (isFreeGame)
                                        {
                                            someGamePriceLabelContent = "Бесплатная";
                                        }
                                        someGamePriceLabel.Text = someGamePriceLabelContent;
                                        searchedGameAside.Children.Add(someGamePriceLabel);
                                        searchedGame.Children.Add(searchedGameAside);
                                        // searchGameBoxPopupBody.Children.Add(searchedGame);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            // searchGameBoxPopup.IsOpen = isFilterEnabled;
        }

        private void SetWishListHandler (object sender, RoutedEventArgs e)
        {
            SetWishList();
        }

        public void SetWishList ()
        {
            SetWishListDialog dialog = new SetWishListDialog(currentUserId);
            dialog.Show();
        }

        private void anyPlatformRadioBtn_Click(object sender, RoutedEventArgs e)
        {

        }

        private void MoveCarouselToLeftHandler (object sender, MouseButtonEventArgs e)
        {
            MoveCarouselToLeft();
        }

        public void ClearCarouselShortcuts ()
        {
            foreach (Button carouselShortcut in carouselShortcuts.Children)
            {
                carouselShortcut.Background = System.Windows.Media.Brushes.LightGray;
            }
        }

        public void MoveCarouselToLeft ()
        {
            ClearCarouselShortcuts();
            int selectedIndex = carouselControl.SelectedIndex;
            // int countPopularGames = 5;
            int countPopularGames = carouselControl.Items.Count;
            bool isFirstGame = selectedIndex == 0;
            if (isFirstGame)
            {
                carouselControl.SelectedIndex = countPopularGames - 1;
            }
            else
            {
                carouselControl.SelectedIndex = selectedIndex - 1;
            }
            selectedIndex = carouselControl.SelectedIndex;
            UIElement rawCurrentCarouselShortcut = carouselShortcuts.Children[selectedIndex];
            Button currentCarouselShortcut = ((Button)(rawCurrentCarouselShortcut));
            currentCarouselShortcut.Background = System.Windows.Media.Brushes.SkyBlue;
            carouselTimer.Stop();
        }

        private void MoveCarouselToRightHandler (object sender, MouseButtonEventArgs e)
        {
            MoveCarouselToRight();
        }

        public void MoveCarouselToRight ()
        {
            ClearCarouselShortcuts();
            int selectedIndex = carouselControl.SelectedIndex;
            // int countPopularGames = 5;
            int countPopularGames = carouselControl.Items.Count;
            bool isLastGame = selectedIndex == countPopularGames - 1;
            if (isLastGame)
            {
                carouselControl.SelectedIndex = 0;
            }
            else
            {
                carouselControl.SelectedIndex = selectedIndex + 1;
            }
            selectedIndex = carouselControl.SelectedIndex;
            UIElement rawCurrentCarouselShortcut = carouselShortcuts.Children[selectedIndex];
            Button currentCarouselShortcut = ((Button)(rawCurrentCarouselShortcut));
            currentCarouselShortcut.Background = System.Windows.Media.Brushes.SkyBlue;
            // carouselTimer.Stop();
        }

        private void SelectCarouselShortcutHandler (object sender, RoutedEventArgs e)
        {
            Button shortcut = ((Button)(sender));
            SelectCarouselShortcut(shortcut);
        }

        public void SelectCarouselShortcut (Button shortcut)
        {
            int index = carouselShortcuts.Children.IndexOf(shortcut);
            carouselControl.SelectedIndex = index;
            ClearCarouselShortcuts();
            shortcut.Background = System.Windows.Media.Brushes.SkyBlue;
        }

        private void OpenPresentCardsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenPresentCards();
        }

        public void OpenPresentCards ()
        {
            prizeCardsControl.SelectedIndex = 0;
            mainControl.SelectedIndex = 51;
        }

        private void OpenFriendRecommendationsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenFriendRecommendations();
        }

        public void OpenFriendRecommendations ()
        {
            mainControl.SelectedIndex = 53;
        }

        private void OpenCuratorsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenCurators();
        }

        public void OpenCurators ()
        {
            mainControl.SelectedIndex = 54;
        }

        private void OpenTagsHandler(object sender, MouseButtonEventArgs e)
        {
            OpenTags();
        }

        public void OpenTags()
        {
            mainControl.SelectedIndex = 52;
        }

        private void SelectGlobalsTagHandler(object sender, MouseButtonEventArgs e)
        {
            StackPanel controlItem = ((StackPanel)(sender));
            object controlItemData = controlItem.DataContext;
            string rawControlItemIndex = controlItemData.ToString();
            int index = Int32.Parse(rawControlItemIndex);
            SelectGlobalsTag(index);
        }

        public void SelectGlobalsTag(int index)
        {
            globalTagsControl.SelectedIndex = index;
        }

        private void SelectRecommendationsTagHandler (object sender, MouseButtonEventArgs e)
        {
            StackPanel controlItem = ((StackPanel)(sender));
            object controlItemData = controlItem.DataContext;
            string rawControlItemIndex = controlItemData.ToString();
            int index = Int32.Parse(rawControlItemIndex);
            SelectRecommendationsTag(index);
        }

        public void SelectRecommendationsTag (int index)
        {
            recommendationTagsControl.SelectedIndex = index;
        }

        private void OpenAllFriendRecommendationsHandler (object sender, RoutedEventArgs e)
        {
            OpenAllFriendRecommendations();
        }

        public void OpenAllFriendRecommendations ()
        {
            mainControl.SelectedIndex = 55;
        }

        private void OpenGameRecommendationsHandler (object sender, MouseButtonEventArgs e)
        {
            OpenGameRecommendations();
        }

        public void OpenGameRecommendations ()
        {
            mainControl.SelectedIndex = 56;
        }

        private void GetAllRecommendationGamesHandler(object sender, TextChangedEventArgs e)
        {
            GetAllRecommendationGames();
        }

        private void SortAllGameRecommendationsHandler (object sender, MouseButtonEventArgs e)
        {
            TextBlock label = ((TextBlock)(sender));
            object labelData = label.DataContext;
            string sortData = labelData.ToString();
            SortAllGameRecommendations(sortData);
        }

        public void SortAllGameRecommendations (string sortData)
        {
            sortAllGameRecommendationsByHoursLabel.TextDecorations = TextDecorations.Underline;
            sortAllGameRecommendationsByNameLabel.TextDecorations = TextDecorations.Underline;
            sortAllGameRecommendationsByAchievementsLabel.TextDecorations = TextDecorations.Underline;
            bool isHours = sortData == "hours";
            bool isName = sortData == "name";
            bool isAchievements = sortData == "achievements";
            if (isHours)
            {
                sortAllGameRecommendationsByHoursLabel.TextDecorations = null;
            }
            else if (isName)
            {
                sortAllGameRecommendationsByNameLabel.TextDecorations = null;
            }
            else if (isAchievements)
            {
                sortAllGameRecommendationsByAchievementsLabel.TextDecorations = null;
            }
            sortAllGameRecommendationsPanel.DataContext = sortData;
            GetAllRecommendationGames();
        }

        private void IncreaseReviewAdvicesHandler (object sender, RoutedEventArgs e)
        {
            IncreaseReviewAdvices();
        }

        public void IncreaseReviewAdvices ()
        {
            try
            {
                object mainReviewData = mainReview.DataContext;
                string reviewId = ((string)(mainReviewData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/advices/increase/?id=" + reviewId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            SelectReview(reviewId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void IncreaseReviewFunsHandler(object sender, RoutedEventArgs e)
        {
            IncreaseReviewFuns();
        }

        public void IncreaseReviewFuns()
        {
            try
            {
                object mainReviewData = mainReview.DataContext;
                string reviewId = ((string)(mainReviewData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/funs/increase/?id=" + reviewId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();

                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));

                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            SelectReview(reviewId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SendCommunityScreenShotCommentHandler (object sender, RoutedEventArgs e)
        {
            SendCommunityScreenShotComment();
        }

        public void SendCommunityScreenShotComment ()
        {
            object mainCommunityScreenShotData = mainCommunityScreenShot.DataContext;
            string communityScreenShotId = ((string)(mainCommunityScreenShotData));
            string mainCommunityScreenShotCommentsBoxContent = mainCommunityScreenShotCommentsBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/comments/add/?id=" + communityScreenShotId + @"&content=" + mainCommunityScreenShotCommentsBoxContent + @"&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainCommunityScreenShotCommentsBox.Text = "";
                            SelectCommunityScreenShot(communityScreenShotId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SendIllustrationCommentHandler (object sender, RoutedEventArgs e)
        {
            SendIllustrationComment();
        }

        public void SendIllustrationComment()
        {
            object mainIllustrationData = mainIllustration.DataContext;
            string illustrationId = ((string)(mainIllustrationData));
            string mainIllustrationCommentsBoxContent = mainIllustrationCommentsBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/comments/add/?id=" + illustrationId + @"&content=" + mainIllustrationCommentsBoxContent + @"&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainIllustrationCommentsBox.Text = "";
                            SelectIllustration(illustrationId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SendManualCommentHandler (object sender, RoutedEventArgs e)
        {
            SendManualComment();
        }

        public void SendManualComment()
        {
            object mainManualData = mainManual.DataContext;
            string manualId = ((string)(mainManualData));
            string mainManualCommentsBoxContent = mainManualCommentsBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/comments/add/?id=" + manualId + @"&content=" + mainManualCommentsBoxContent + @"&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainManualCommentsBox.Text = "";
                            SelectManual(manualId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SendReviewCommentHandler (object sender, RoutedEventArgs e)
        {
            SendReviewComment();
        }

        public void SendReviewComment ()
        {
            object mainReviewData = mainReview.DataContext;
            string reviewId = ((string)(mainReviewData));
            string mainReviewCommentsBoxContent = mainReviewCommentsBox.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/reviews/comments/add/?id=" + reviewId + @"&content=" + mainReviewCommentsBoxContent + @"&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainReviewCommentsBox.Text = "";
                            SelectReview(reviewId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }


        public void IncreaseCommunityScreenShotLikesHandler (object sender, RoutedEventArgs e)
        {
            IncreaseCommunityScreenShotLikes();
        }

        public void IncreaseCommunityScreenShotLikes ()
        {
            try
            {
                object mainCommunityScreenShotIdData = mainCommunityScreenShot.DataContext;
                string communityScreenShotId = ((string)(mainCommunityScreenShotIdData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/likes/increase/?id=" + communityScreenShotId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            SelectCommunityScreenShot(communityScreenShotId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void IncreaseIllustrationLikesHandler (object sender, RoutedEventArgs e)
        {
            IncreaseIllustrationLikes();
        }

        public void IncreaseIllustrationLikes ()
        {
            try
            {
                object mainIllustrationData = mainIllustration.DataContext;
                string illustrationId = ((string)(mainIllustrationData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/likes/increase/?id=" + illustrationId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            SelectIllustration(illustrationId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void IncreaseManualLikesHandler (object sender, RoutedEventArgs e)
        {
            IncreaseManualLikes();
        }

        public void IncreaseManualLikes ()
        {
            try
            {
                object mainManualData = mainManual.DataContext;
                string manualId = ((string)(mainManualData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/likes/increase/?id=" + manualId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            SelectManual(manualId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }


        public void RemoveManualFavoritesHandler (object sender, RoutedEventArgs e)
        {
            RemoveManualFavorites();
        }

        public void RemoveManualFavorites ()
        {
            try
            {
                object mainManualData = mainManual.DataContext;
                string manualId = ((string)(mainManualData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/favorites/remove/?manual=" + manualId + @"&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            mainManualFavoriteBtn.MouseEnter -= ShowRemoveContentMainManualFavoriteBtnHandler;
                            mainManualFavoriteBtn.MouseLeave -= HideRemoveContentMainManualFavoriteBtnHandler;
                            mainManualFavoriteBtnContentIcon.Kind = PackIconKind.Star;
                            mainManualFavoriteBtnContentLabel.Text = "В избранное";
                            SelectManual(manualId);
                            GetFavoriteManualsContent();
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void IncreaseManualFavoritesHandler (object sender, RoutedEventArgs e)
        {
            IncreaseManualFavorites();
        }

        public void IncreaseManualFavorites ()
        {
            try
            {
                object mainManualData = mainManual.DataContext;
                string manualId = ((string)(mainManualData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/favorites/increase/?id=" + manualId + @"&user=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {

                            HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=addSubjectToFavorite&data=" + manualId);
                            innerNestedWebRequest.Method = "GET";
                            innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                            {
                                using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerNestedReader.ReadToEnd();
                                    UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    status = myInnerNestedObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {

                                        SelectManual(manualId);
                                        GetFavoriteManualsContent();

                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void IncreaseManualDisLikesHandler (object sender, RoutedEventArgs e)
        {
            IncreaseManualDisLikes();
        }

        public void IncreaseManualDisLikes ()
        {
            try
            {
                object mainManualData = mainManual.DataContext;
                string manualId = ((string)(mainManualData));
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/manuals/dislikes/increase/?id=" + manualId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            SelectManual(manualId);
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void ScrollToManualDescHandler (object sender, MouseButtonEventArgs e)
        {
            ScrollToManualDesc();
        }

        public void ScrollToManualDesc ()
        {
            mainManualScroll.ScrollToTop();
        }

        private void ScrollToManualCommentsHandler (object sender, MouseButtonEventArgs e)
        {
            ScrollToManualComments();
        }

        public void ScrollToManualComments ()
        {
            mainManualScroll.ScrollToBottom();
        }

        private void SelectManualsContentItemHandler (object sender, MouseButtonEventArgs e)
        {
            StackPanel manualsContentItem = ((StackPanel)(sender));
            object manualsContentItemData = manualsContentItem.DataContext;
            string rawManualsContentItemData = manualsContentItemData.ToString();
            int index = Int32.Parse(rawManualsContentItemData);
            SelectManualsContentItem(index);
        }


        public void SelectManualsContentItem (int index)
        {
            manualsListContentItem.Background = System.Windows.Media.Brushes.Transparent;
            favoriteManualsListContentItem.Background = System.Windows.Media.Brushes.Transparent;
            bool isFavorite = index == 1;
            if (isFavorite)
            {
                favoriteManualsListContentItem.Background = System.Windows.Media.Brushes.LightSlateGray;

                favoriteContentRadioBtn.IsChecked = true;
                
            }
            else
            {
                manualsListContentItem.Background = System.Windows.Media.Brushes.LightSlateGray;

                mySelfContentRadioBtn.IsChecked = true;

            }
            contentManualsControl.SelectedIndex = index;
        }

        private void ToggleSortScreenShotsHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString();
            ToggleSortScreenShots(sortType);
        }

        public void ToggleSortScreenShots (string sortType)
        {
            screenShotsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            screenShotsSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                screenShotsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                screenShotsSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            screenShotsSortPanel.DataContext = sortType;
            GetCommunityScreenShots();
        }

        private void ToggleSortCommunityContentHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString();
            ToggleSortCommunityContent(sortType);
        }

        public void ToggleSortCommunityContent (string sortType)
        {
            communityContentSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            communityContentSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                communityContentSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                communityContentSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            communityContentSortPanel.DataContext = sortType;
            GetCommunityTotalContent();
        }

        private void ToggleSortIllustrationsHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString();
            ToggleSortIllustrations(sortType);
        }

        public void ToggleSortIllustrations (string sortType)
        {
            illustrationsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            illustrationsSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                illustrationsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                illustrationsSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            illustrationsSortPanel.DataContext = sortType;
            GetIllustrations();
        }

        private void ToggleSortWorkShopHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString();
            ToggleSortWorkShop(sortType);
        }

        public void ToggleSortWorkShop (string sortType)
        {
            workShopSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            workShopSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                workShopSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                workShopSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            workShopSortPanel.DataContext = sortType;
        }

        private void ToggleSortVideosHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString();
            ToggleSortVideos (sortType);
        }

        public void ToggleSortVideos (string sortType)
        {
            videosSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            videosSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                videosSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                videosSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            videosSortPanel.DataContext = sortType;
        }

        private void ToggleSortManualsHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString(); 
            ToggleSortManuals(sortType);
        }

        public void ToggleSortManuals (string sortType)
        {
            manualsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            manualsSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                manualsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                manualsSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            manualsSortPanel.DataContext = sortType;
            GetManuals();
        }

        private void ToggleSortReviewsHandler (object sender, RoutedEventArgs e)
        {
            Button btn = ((Button)(sender));
            object btnData = btn.DataContext;
            string sortType = btnData.ToString();
            ToggleSortReviews(sortType);
        }

        public void ToggleSortReviews (string sortType)
        {
            reviewsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.LightGray;
            reviewsSortPanelLastBtn.Background = System.Windows.Media.Brushes.LightGray;
            bool isPopular = sortType == "САМЫЕ ПОПУЛЯРНЫЕ";
            if (isPopular)
            {
                reviewsSortPanelPopularBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            else
            {
                reviewsSortPanelLastBtn.Background = System.Windows.Media.Brushes.SkyBlue;
            }
            reviewsSortPanel.DataContext = sortType;
            GetReviews();
        }

        private void FindHumansHandler (object sender, MouseButtonEventArgs e)
        {
            FindHumans();
        }

        public void FindHumans ()
        {
            string findHumansBoxContent = findHumansBox.Text;
            findHumansBox.Text = "";
            searchedFriendsBox.Text = findHumansBoxContent;
            GetSearchedFriends(searchedFriendsBox);
            mainControl.SelectedIndex = 49;
        }

        private void DetectMainCommunityScrollHandler (object sender, ScrollChangedEventArgs e)
        {
            ScrollViewer scroll = ((ScrollViewer)(sender));
            DetectMainCommunityScroll(scroll);
        }

        public void DetectMainCommunityScroll (ScrollViewer scroll)
        {
            double offset = scroll.VerticalOffset;
            bool isNotTop = offset > 0;
            mainCommunityPopup.IsOpen = isNotTop;
            mainCommunityPopup.CustomPopupPlacementCallback = new CustomPopupPlacementCallback(MainCommunityScrollPopupPlacementHandler);
        }

        private void ScrollMainCommunityToTopHandler (object sender, RoutedEventArgs e)
        {
            ScrollMainCommunityToTop();
        }

        public void ScrollMainCommunityToTop ()
        {
            mainCommunityScroll.ScrollToTop();
        }

        public void ShowRemoveContentMainManualFavoriteBtnHandler(object sender, RoutedEventArgs e)
        {
            ShowRemoveContentMainManualFavoriteBtn();
        }

        public void ShowRemoveContentMainManualFavoriteBtn ()
        {
            mainManualFavoriteBtnContentIcon.Kind = PackIconKind.Close;
            mainManualFavoriteBtnContentLabel.Text = "Удалить";
        }

        public void HideRemoveContentMainManualFavoriteBtnHandler (object sender, RoutedEventArgs e)
        {
            HideRemoveContentMainManualFavoriteBtn();
        }

        public void HideRemoveContentMainManualFavoriteBtn ()
        {
            mainManualFavoriteBtnContentIcon.Kind = PackIconKind.Star;
            mainManualFavoriteBtnContentLabel.Text = "В избранном";
        }

        private void ShowGameCommunityAnnotationsHandler (object sender, TextChangedEventArgs e)
        {
            ShowGameCommunityAnnotations();
        }

        public void ShowGameCommunityAnnotations ()
        {
            gameCommunityAnnotations.Children.Clear();
            string gameCommunityBoxContent = gameCommunityBox.Text;
            int gameCommunityBoxContentLength = gameCommunityBoxContent.Length;
            bool isHaveContent = gameCommunityBoxContentLength >= 1;
            string insensitiveCaseGameCommunityBoxContent = gameCommunityBoxContent.ToLower();
            if (isHaveContent)
            {
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> totalGames = myobj.games;
                                totalGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                {
                                    string someGameName = someGame.name;
                                    string insensitiveCaseSomeGameName = someGameName.ToLower();
                                    bool isKeywordsMatch = insensitiveCaseSomeGameName.Contains(insensitiveCaseGameCommunityBoxContent);
                                    return isKeywordsMatch;
                                }).ToList<GameResponseInfo>();
                                foreach (GameResponseInfo totalGame in totalGames)
                                {
                                    string totalGameId = totalGame._id;
                                    string totalGameName = totalGame.name;
                                    TextBlock gameCommunityAnnotation = new TextBlock();
                                    gameCommunityAnnotation.Text = totalGameName;
                                    gameCommunityAnnotation.Margin = new Thickness(15, 5, 15, 5);
                                    gameCommunityAnnotation.DataContext = totalGameId;
                                    gameCommunityAnnotation.MouseLeftButtonUp += SelectCommunityGameAnnotationHandler;
                                    gameCommunityAnnotations.Children.Add(gameCommunityAnnotation);
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            gameCommunityAnnotationsPopup.IsOpen = isHaveContent;
        }

        public void SelectCommunityGameAnnotationHandler (object sender, RoutedEventArgs e)
        {
            TextBlock annotation = ((TextBlock)(sender));
            object annotationData = annotation.DataContext;
            string id = ((string)(annotationData));
            SelectCommunityGameAnnotation(id);
        }

        public void SelectCommunityGameAnnotation (string id)
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> games = myobj.games;
                            List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                            {
                                string gameId = game._id;
                                bool isIdMatches = gameId == id;
                                return isIdMatches;
                            }).ToList<GameResponseInfo>();
                            int countResults = gameResults.Count;
                            bool isResultsFound = countResults >= 1;
                            if (isResultsFound)
                            {
                                GameResponseInfo communityGame = gameResults[0];
                                string communityGameName = communityGame.name;
                                communityActivityGameNameLabel.Text = communityGameName;
                                communityActivityControl.DataContext = id;
                                communityActivityControl.SelectedIndex = 1;
                                GetCommunityInfo();
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenGameCommunityHandler (object sender, MouseButtonEventArgs e)
        {
            OpenGameCommunity();
        }

        public void OpenGameCommunity ()
        {

        }

        private void HideNotificationsPopupHightLightHandler (object sender, EventArgs e)
        {
            HideNotificationsPopupHightLight();
        }

        public void HideNotificationsPopupHightLight ()
        {
            notificationsPopupIcon.Foreground = System.Windows.Media.Brushes.Black;
            countNewRequestsLabel.Text = @"Новых комментариев: 0";
            countNewRequestsLabel.Text = @"Новых предметов: 0";
            countNewRequestsLabel.Text = @"Новых приглашений: 0";
            countNewRequestsLabel.Text = @"Новых подарков: 0";
        }

        private void ToggleNewsAsideHandler (object sender, MouseButtonEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            ToggleNewsAside(icon);
        }

        public void ToggleNewsAside (PackIcon icon)
        {
            Visibility newsAsideBodyVisibility = newsAsideBody.Visibility;
            bool isVisible = newsAsideBodyVisibility == visible;
            if (isVisible)
            {
                newsAsideBody.Visibility = invisible;
                newsAside.Width = 50;
                icon.Kind = PackIconKind.ChevronDoubleRight;
            }
            else
            {
                newsAsideBody.Visibility = visible;
                newsAside.Width = 250;
                icon.Kind = PackIconKind.ChevronDoubleLeft;
            }
        }

        public void OpenBindGamePopupHandler (object sender, RoutedEventArgs e)
        {
            OpenBindGamePopup();
        }

        public void OpenBindGamePopup ()
        {
            bindGamePopup.IsOpen = true;
        }

        private void ToggleAddGamePopupHandler (object sender, MouseButtonEventArgs e)
        {
            ToggleAddGamePopup();
        }

        public void ToggleAddGamePopup ()
        {
            addGamePopup.IsOpen = true;
        }

        private void OpenMoreCuratorsHandler (object sender, RoutedEventArgs e)
        {
            OpenMoreCurators();
        }

        public void OpenMoreCurators ()
        {
            mainControl.SelectedIndex = 57;
        }

        private void GetWorkShopGamesHandler (object sender, TextChangedEventArgs e)
        {
            GetWorkShopGames();
        }

        private void GetWorkShopGames ()
        {
            workShopBoxPopupBody.Children.Clear();
            string workShopBoxContent = workShopBox.Text;
            string insensitiveCaseWorkShopBoxContent = workShopBoxContent.ToLower();
            int workShopBoxContentLength = workShopBoxContent.Length;
            bool isHaveContent = workShopBoxContentLength >= 1;
            if (isHaveContent)
            {
                try
                {
                    HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                    webRequest.Method = "GET";
                    webRequest.UserAgent = ".NET Framework Test Client";
                    using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                    {
                        using (var reader = new StreamReader(webResponse.GetResponseStream()))
                        {
                            JavaScriptSerializer js = new JavaScriptSerializer();
                            var objText = reader.ReadToEnd();
                            GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                            string status = myobj.status;
                            bool isOkStatus = status == "OK";
                            if (isOkStatus)
                            {
                                List<GameResponseInfo> totalGames = myobj.games;
                                totalGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                                {
                                    string someGameName = someGame.name;
                                    string insensitiveCaseSomeGameName = someGameName.ToLower();
                                    bool isKeywordsMatch = insensitiveCaseSomeGameName.Contains(insensitiveCaseWorkShopBoxContent);
                                    return isKeywordsMatch;
                                }).ToList<GameResponseInfo>();
                                foreach (GameResponseInfo totalGame in totalGames)
                                {
                                    string totalGameId = totalGame._id;
                                    string totalGameName = totalGame.name;
                                    TextBlock gameCommunityAnnotation = new TextBlock();
                                    gameCommunityAnnotation.Text = totalGameName;
                                    gameCommunityAnnotation.Margin = new Thickness(15, 5, 15, 5);
                                    gameCommunityAnnotation.DataContext = totalGameId;
                                    gameCommunityAnnotation.MouseLeftButtonUp += SelectCommunityGameAnnotationFromWorkShopHandler;
                                    workShopBoxPopupBody.Children.Add(gameCommunityAnnotation);
                                }
                            }
                        }
                    }
                }
                catch (System.Net.WebException)
                {
                    MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                    this.Close();
                }
            }
            workShopBoxPopup.IsOpen = isHaveContent;
        }

        public void SelectCommunityGameAnnotationFromWorkShopHandler (object sender, RoutedEventArgs e)
        {
            TextBlock annotation = ((TextBlock)(sender));
            object annotationData = annotation.DataContext;
            string id = ((string)(annotationData));
            mainControl.SelectedIndex = 20;
            communityControl.SelectedIndex = 5;
            annotation.Text = "";
            SelectCommunityGameAnnotation(id);
        }

        private void ClearFriendsForPresentBoxHandler (object sender, RoutedEventArgs e)
        {
            ClearFriendsForPresentBox();
        }

        public void ClearFriendsForPresentBox ()
        {
            friendsForPresentBox.Text = "";
            GetFriendsForPresent();
        }

        private void FilterFriendsForPresentHandler (object sender, TextChangedEventArgs e)
        {
            FilterFriendsForPresent();
        }

        public void FilterFriendsForPresent ()
        {
            GetFriendsForPresent();
        }

        private void RefreshFriendActivityEventsDateLabelHandler (object sender, CalendarDateChangedEventArgs e)
        {
            Calendar calendar = ((Calendar)(sender));
            RefreshFriendActivityEventsDateLabel(calendar);
        }

        public void RefreshFriendActivityEventsDateLabel (Calendar calendar)
        {
            DateTime? possibleCalendarDate = calendar.DisplayDate;
            DateTime calendarDate = possibleCalendarDate.Value;
            string friendsActivityEventsDateLabelContent = calendarDate.ToLongDateString();
            friendsActivityEventsDateLabel.Text = friendsActivityEventsDateLabelContent;
        }

        private void GetCommentsHistoryHandler (object sender, TextChangedEventArgs e)
        {
            GetCommentsHistory();
        }

        private void GetGamesForBindGamePopupHandler (object sender, TextChangedEventArgs e)
        {
            GetGamesForBindGamePopup();
        }

        public void GetGamesForBindGamePopup ()
        {
            string bindGamePopupBoxContent = bindGamePopupBox.Text;
            string insensitiveCaseBindGamePopupBoxContent = bindGamePopupBoxContent.ToLower();
            int insensitiveCaseBindGamePopupBoxContentLength = insensitiveCaseBindGamePopupBoxContent.Length;
            bool isFilterDisabled = insensitiveCaseBindGamePopupBoxContentLength <= 0;
            bindGamePopupList.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            List<GameResponseInfo> possibleBindGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameName = someGame.name;
                                string insensitiveCaseSomeGameName = someGameName.ToLower();
                                bool isKeywordsMatch = insensitiveCaseSomeGameName.Contains(insensitiveCaseBindGamePopupBoxContent);
                                bool isFilterMatch = isKeywordsMatch || isFilterDisabled;
                                return isFilterMatch;
                            }).ToList<GameResponseInfo>();
                            foreach (GameResponseInfo possibleBindGame in possibleBindGames)
                            {
                                string possibleBindGameName = possibleBindGame.name;
                                TextBlock bindGamePopupLabel = new TextBlock();
                                bindGamePopupLabel.Text = possibleBindGameName;
                                bindGamePopupLabel.Margin = new Thickness(15, 5, 15, 5);
                                bindGamePopupLabel.MouseLeftButtonUp += SelectBindGamePopupLabelHandler;
                                bindGamePopupList.Children.Add(bindGamePopupLabel);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SelectBindGamePopupLabelHandler (object sender, RoutedEventArgs e)
        {
            TextBlock label = ((TextBlock)(sender));
            SelectBindGamePopupLabel(label);
        }

        public void SelectBindGamePopupLabel (TextBlock label)
        {
            string labelContent = label.Text;
            bindGameBtnContentLabel.Text = labelContent;
            bindGamePopup.IsOpen = false;
        }

        public void PublishActivityStatusHandler (object sender, RoutedEventArgs e)
        {
            PublishActivityStatus();
        }

        public void PublishActivityStatus()
        {
            string activityStatusBoxContent = activityStatusBox.Text;
            try
            {
                HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/activities/add/?id=" + currentUserId + @"&content=receiveComment&data=" + activityStatusBoxContent);
                innerNestedWebRequest.Method = "GET";
                innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                {
                    using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = innerNestedReader.ReadToEnd();
                        UserResponseInfo myInnerNestedObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myInnerNestedObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            activityStatusBox.Text = "";
                            GetMyActivities();
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void OpenKeywordsLabelFilterPopupHandler (object sender, MouseButtonEventArgs e)
        {
            OpenKeywordsLabelFilterPopup();
        }

        public void OpenKeywordsLabelFilterPopup ()
        {
            keywordsLabelFilterPopup.IsOpen = true;
        }

        private void SearchGamesHandler (object sender, TextChangedEventArgs e)
        {
            SearchGames();
        }

        private void TogglePriceValueHandler (object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            Slider slider = ((Slider)(sender));
            TogglePriceValue(slider);
        }

        private void TogglePriceValue (Slider slider)
        {
            if (isAppInit)
            {
                double sliderValue = slider.Value;
                int parsedSliderValue = ((int)(sliderValue));
                bool isFree = sliderValue == 0;
                bool isBefore150 = parsedSliderValue == 1;
                bool isBefore300 = parsedSliderValue == 2;
                bool isBefore450 = parsedSliderValue == 3;
                bool isBefore600 = parsedSliderValue == 4;
                bool isBefore750 = parsedSliderValue == 5;
                bool isBefore900 = parsedSliderValue == 6;
                bool isBefore1050 = parsedSliderValue == 7;
                bool isBefore1200 = parsedSliderValue == 8;
                bool isBefore1350 = parsedSliderValue == 9;
                bool isBefore1500 = parsedSliderValue == 10;
                bool isBefore1650 = parsedSliderValue == 11;
                bool isBefore1800 = parsedSliderValue == 12;
                bool isAny = parsedSliderValue == 13;
                string searchedGamesPriceLabelContent = "Бесплатно";
                if (isFree)
                {
                    searchedGamesPriceLabelContent = "Бесплатно";
                }
                else if (isBefore150)
                {
                    searchedGamesPriceLabelContent = "До 150 руб.";
                }
                else if (isBefore300)
                {
                    searchedGamesPriceLabelContent = "До 300 руб.";
                }
                else if (isBefore450)
                {
                    searchedGamesPriceLabelContent = "До 450 руб.";
                }
                else if (isBefore600)
                {
                    searchedGamesPriceLabelContent = "До 600 руб.";
                }
                else if (isBefore750)
                {
                    searchedGamesPriceLabelContent = "До 750 руб.";
                }
                else if (isBefore900)
                {
                    searchedGamesPriceLabelContent = "До 900 руб.";
                }
                else if (isBefore1050)
                {
                    searchedGamesPriceLabelContent = "До 1050 руб.";
                }
                else if (isBefore1200)
                {
                    searchedGamesPriceLabelContent = "До 1200 руб.";
                }
                else if (isBefore1350)
                {
                    searchedGamesPriceLabelContent = "До 1350 руб.";
                }
                else if (isBefore1500)
                {
                    searchedGamesPriceLabelContent = "До 1500 руб.";
                }
                else if (isBefore1650)
                {
                    searchedGamesPriceLabelContent = "До 1650 руб.";
                }
                else if (isBefore1800)
                {
                    searchedGamesPriceLabelContent = "До 1800 руб.";
                }
                else if (isAny)
                {
                    searchedGamesPriceLabelContent = "Любая";
                }
                searchedGamesPriceLabel.Text = searchedGamesPriceLabelContent;
                SearchGames();
            }
        }

        private void SearchGamesBySortHandler (object sender, SelectionChangedEventArgs e)
        {
            SearchGamesBySort();
        }

        public void SearchGamesBySort ()
        {
            if (isAppInit)
            {
                SearchGames();
            }
        }

        private void ToggleRecentActivityHandler (object sender, MouseButtonEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            ToggleRecentActivity(icon);
        }

        public void ToggleRecentActivity (PackIcon icon)
        {
            System.Windows.Media.Brush iconFill = icon.Foreground;
            bool isEnabled = iconFill == System.Windows.Media.Brushes.SkyBlue;
            if (isEnabled)
            {
                icon.Foreground = System.Windows.Media.Brushes.Black;
            }
            else
            {
                icon.Foreground = System.Windows.Media.Brushes.SkyBlue;
            }
            GetGamesList("");
        }

        private void ToggleReady2GoHandler (object sender, MouseButtonEventArgs e)
        {
            PackIcon icon = ((PackIcon)(sender));
            ToggleReady2Go(icon);
        }

        public void ToggleReady2Go (PackIcon icon)
        {
            System.Windows.Media.Brush iconFill = icon.Foreground;
            bool isEnabled = iconFill == System.Windows.Media.Brushes.SkyBlue;
            if (isEnabled)
            {
                icon.Foreground = System.Windows.Media.Brushes.Black;
            }
            else
            {
                icon.Foreground = System.Windows.Media.Brushes.SkyBlue;
            }
            GetGamesList("");
        }

        private void ToggleAddNewGameSectionHandler (object sender, SelectionChangedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            ToggleAddNewGameSection(selector);
        }

        public void ToggleSectionHeaderSelectorHandler (object sender, SelectionChangedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            ToggleSectionHeaderSelector(selector);
        }

        public void ToggleSectionHeaderSelector (ComboBox selector)
        {
            if (isAppInit)
            {

                object selectorData = selector.DataContext;
                StackPanel section = ((StackPanel)(selectorData));

                ItemCollection selectorItems = selector.Items;
                int selectedIndex = selector.SelectedIndex;
                object rawSelectorSelectedItem = selectorItems[selectedIndex];
                ComboBoxItem selectorSelectedItem = ((ComboBoxItem)(rawSelectorSelectedItem));
                object rawSelectorSelectedItemContent = selectorSelectedItem.Content;
                string selectorSelectedItemContent = rawSelectorSelectedItemContent.ToString();
                bool isRemove = selectorSelectedItemContent == "Удалить этот раздел";
                if (isRemove)
                {
                    RemoveGameSection(section);
                }
                else
                {
                    Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                    string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                    string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                    SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                    List<Game> currentGames = loadedContent.games;
                    List<FriendSettings> updatedFriends = loadedContent.friends;
                    Settings currentSettings = loadedContent.settings;
                    List<string> currentCollections = loadedContent.collections;
                    Notifications currentNotifications = loadedContent.notifications;
                    List<string> currentCategories = loadedContent.categories;
                    List<string> currentRecentChats = loadedContent.recentChats;
                    Recommendations currentRecommendations = loadedContent.recommendations;
                    string currentLogoutDate = loadedContent.logoutDate;
                    List<string> updatedSections = loadedContent.sections;
                    int sectionIndex = gameSections.Children.IndexOf(section);
                    updatedSections[sectionIndex] = selectorSelectedItemContent;
                    string savedContent = js.Serialize(new SavedContent
                    {
                        games = currentGames,
                        friends = updatedFriends,
                        settings = currentSettings,
                        collections = currentCollections,
                        notifications = currentNotifications,
                        categories = currentCategories,
                        recentChats = currentRecentChats,
                        recommendations = currentRecommendations,
                        logoutDate = currentLogoutDate,
                        sections = updatedSections
                    });
                    File.WriteAllText(saveDataFilePath, savedContent);

                    GetGameSections();

                }
            }
        }

        public void ToggleAddNewGameSection (ComboBox selector)
        {
            if (isAppInit)
            {
                ItemCollection selectorItems = selector.Items;
                int selectedIndex = selector.SelectedIndex;
                object rawSelectorSelectedItem = selectorItems[selectedIndex];
                ComboBoxItem selectorSelectedItem = ((ComboBoxItem)(rawSelectorSelectedItem));
                object rawSelectorSelectedItemContent = selectorSelectedItem.Content;
                string selectorSelectedItemContent = rawSelectorSelectedItemContent.ToString();
                bool isRemove = selectorSelectedItemContent == "Удалить этот раздел";
                bool isNotDefaultHeader = selectorSelectedItemContent != "Выбрать раздел";
                if (isRemove)
                {
                    // RemoveGameSection(null);
                    RemoveAddGameSection();
                }
                else if (isNotDefaultHeader)
                {
                    Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
                    string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
                    string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    string saveDataFileContent = File.ReadAllText(saveDataFilePath);
                    SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
                    List<Game> currentGames = loadedContent.games;
                    List<FriendSettings> updatedFriends = loadedContent.friends;
                    Settings currentSettings = loadedContent.settings;
                    List<string> currentCollections = loadedContent.collections;
                    Notifications currentNotifications = loadedContent.notifications;
                    List<string> currentCategories = loadedContent.categories;
                    List<string> currentRecentChats = loadedContent.recentChats;
                    Recommendations currentRecommendations = loadedContent.recommendations;
                    string currentLogoutDate = loadedContent.logoutDate;
                    List<string> updatedSections = loadedContent.sections;
                    updatedSections.Add(selectorSelectedItemContent);
                    string savedContent = js.Serialize(new SavedContent
                    {
                        games = currentGames,
                        friends = updatedFriends,
                        settings = currentSettings,
                        collections = currentCollections,
                        notifications = currentNotifications,
                        categories = currentCategories,
                        recentChats = currentRecentChats,
                        recommendations = currentRecommendations,
                        logoutDate = currentLogoutDate,
                        sections = updatedSections
                    });
                    File.WriteAllText(saveDataFilePath, savedContent);

                    // RemoveGameSection(null);
                    RemoveAddGameSection();
                    GetGameSections();

                }
            }
        }

        public void RemoveAddGameSection ()
        {
            addGameSection.Visibility = invisible;
            addGameSectionLabel.Foreground = System.Windows.Media.Brushes.Black;
            addGameSectionIcon.Foreground = System.Windows.Media.Brushes.Black;
            addGameSectionSelector.SelectedIndex = 0;
        }

        public void RemoveGameSection (StackPanel section)
        {
            /*addGameSection.Visibility = invisible;
            addGameSectionLabel.Foreground = System.Windows.Media.Brushes.Black;
            addGameSectionIcon.Foreground = System.Windows.Media.Brushes.Black;*/

            int sectionIndex = gameSections.Children.IndexOf(section);
            Environment.SpecialFolder localApplicationDataFolder = Environment.SpecialFolder.LocalApplicationData;
            string localApplicationDataFolderPath = Environment.GetFolderPath(localApplicationDataFolder);
            string saveDataFilePath = localApplicationDataFolderPath + @"\OfficeWare\GameManager\" + currentUserId + @"\save-data.txt";
            JavaScriptSerializer js = new JavaScriptSerializer();
            string saveDataFileContent = File.ReadAllText(saveDataFilePath);
            SavedContent loadedContent = js.Deserialize<SavedContent>(saveDataFileContent);
            List<Game> currentGames = loadedContent.games;
            List<FriendSettings> updatedFriends = loadedContent.friends;
            Settings currentSettings = loadedContent.settings;
            List<string> currentCollections = loadedContent.collections;
            Notifications currentNotifications = loadedContent.notifications;
            List<string> currentCategories = loadedContent.categories;
            List<string> currentRecentChats = loadedContent.recentChats;
            Recommendations currentRecommendations = loadedContent.recommendations;
            string currentLogoutDate = loadedContent.logoutDate;
            List<string> updatedSections = loadedContent.sections;
            updatedSections.RemoveAt(sectionIndex);
            string savedContent = js.Serialize(new SavedContent
            {
                games = currentGames,
                friends = updatedFriends,
                settings = currentSettings,
                collections = currentCollections,
                notifications = currentNotifications,
                categories = currentCategories,
                recentChats = currentRecentChats,
                recommendations = currentRecommendations,
                logoutDate = currentLogoutDate,
                sections = updatedSections
            });
            File.WriteAllText(saveDataFilePath, savedContent);
            gameSections.Children.Remove(section);

        }

        private void ToggleMainIllustrationSettingsHandler (object sender, SelectionChangedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            ToggleMainIllustrationSettings(selector);
        }

        public void ToggleMainIllustrationSettings (ComboBox selector)
        {
            if (isAppInit)
            {
                int selectedIndex = selector.SelectedIndex;
                bool isItemSelected = selectedIndex != 0;
                if (isItemSelected)
                {
                    object illustrationIdData = mainIllustration.DataContext;
                    string illustrationId = ((string)(illustrationIdData));
                    ItemCollection selectorItems = selector.Items;
                    object rawSelectorSelectedItem = selectorItems[selectedIndex];
                    ComboBoxItem selectorSelectedItem = ((ComboBoxItem)(rawSelectorSelectedItem));
                    object rawSelectorSelectedItemContent = selectorSelectedItem.Content;
                    string selectorSelectedItemContent = ((string)(rawSelectorSelectedItemContent));
                    bool isAddToFavorite = selectorSelectedItemContent == "В избранное";
                    bool isRemoveFromFavorite = selectorSelectedItemContent == "Удалить из избранного";
                    bool isShare = selectorSelectedItemContent == "Поделиться";
                    if (isAddToFavorite)
                    {
                        try
                        {
                            HttpWebRequest illustrationFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/favorites/add/?id=" + illustrationId + "&user=" + currentUserId);
                            illustrationFavoriteRelationsWebRequest.Method = "GET";
                            illustrationFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse illustrationFavoriteRelationsWebResponse = (HttpWebResponse)illustrationFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var illustrationFavoriteRelationsReader = new StreamReader(illustrationFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    JavaScriptSerializer js = new JavaScriptSerializer();
                                    string objText = illustrationFavoriteRelationsReader.ReadToEnd();
                                    UserResponseInfo myIllustrationFavoriteRelationsObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    string status = myIllustrationFavoriteRelationsObj.status;
                                    bool isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        selectorSelectedItem.Content = "Удалить из избранного";
                                        selector.SelectedIndex = 0;
                                    }
                                }
                            }
                        }
                        catch (System.Net.WebException)
                        {
                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                            this.Close();
                        }
                    }
                    else if (isRemoveFromFavorite)
                    {
                        try
                        {
                            HttpWebRequest illustrationFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/illustrations/favorites/remove/?illustration=" + illustrationId + "&user=" + currentUserId);
                            illustrationFavoriteRelationsWebRequest.Method = "GET";
                            illustrationFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse illustrationFavoriteRelationsWebResponse = (HttpWebResponse)illustrationFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var illustrationFavoriteRelationsReader = new StreamReader(illustrationFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    JavaScriptSerializer js = new JavaScriptSerializer();
                                    string objText = illustrationFavoriteRelationsReader.ReadToEnd();
                                    UserResponseInfo myIllustrationFavoriteRelationsObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    string status = myIllustrationFavoriteRelationsObj.status;
                                    bool isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        selectorSelectedItem.Content = "В избранное";
                                        selector.SelectedIndex = 0;
                                    }
                                }
                            }
                        }
                        catch (System.Net.WebException)
                        {
                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                            this.Close();
                        }
                    }
                    else if (isShare)
                    {
                        Dialogs.ActivityShareDialog dialog = new Dialogs.ActivityShareDialog(currentUserId, "illustrations", illustrationId);
                        dialog.Closed += GetMyActivitiesHandler;
                        dialog.Show();
                        selector.SelectedIndex = 0;
                    }
                }
            }
        }

        public void GetMyActivitiesHandler (object sender, EventArgs e)
        {
            GetMyActivities();
        }

        private void ToggleMainScreenShotSettingsHandler (object sender, SelectionChangedEventArgs e)
        {
            ComboBox selector = ((ComboBox)(sender));
            ToggleMainScreenShotSettings(selector);
        }

        public void ToggleMainScreenShotSettings (ComboBox selector)
        {
            if (isAppInit)
            {
                int selectedIndex = selector.SelectedIndex;
                bool isItemSelected = selectedIndex != 0;
                if (isItemSelected)
                {
                    object mainCommunityScreenShotIdData = mainCommunityScreenShot.DataContext;
                    string communityScreenShotId = ((string)(mainCommunityScreenShotIdData));
                    ItemCollection selectorItems = selector.Items;
                    object rawSelectorSelectedItem = selectorItems[selectedIndex];
                    ComboBoxItem selectorSelectedItem = ((ComboBoxItem)(rawSelectorSelectedItem));
                    object rawSelectorSelectedItemContent = selectorSelectedItem.Content;
                    string selectorSelectedItemContent = ((string)(rawSelectorSelectedItemContent));
                    bool isAddToFavorite = selectorSelectedItemContent == "В избранное";
                    bool isRemoveFromFavorite = selectorSelectedItemContent == "Удалить из избранного";
                    bool isShare = selectorSelectedItemContent == "Поделиться";
                    if (isAddToFavorite)
                    {
                        try
                        {
                            HttpWebRequest manualFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/favorites/add/?id=" + communityScreenShotId + "&user=" + currentUserId);
                            manualFavoriteRelationsWebRequest.Method = "GET";
                            manualFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse manualFavoriteRelationsWebResponse = (HttpWebResponse)manualFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var manualFavoriteRelationsReader = new StreamReader(manualFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    JavaScriptSerializer js = new JavaScriptSerializer();
                                    string objText = manualFavoriteRelationsReader.ReadToEnd();
                                    ManualFavoriteRelationsResponseInfo myManualFavoriteRelationsObj = (ManualFavoriteRelationsResponseInfo)js.Deserialize(objText, typeof(ManualFavoriteRelationsResponseInfo));
                                    string status = myManualFavoriteRelationsObj.status;
                                    bool isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        selectorSelectedItem.Content = "Удалить из избранного";
                                        selector.SelectedIndex = 0;
                                    }
                                }
                            }
                        }
                        catch (System.Net.WebException)
                        {
                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                            this.Close();
                        }
                    }
                    else if (isRemoveFromFavorite)
                    {
                        try
                        {
                            HttpWebRequest screenShotFavoriteRelationsWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/screenshots/favorites/remove/?screenshot=" + communityScreenShotId + "&user=" + currentUserId);
                            screenShotFavoriteRelationsWebRequest.Method = "GET";
                            screenShotFavoriteRelationsWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse screenShotFavoriteRelationsWebResponse = (HttpWebResponse)screenShotFavoriteRelationsWebRequest.GetResponse())
                            {
                                using (var screenShotFavoriteRelationsReader = new StreamReader(screenShotFavoriteRelationsWebResponse.GetResponseStream()))
                                {
                                    JavaScriptSerializer js = new JavaScriptSerializer();
                                    string objText = screenShotFavoriteRelationsReader.ReadToEnd();
                                    UserResponseInfo myScreenShotFavoriteRelationsObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                    string status = myScreenShotFavoriteRelationsObj.status;
                                    bool isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        selectorSelectedItem.Content = "В избранное";
                                        selector.SelectedIndex = 0;
                                    }
                                }
                            }
                        }
                        catch (System.Net.WebException)
                        {
                            MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                            this.Close();
                        }
                    }
                    else if (isShare)
                    {
                        Dialogs.ActivityShareDialog dialog = new Dialogs.ActivityShareDialog(currentUserId, "screenShots", communityScreenShotId);
                        dialog.Closed += GetMyActivitiesHandler;
                        dialog.Show();
                        selector.SelectedIndex = 0;
                    }
                }
            }
        }

        private void ToggleContentControlTabHandler (object sender, SelectionChangedEventArgs e)
        {
            ToggleContentControlTab();
        }


        public void ToggleContentControlTab ()
        {
            if (isAppInit)
            {
                int selectedIndex = contentControl.SelectedIndex;
                bool isScreenShots = selectedIndex == 0;
                bool isIllustrations = selectedIndex == 1;
                bool isManuals = selectedIndex == 6;
                if (isScreenShots)
                {
                    object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
                    bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));
                    if (mySelfContentRadioBtnIsChecked)
                    {
                        contentScreenShotsControl.SelectedIndex = 0;
                    }
                    else
                    {
                        contentScreenShotsControl.SelectedIndex = 1;
                    }
                }
                else if (isIllustrations)
                {
                    object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
                    bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));
                    if (mySelfContentRadioBtnIsChecked)
                    {
                        contentIllustrationsControl.SelectedIndex = 0;
                    }
                    else
                    {
                        contentIllustrationsControl.SelectedIndex = 1;
                    }
                }
                else if (isManuals)
                {
                    object rawMySelfContentRadioBtnIsChecked = mySelfContentRadioBtn.IsChecked;
                    bool mySelfContentRadioBtnIsChecked = ((bool)(rawMySelfContentRadioBtnIsChecked));
                    if (mySelfContentRadioBtnIsChecked)
                    {
                        SelectManualsContentItem(0);
                    }
                    else
                    {
                        SelectManualsContentItem(1);
                    }
                }
            }
        }

        public void OpenPlayedFriendsHandler (object sender, RoutedEventArgs e)
        {
            OpenPlayedFriends();
        }

        public void OpenPlayedFriends ()
        {
            string currentGameName = gameNameLabel.Text;
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + currentUserId);
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UserResponseInfo myobj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            User user = myobj.user;
                            HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                            innerWebRequest.Method = "GET";
                            innerWebRequest.UserAgent = ".NET Framework Test Client";
                            using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                            {
                                using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                {
                                    js = new JavaScriptSerializer();
                                    objText = innerReader.ReadToEnd();
                                    GamesListResponseInfo myInnerObj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                                    status = myInnerObj.status;
                                    isOkStatus = status == "OK";
                                    if (isOkStatus)
                                    {
                                        List<GameResponseInfo> games = myInnerObj.games;
                                        List<GameResponseInfo> gameResults = games.Where<GameResponseInfo>((GameResponseInfo game) =>
                                        {
                                            string gameName = game.name;
                                            bool isNamesMatches = game.name == currentGameName;
                                            return isNamesMatches;
                                        }).ToList<GameResponseInfo>();
                                        int countResults = gameResults.Count;
                                        bool isResultsFound = countResults >= 1;
                                        if (isResultsFound)
                                        {
                                            GameResponseInfo foundedGame = gameResults[0];
                                            string foundedGameId = foundedGame._id;
                                            HttpWebRequest nestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/sessions/all");
                                            nestedWebRequest.Method = "GET";
                                            nestedWebRequest.UserAgent = ".NET Framework Test Client";
                                            using (HttpWebResponse nestedWebResponse = (HttpWebResponse)nestedWebRequest.GetResponse())
                                            {
                                                using (var nestedReader = new StreamReader(nestedWebResponse.GetResponseStream()))
                                                {
                                                    js = new JavaScriptSerializer();
                                                    objText = nestedReader.ReadToEnd();
                                                    GameSessionsResponseInfo myNestedObj = (GameSessionsResponseInfo)js.Deserialize(objText, typeof(GameSessionsResponseInfo));
                                                    status = myNestedObj.status;
                                                    isOkStatus = status == "OK";
                                                    if (isOkStatus)
                                                    {
                                                        List<GameSession> sessions = myNestedObj.sessions;
                                                        HttpWebRequest innerNestedWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                                                        innerNestedWebRequest.Method = "GET";
                                                        innerNestedWebRequest.UserAgent = ".NET Framework Test Client";
                                                        using (HttpWebResponse innerNestedWebResponse = (HttpWebResponse)innerNestedWebRequest.GetResponse())
                                                        {
                                                            using (var innerNestedReader = new StreamReader(innerNestedWebResponse.GetResponseStream()))
                                                            {
                                                                js = new JavaScriptSerializer();
                                                                objText = innerNestedReader.ReadToEnd();
                                                                FriendsResponseInfo myInnerNestedObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                                                                status = myInnerNestedObj.status;
                                                                isOkStatus = status == "OK";
                                                                if (isOkStatus)
                                                                {
                                                                    List<Friend> friends = myInnerNestedObj.friends;
                                                                    HttpWebRequest relationWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/relations/all");
                                                                    relationWebRequest.Method = "GET";
                                                                    relationWebRequest.UserAgent = ".NET Framework Test Client";
                                                                    using (HttpWebResponse relationWebResponse = (HttpWebResponse)relationWebRequest.GetResponse())
                                                                    {
                                                                        using (var relationReader = new StreamReader(relationWebResponse.GetResponseStream()))
                                                                        {
                                                                            js = new JavaScriptSerializer();
                                                                            objText = relationReader.ReadToEnd();
                                                                            GameRelationsResponseInfo myRelationObj = (GameRelationsResponseInfo)js.Deserialize(objText, typeof(GameRelationsResponseInfo));
                                                                            status = myRelationObj.status;
                                                                            isOkStatus = status == "OK";
                                                                            if (isOkStatus)
                                                                            {
                                                                                List<GameRelation> gameRelations = myRelationObj.relations;
                                                                                
                                                                                List<Friend> myFriends = friends.Where<Friend>((Friend joint) =>
                                                                                {
                                                                                    string localUserId = joint.user;
                                                                                    bool isMyFriend = localUserId == currentUserId;
                                                                                    return isMyFriend;
                                                                                }).ToList<Friend>();
                                                                                List<string> friendsIds = new List<string>();
                                                                                foreach (Friend myFriend in myFriends)
                                                                                {
                                                                                    string friendId = myFriend.friend;
                                                                                    friendsIds.Add(friendId);
                                                                                }
                                                                                List<GameSession> myFriendSessions = sessions.Where<GameSession>((GameSession session) =>
                                                                                {
                                                                                    string sessionUserId = session.user;
                                                                                    string sessionGameId = session.game;
                                                                                    bool isCurrentGameSession = sessionGameId == foundedGameId;
                                                                                    bool isMyFriendSession = friendsIds.Contains(sessionUserId);
                                                                                    bool isNotMe = currentUserId != sessionUserId;
                                                                                    return isMyFriendSession && isCurrentGameSession && isNotMe;
                                                                                }).Distinct(new GameSessionComparer()).ToList<GameSession>();
                                                                                DateTime currentDate = DateTime.Now;
                                                                                List<GameSession> beforeMyFriendSessions = myFriendSessions.Where<GameSession>((GameSession session) =>
                                                                                {
                                                                                    DateTime sessionDate = session.date;
                                                                                    TimeSpan interval = currentDate.Subtract(sessionDate);
                                                                                    double intervalDays = interval.TotalDays;
                                                                                    bool isBefore = intervalDays > 14;
                                                                                    return isBefore;
                                                                                }).ToList<GameSession>();
                                                                                List<GameSession> recentMyFriendSessions = myFriendSessions.Where<GameSession>((GameSession session) =>
                                                                                {
                                                                                    DateTime sessionDate = session.date;
                                                                                    TimeSpan interval = currentDate.Subtract(sessionDate);
                                                                                    double intervalDays = interval.TotalDays;
                                                                                    bool isRecent = intervalDays <= 14;
                                                                                    return isRecent;
                                                                                }).ToList<GameSession>();
                                                                                string userName = user.name;
                                                                                string gameName = foundedGame.name;
                                                                                playedFriendsUserNameLabel.Text = gameName;
                                                                                playedFriendsUserAvatar.BeginInit();
                                                                                playedFriendsUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/users/?id=" + currentUserId));
                                                                                playedFriendsUserAvatar.EndInit();
                                                                                string playedFriendsGameNameLabelContent = "Друзья, играющие в " + gameName;
                                                                                playedFriendsGameNameLabel.Text = playedFriendsGameNameLabelContent;
                                                                                playedFriendsGameThumbnail.BeginInit();
                                                                                playedFriendsGameThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + currentGameName));
                                                                                playedFriendsGameThumbnail.EndInit();
                                                                                playedFriendsMyTimeUserNameLabel.Text = userName;
                                                                                playedFriendsMyTimeUserAvatar.BeginInit();
                                                                                playedFriendsMyTimeUserAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?id=" + currentUserId));
                                                                                playedFriendsMyTimeUserAvatar.EndInit();
                                                                                List<GameRelation> userGameRelations = gameRelations.Where<GameRelation>((GameRelation relation) =>
                                                                                {
                                                                                    string relationUserId = relation.user;
                                                                                    string relationGameId = relation.game;
                                                                                    bool isCurrentUser = relationUserId == currentUserId;
                                                                                    bool isCurrentGame = relationGameId == foundedGameId;
                                                                                    return isCurrentUser && isCurrentGame;
                                                                                }).ToList<GameRelation>();
                                                                                int userGameRelationsCount = userGameRelations.Count;
                                                                                bool isHaveRelations = userGameRelationsCount >= 1;
                                                                                if (isHaveRelations)
                                                                                {
                                                                                    GameRelation userGameRelation = userGameRelations[0];
                                                                                    string userGameRelationHours = userGameRelation.hours;
                                                                                    string playedFriendsMyTimeHoursLabelContent = userGameRelationHours + " ч.";
                                                                                    playedFriendsMyTimeHoursLabel.Text = playedFriendsMyTimeHoursLabelContent;
                                                                                }
                                                                                recentPlayedFriends.Children.Clear();
                                                                                foreach (GameSession recentMyFriendSession in recentMyFriendSessions)
                                                                                {
                                                                                    string recentMyFriendSessionUserId = recentMyFriendSession.user;
                                                                                    HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + recentMyFriendSessionUserId);
                                                                                    userWebRequest.Method = "GET";
                                                                                    userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                    using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                                    {
                                                                                        using (StreamReader userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                                        {
                                                                                            js = new JavaScriptSerializer();
                                                                                            objText = userReader.ReadToEnd();
                                                                                            UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                            status = myUserObj.status;
                                                                                            isOkStatus = status == "OK";
                                                                                            if (isOkStatus)
                                                                                            {
                                                                                                User localUser = myUserObj.user;

                                                                                                userGameRelations = gameRelations.Where<GameRelation>((GameRelation relation) =>
                                                                                                {
                                                                                                    string relationUserId = relation.user;
                                                                                                    string relationGameId = relation.game;
                                                                                                    bool isCurrentUser = relationUserId == recentMyFriendSessionUserId;
                                                                                                    bool isCurrentGame = relationGameId == foundedGameId;
                                                                                                    return isCurrentUser && isCurrentGame;
                                                                                                }).ToList<GameRelation>();
                                                                                                userGameRelationsCount = userGameRelations.Count;
                                                                                                isHaveRelations = userGameRelationsCount >= 1;
                                                                                                Debugger.Log(0, "debug", "recentPlayedFriend isHaveRelations: " + isHaveRelations);
                                                                                                if (isHaveRelations)
                                                                                                {
                                                                                                    GameRelation userGameRelation = userGameRelations[0];
                                                                                                    string localUserName = localUser.name;
                                                                                                    string userGameRelationHours = userGameRelation.hours;
                                                                                                    StackPanel recentPlayedFriend = new StackPanel();
                                                                                                    recentPlayedFriend.Margin = new Thickness(15);
                                                                                                    recentPlayedFriend.Width = 325;
                                                                                                    recentPlayedFriend.Background = System.Windows.Media.Brushes.SlateGray;
                                                                                                    recentPlayedFriend.Orientation = Orientation.Horizontal;
                                                                                                    Image recentPlayedFriendAvatar = new Image();
                                                                                                    recentPlayedFriendAvatar.Margin = new Thickness(15);
                                                                                                    recentPlayedFriendAvatar.Width = 40;
                                                                                                    recentPlayedFriendAvatar.Height = 40;
                                                                                                    recentPlayedFriendAvatar.ImageFailed += SetDefautAvatarHandler;
                                                                                                    recentPlayedFriendAvatar.BeginInit();
                                                                                                    recentPlayedFriendAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/user/avatar/?id=" + recentMyFriendSessionUserId));
                                                                                                    recentPlayedFriendAvatar.EndInit();
                                                                                                    recentPlayedFriend.Children.Add(recentPlayedFriendAvatar);
                                                                                                    StackPanel recentPlayedFriendAside = new StackPanel();
                                                                                                    recentPlayedFriendAside.Margin = new Thickness(15, 0, 15, 0);
                                                                                                    TextBlock recentPlayedFriendAsideUserNameLabel = new TextBlock();
                                                                                                    recentPlayedFriendAsideUserNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                    recentPlayedFriendAsideUserNameLabel.Text = localUserName;
                                                                                                    recentPlayedFriendAside.Children.Add(recentPlayedFriendAsideUserNameLabel);
                                                                                                    TextBlock recentPlayedFriendAsideUserTimeLabel = new TextBlock();
                                                                                                    recentPlayedFriendAsideUserTimeLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                    string recentPlayedFriendAsideUserTimeLabelContent = userGameRelationHours + " ч.";
                                                                                                    recentPlayedFriendAsideUserTimeLabel.Text = recentPlayedFriendAsideUserTimeLabelContent;
                                                                                                    recentPlayedFriendAside.Children.Add(recentPlayedFriendAsideUserTimeLabel);
                                                                                                    TextBlock recentPlayedFriendAsideStatsLabel = new TextBlock();
                                                                                                    recentPlayedFriendAsideStatsLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                    recentPlayedFriendAsideStatsLabel.Text = "Статистика";
                                                                                                    recentPlayedFriendAside.Children.Add(recentPlayedFriendAsideStatsLabel);
                                                                                                    recentPlayedFriend.Children.Add(recentPlayedFriendAside);
                                                                                                    recentPlayedFriends.Children.Add(recentPlayedFriend);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                beforePlayedFriends.Children.Clear();
                                                                                foreach (GameSession beforeMyFriendSession in beforeMyFriendSessions)
                                                                                {
                                                                                    string beforeMyFriendSessionUserId = beforeMyFriendSession.user;
                                                                                    HttpWebRequest userWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + beforeMyFriendSessionUserId);
                                                                                    userWebRequest.Method = "GET";
                                                                                    userWebRequest.UserAgent = ".NET Framework Test Client";
                                                                                    using (HttpWebResponse userWebResponse = (HttpWebResponse)userWebRequest.GetResponse())
                                                                                    {
                                                                                        using (StreamReader userReader = new StreamReader(userWebResponse.GetResponseStream()))
                                                                                        {
                                                                                            js = new JavaScriptSerializer();
                                                                                            objText = userReader.ReadToEnd();
                                                                                            UserResponseInfo myUserObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                                                                            status = myUserObj.status;
                                                                                            isOkStatus = status == "OK";
                                                                                            if (isOkStatus)
                                                                                            {
                                                                                                User localUser = myUserObj.user;
                                                                                                userGameRelations = gameRelations.Where<GameRelation>((GameRelation relation) =>
                                                                                                {
                                                                                                    string relationUserId = relation.user;
                                                                                                    string relationGameId = relation.game;
                                                                                                    bool isCurrentUser = relationUserId == beforeMyFriendSessionUserId;
                                                                                                    bool isCurrentGame = relationGameId == foundedGameId;
                                                                                                    return isCurrentUser && isCurrentGame;
                                                                                                }).ToList<GameRelation>();
                                                                                                userGameRelationsCount = userGameRelations.Count;
                                                                                                isHaveRelations = userGameRelationsCount >= 1;
                                                                                                if (isHaveRelations)
                                                                                                {
                                                                                                    GameRelation userGameRelation = userGameRelations[0];
                                                                                                    string localUserName = localUser.name;
                                                                                                    string userGameRelationHours = userGameRelation.hours;
                                                                                                    StackPanel beforePlayedFriend = new StackPanel();
                                                                                                    beforePlayedFriend.Margin = new Thickness(15);
                                                                                                    beforePlayedFriend.Width = 325;
                                                                                                    beforePlayedFriend.Background = System.Windows.Media.Brushes.SlateGray;
                                                                                                    beforePlayedFriend.Orientation = Orientation.Horizontal;
                                                                                                    Image beforePlayedFriendAvatar = new Image();
                                                                                                    beforePlayedFriendAvatar.Margin = new Thickness(15);
                                                                                                    beforePlayedFriendAvatar.Width = 40;
                                                                                                    beforePlayedFriendAvatar.Height = 40;
                                                                                                    beforePlayedFriendAvatar.ImageFailed += SetDefautAvatarHandler;
                                                                                                    beforePlayedFriendAvatar.BeginInit();
                                                                                                    beforePlayedFriendAvatar.Source = new BitmapImage(new Uri(@"http://localhost:4000/user/avatar/?id=" + beforeMyFriendSessionUserId));
                                                                                                    beforePlayedFriendAvatar.EndInit();
                                                                                                    beforePlayedFriend.Children.Add(beforePlayedFriendAvatar);
                                                                                                    StackPanel beforePlayedFriendAside = new StackPanel();
                                                                                                    beforePlayedFriendAside.Margin = new Thickness(15, 0, 15, 0);
                                                                                                    TextBlock beforePlayedFriendAsideUserNameLabel = new TextBlock();
                                                                                                    beforePlayedFriendAsideUserNameLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                    beforePlayedFriendAsideUserNameLabel.Text = localUserName;
                                                                                                    beforePlayedFriendAside.Children.Add(beforePlayedFriendAsideUserNameLabel);
                                                                                                    TextBlock beforePlayedFriendAsideUserTimeLabel = new TextBlock();
                                                                                                    beforePlayedFriendAsideUserTimeLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                    string beforePlayedFriendAsideUserTimeLabelContent = userGameRelationHours + " ч.";
                                                                                                    beforePlayedFriendAsideUserTimeLabel.Text = beforePlayedFriendAsideUserTimeLabelContent;
                                                                                                    beforePlayedFriendAside.Children.Add(beforePlayedFriendAsideUserTimeLabel);
                                                                                                    TextBlock beforePlayedFriendAsideStatsLabel = new TextBlock();
                                                                                                    beforePlayedFriendAsideStatsLabel.Margin = new Thickness(0, 5, 0, 5);
                                                                                                    beforePlayedFriendAsideStatsLabel.Text = "Статистика";
                                                                                                    beforePlayedFriendAside.Children.Add(beforePlayedFriendAsideStatsLabel);
                                                                                                    beforePlayedFriend.Children.Add(beforePlayedFriendAside);
                                                                                                    beforePlayedFriends.Children.Add(beforePlayedFriend);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                     
                                                                                }
                                                                                mainControl.SelectedIndex = 65;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetHelpGameAndSoftWareSearchHandler (object sender, TextChangedEventArgs e)
        {
            TextBox box = ((TextBox)(sender));
            GetHelpGameAndSoftWareSearch(box);
        }

        public void SendCommonFeedBackHandler (object sender, RoutedEventArgs e)
        {
            SendCommonFeedBack();
        }


        public void SendCommonFeedBack ()
        {
            string feedBackTitle = "";
            int selectedIndex = helpControl.SelectedIndex;
            bool isFamilyLibrarySharing = selectedIndex == 28;
            bool isFamilyView = selectedIndex == 29;
            bool isGuard = selectedIndex == 38;
            bool isMobileAuth = selectedIndex == 40;
            bool isPoints = selectedIndex == 24;
            bool isCommunityFunction = selectedIndex == 37;
            bool isStreams = selectedIndex == 36;
            bool isDiscussions = selectedIndex == 35;
            bool isChats = selectedIndex == 34;
            bool isProfiles = selectedIndex == 33;
            bool isGroups = selectedIndex == 32;
            bool isClientCrashed = selectedIndex == 25;
            bool isClientLogin = selectedIndex == 26;
            bool isBigPicture = selectedIndex == 27;
            bool isStandAlone = selectedIndex == 30;
            bool isCloud = selectedIndex == 31;
            if (isFamilyLibrarySharing)
            {
                feedBackTitle = "Я испытываю проблемы с Family Library Sharing";
            }
            else if (isFamilyView)
            {
                feedBackTitle = "Я испытываю проблемы с семейным просмотром";
            }
            else if (isGuard)
            {
                feedBackTitle = "Я испытываю проблемы с Guard";
            }
            else if (isMobileAuth)
            {
                feedBackTitle = "Проблемы с мобильным аутентификатором";
            }
            else if (isPoints)
            {
                feedBackTitle = "Очки Steam";
            }
            else if (isCommunityFunction)
            {
                feedBackTitle = "Мне всё ещё нужна помощь с функцией сообщества";
            }
            else if (isStreams)
            {
                feedBackTitle = "Я испытываю проблемы с трансляцией";
            }
            else if (isDiscussions)
            {
                feedBackTitle = "У меня есть вопрос об обсуждениях";
            }
            else if (isChats)
            {
                feedBackTitle = "У меня есть вопрос о чате";
            }
            else if (isProfiles)
            {
                feedBackTitle = "У меня есть вопрос о профилях в сообществе";
            }
            else if (isGroups)
            {
                feedBackTitle = "У меня есть вопрос о группах сообществ";
            }
            else if (isClientCrashed)
            {
                feedBackTitle = "Клиент вылетает";
            }
            else if (isClientLogin)
            {
                feedBackTitle = "Я не могу войти в клиент";
            }
            else if (isBigPicture)
            {
                feedBackTitle = "Проблемы с режимом Big Picture";
            }
            else if (isStandAlone)
            {
                feedBackTitle = "Я испытываю проблемы с автономным режимом";
            }
            else if (isCloud)
            {
                feedBackTitle = "У меня возникли проблемы с Cloud";
            }
            else if (isCloud)
            {
                feedBackTitle = "У меня возникли проблемы с Cloud";
            }
            string helpCommonFeedBackBoxContent = helpCommonFeedBackBox.Text;
            try
            {
                string url = "http://localhost:4000/api/feedbacks/add/?id=" + currentUserId + @"&title=" + feedBackTitle + "&content=" + helpCommonFeedBackBoxContent + @"&ext=" + manualAttachmentExt;
                HttpClient httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Add("User-Agent", "C# App");
                MultipartFormDataContent form = new MultipartFormDataContent();
                byte[] imagebytearraystring = manualAttachment;
                form.Add(new ByteArrayContent(imagebytearraystring, 0, imagebytearraystring.Count()), "profile_pic", "mock.png");
                HttpResponseMessage response = httpClient.PostAsync(url, form).Result;
                httpClient.Dispose();
                helpControl.SelectedIndex = 0;
                helpFeedBack.Visibility = invisible;
                helpCommonFeedBackBox.Text = "";
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void SendIncreaseAmountFeedBackHandler (object sender, RoutedEventArgs e)
        {
            SendIncreaseAmountFeedBack();
        }

        public void SendIncreaseAmountFeedBack ()
        {
            string helpIncreaseAmountBoxContent = helpIncreaseAmountBox.Text;
            try
            {
                string url = "http://localhost:4000/api/feedbacks/add/?id=" + currentUserId + @"&title=Проблемы с пополнением кошелька&content=" + helpIncreaseAmountBoxContent + @"&ext=" + manualAttachmentExt;
                HttpClient httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Add("User-Agent", "C# App");
                MultipartFormDataContent form = new MultipartFormDataContent();
                byte[] imagebytearraystring = manualAttachment;
                form.Add(new ByteArrayContent(imagebytearraystring, 0, imagebytearraystring.Count()), "profile_pic", "mock.png");
                HttpResponseMessage response = httpClient.PostAsync(url, form).Result;
                httpClient.Dispose();
                helpControl.SelectedIndex = 0;
                helpIncreaseAmountBox.Text = "";
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetHelpGameAndSoftWareSearch (TextBox box)
        {
            helpGameAndSoftWareSearchResults.Children.Clear();
            string boxContent = box.Text;
            string insensitiveCaseBoxContent = boxContent.ToLower();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            totalGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameName = someGame.name;
                                string insensitiveCaseSomeGameName = someGameName.ToLower();
                                bool isFilterMatch = insensitiveCaseSomeGameName.Contains(insensitiveCaseBoxContent);
                                return isFilterMatch;
                            }).ToList<GameResponseInfo>();
                            int totalGamesCount = totalGames.Count;
                            bool isHaveResults = totalGamesCount >= 1;
                            string infoLabelContent = "Извините! Поиск не дал никаких результатов.";
                            if (isHaveResults)
                            {
                                infoLabelContent = "Товары";
                            }
                            TextBlock infoLabel = new TextBlock();
                            infoLabel.Text = infoLabelContent;
                            infoLabel.Margin = new Thickness(15);
                            infoLabel.FontSize = 18;
                            helpGameAndSoftWareSearchResults.Children.Add(infoLabel);
                            foreach (GameResponseInfo totalGamesItem in totalGames)
                            {
                                string totalGamesItemId = totalGamesItem._id;
                                string totalGamesItemName = totalGamesItem.name;
                                DockPanel game = new DockPanel();
                                game.Margin = new Thickness(15);
                                game.Background = System.Windows.Media.Brushes.LightGray;
                                StackPanel gameAside = new StackPanel();
                                gameAside.Margin = new Thickness(15);
                                gameAside.Orientation = Orientation.Horizontal;
                                gameAside.DataContext = totalGamesItemId;
                                game.Children.Add(gameAside);
                                Image gameAsideThumbnail = new Image();
                                gameAsideThumbnail.VerticalAlignment = VerticalAlignment.Center;
                                gameAsideThumbnail.Width = 35;
                                gameAsideThumbnail.Height = 35;
                                gameAsideThumbnail.Margin = new Thickness(15, 0, 15, 0);
                                gameAsideThumbnail.BeginInit();
                                gameAsideThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                gameAsideThumbnail.EndInit();
                                gameAside.Children.Add(gameAsideThumbnail);
                                TextBlock gameAsideNameLabel = new TextBlock();
                                gameAsideNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                gameAsideNameLabel.Text = totalGamesItemName;
                                gameAsideNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                gameAside.Children.Add(gameAsideNameLabel);
                                PackIcon gameIcon = new PackIcon();
                                gameIcon.VerticalAlignment = VerticalAlignment.Center;
                                gameIcon.Margin = new Thickness(15, 0, 15, 0);
                                gameIcon.HorizontalAlignment = HorizontalAlignment.Right;
                                gameIcon.Kind = PackIconKind.ChevronRight;
                                game.Children.Add(gameIcon);
                                game.DataContext = "41";
                                game.MouseLeftButtonUp += ToggleHelpControlHandler;
                                helpGameAndSoftWareSearchResults.Children.Add(game);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void GetHelpSearchHandler (object sender, TextChangedEventArgs e)
        {
            TextBox box = ((TextBox)(sender));
            GetHelpSearch(box);
        }

        public void GetHelpSearch (TextBox box)
        {
            helpSearchResults.Children.Clear();
            string boxContent = box.Text;
            string insensitiveCaseBoxContent = boxContent.ToLower();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/games/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        GamesListResponseInfo myobj = (GamesListResponseInfo)js.Deserialize(objText, typeof(GamesListResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<GameResponseInfo> totalGames = myobj.games;
                            totalGames = totalGames.Where<GameResponseInfo>((GameResponseInfo someGame) =>
                            {
                                string someGameName = someGame.name;
                                string insensitiveCaseSomeGameName = someGameName.ToLower();
                                bool isFilterMatch = insensitiveCaseSomeGameName.Contains(insensitiveCaseBoxContent);
                                return isFilterMatch;
                            }).ToList<GameResponseInfo>();
                            int totalGamesCount = totalGames.Count;
                            bool isHaveResults = totalGamesCount >= 1;
                            string infoLabelContent = "Извините! Поиск не дал никаких результатов.";
                            if (isHaveResults)
                            {
                                infoLabelContent = "Товары";
                            }
                            TextBlock infoLabel = new TextBlock();
                            infoLabel.Text = infoLabelContent;
                            infoLabel.Margin = new Thickness(15);
                            infoLabel.FontSize = 18;
                            helpSearchResults.Children.Add(infoLabel);
                            foreach (GameResponseInfo totalGamesItem in totalGames)
                            {
                                string totalGamesItemId = totalGamesItem._id;
                                string totalGamesItemName = totalGamesItem.name;
                                DockPanel game = new DockPanel();
                                game.Margin = new Thickness(15);
                                game.Background = System.Windows.Media.Brushes.LightGray;
                                StackPanel gameAside = new StackPanel();
                                gameAside.Margin = new Thickness(15);
                                gameAside.Orientation = Orientation.Horizontal;
                                gameAside.DataContext = totalGamesItemId;
                                game.Children.Add(gameAside);
                                Image gameAsideThumbnail = new Image();
                                gameAsideThumbnail.VerticalAlignment = VerticalAlignment.Center;
                                gameAsideThumbnail.Width = 35;
                                gameAsideThumbnail.Height = 35;
                                gameAsideThumbnail.Margin = new Thickness(15, 0, 15, 0);
                                gameAsideThumbnail.BeginInit();
                                gameAsideThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/game/thumbnail/?name=" + totalGamesItemName));
                                gameAsideThumbnail.EndInit();
                                gameAside.Children.Add(gameAsideThumbnail);
                                TextBlock gameAsideNameLabel = new TextBlock();
                                gameAsideNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                gameAsideNameLabel.Text = totalGamesItemName;
                                gameAsideNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                gameAside.Children.Add(gameAsideNameLabel);
                                PackIcon gameIcon = new PackIcon();
                                gameIcon.VerticalAlignment = VerticalAlignment.Center;
                                gameIcon.Margin = new Thickness(15, 0, 15, 0);
                                gameIcon.HorizontalAlignment = HorizontalAlignment.Right;
                                gameIcon.Kind = PackIconKind.ChevronRight;
                                game.Children.Add(gameIcon);
                                game.DataContext = "41";
                                game.MouseLeftButtonUp += ToggleHelpControlHandler;
                                helpSearchResults.Children.Add(game);
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        public void GetPossibleFriendScammers ()
        {
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/friends/get");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        string objText = reader.ReadToEnd();
                        FriendsResponseInfo myObj = (FriendsResponseInfo)js.Deserialize(objText, typeof(FriendsResponseInfo));
                        string status = myObj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<Friend> receivedFriends = myObj.friends;
                            List<Friend> myFriends = receivedFriends.Where<Friend>((Friend friend) =>
                            {
                                return friend.user == currentUserId;
                            }).ToList<Friend>();
                            int countFriends = myFriends.Count;
                            List<string> friendsIds = new List<string>();
                            foreach (Friend friendInfo in myFriends)
                            {
                                string friendId = friendInfo.friend;
                                HttpWebRequest innerWebRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/get/?id=" + friendId);
                                innerWebRequest.Method = "GET";
                                innerWebRequest.UserAgent = ".NET Framework Test Client";
                                using (HttpWebResponse innerWebResponse = (HttpWebResponse)innerWebRequest.GetResponse())
                                {
                                    using (var innerReader = new StreamReader(innerWebResponse.GetResponseStream()))
                                    {
                                        js = new JavaScriptSerializer();
                                        objText = innerReader.ReadToEnd();
                                        UserResponseInfo myInnerObj = (UserResponseInfo)js.Deserialize(objText, typeof(UserResponseInfo));
                                        status = myInnerObj.status;
                                        isOkStatus = status == "OK";
                                        if (isOkStatus)
                                        {
                                            User user = myInnerObj.user;
                                            string userId = user._id;
                                            string userName = user.name;
                                            DockPanel possibleScammer = new DockPanel();
                                            possibleScammer.Margin = new Thickness(15);
                                            possibleScammer.Background = System.Windows.Media.Brushes.LightGray;
                                            StackPanel possibleScammerAside = new StackPanel();
                                            possibleScammerAside.DataContext = userId;
                                            possibleScammerAside.Margin = new Thickness(15);
                                            possibleScammerAside.Orientation = Orientation.Horizontal;
                                            possibleScammer.Children.Add(possibleScammerAside);
                                            Image possibleScammerAsideThumbnail = new Image();
                                            possibleScammerAsideThumbnail.VerticalAlignment = VerticalAlignment.Center;
                                            possibleScammerAsideThumbnail.Width = 35;
                                            possibleScammerAsideThumbnail.Height = 35;
                                            possibleScammerAsideThumbnail.Margin = new Thickness(15, 0, 15, 0);
                                            possibleScammerAsideThumbnail.BeginInit();
                                            possibleScammerAsideThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?name=" + friendId));
                                            possibleScammerAsideThumbnail.EndInit();
                                            possibleScammerAside.Children.Add(possibleScammerAsideThumbnail);
                                            TextBlock possibleScammerAsideNameLabel = new TextBlock();
                                            possibleScammerAsideNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                            possibleScammerAsideNameLabel.Text = userName;
                                            possibleScammerAsideNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                            possibleScammerAside.Children.Add(possibleScammerAsideNameLabel);
                                            PackIcon possibleScammerIcon = new PackIcon();
                                            possibleScammerIcon.VerticalAlignment = VerticalAlignment.Center;
                                            possibleScammerIcon.Margin = new Thickness(15, 0, 15, 0);
                                            possibleScammerIcon.HorizontalAlignment = HorizontalAlignment.Right;
                                            possibleScammerIcon.Kind = PackIconKind.ChevronRight;
                                            possibleScammer.Children.Add(possibleScammerIcon);
                                            possibleScammer.DataContext = "44";
                                            possibleScammer.MouseLeftButtonUp += ToggleHelpControlHandler;
                                            possibleFriendScammers.Children.Add(possibleScammer);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

        private void GetPossibleScammersHandler (object sender, TextChangedEventArgs e)
        {
            GetPossibleScammers();
        }

        public void GetPossibleScammers ()
        {
            possibleScammers.Children.Clear();
            try
            {
                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create("http://localhost:4000/api/users/all");
                webRequest.Method = "GET";
                webRequest.UserAgent = ".NET Framework Test Client";
                using (HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
                {
                    using (var reader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        var objText = reader.ReadToEnd();
                        UsersResponseInfo myobj = (UsersResponseInfo)js.Deserialize(objText, typeof(UsersResponseInfo));
                        string status = myobj.status;
                        bool isOkStatus = status == "OK";
                        if (isOkStatus)
                        {
                            List<string> usersIds = new List<string>();
                            List<User> localUsers = myobj.users;
                            foreach (User user in localUsers)
                            {
                                string userId = user._id;
                                bool isMe = userId == currentUserId;
                                bool isNotMe = !isMe;
                                if (isNotMe)
                                {
                                    string userName = user.name;
                                    string possibleScammersBoxContent = possibleScammersBox.Text;
                                    int possibleScammersBoxContentLength = possibleScammersBoxContent.Length;
                                    bool isFilterEnabled = possibleScammersBoxContentLength >= 1;
                                    string insensitiveCasePossibleScammersBoxContent = possibleScammersBoxContent.ToLower();
                                    bool isKeywordsMatch = userName.Contains(insensitiveCasePossibleScammersBoxContent);
                                    bool isUserMatch = isKeywordsMatch && isFilterEnabled;
                                    if (isUserMatch)
                                    {
                                        DockPanel possibleScammer = new DockPanel();
                                        possibleScammer.Margin = new Thickness(15);
                                        possibleScammer.Background = System.Windows.Media.Brushes.LightGray;
                                        StackPanel possibleScammerAside = new StackPanel();
                                        possibleScammerAside.DataContext = userId;
                                        possibleScammerAside.Margin = new Thickness(15);
                                        possibleScammerAside.Orientation = Orientation.Horizontal;
                                        possibleScammer.Children.Add(possibleScammerAside);
                                        Image possibleScammerAsideThumbnail = new Image();
                                        possibleScammerAsideThumbnail.VerticalAlignment = VerticalAlignment.Center;
                                        possibleScammerAsideThumbnail.Width = 35;
                                        possibleScammerAsideThumbnail.Height = 35;
                                        possibleScammerAsideThumbnail.Margin = new Thickness(15, 0, 15, 0);
                                        possibleScammerAsideThumbnail.BeginInit();
                                        possibleScammerAsideThumbnail.Source = new BitmapImage(new Uri(@"http://localhost:4000/api/user/avatar/?name=" + userId));
                                        possibleScammerAsideThumbnail.EndInit();
                                        possibleScammerAside.Children.Add(possibleScammerAsideThumbnail);
                                        TextBlock possibleScammerAsideNameLabel = new TextBlock();
                                        possibleScammerAsideNameLabel.VerticalAlignment = VerticalAlignment.Center;
                                        possibleScammerAsideNameLabel.Text = userName;
                                        possibleScammerAsideNameLabel.Margin = new Thickness(15, 0, 15, 0);
                                        possibleScammerAside.Children.Add(possibleScammerAsideNameLabel);
                                        PackIcon possibleScammerIcon = new PackIcon();
                                        possibleScammerIcon.VerticalAlignment = VerticalAlignment.Center;
                                        possibleScammerIcon.Margin = new Thickness(15, 0, 15, 0);
                                        possibleScammerIcon.HorizontalAlignment = HorizontalAlignment.Right;
                                        possibleScammerIcon.Kind = PackIconKind.ChevronRight;
                                        possibleScammer.Children.Add(possibleScammerIcon);
                                        possibleScammer.DataContext = "44";
                                        possibleScammer.MouseLeftButtonUp += ToggleHelpControlHandler;
                                        possibleScammers.Children.Add(possibleScammer);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Net.WebException)
            {
                MessageBox.Show("Не удается подключиться к серверу", "Ошибка");
                this.Close();
            }
        }

    }

    class SavedContent
    {
        public List<Game> games;
        public List<FriendSettings> friends;
        public Settings settings;
        public List<String> collections;
        public Notifications notifications;
        public List<String> categories;
        public List<String> recentChats;
        public Recommendations recommendations;
        public string logoutDate;
        public List<string> sections;
    }

    class Recommendations {
        public bool isEarlyAccess;
        public bool isSoftWare;
        public bool isVideo;
        public bool isSoundTracks;
        public bool isNotReleases;
        public List<string> exceptTags;
    }

    class Notifications
    {
        public bool isNotificationsEnabled;
        public bool notificationsProductFromWantListWithDiscount;
        public bool notificationsProductFromWantListUpdateAcccess;
        public bool notificationsProductFromSubsOrFavoritesUpdateAcccess;
        public bool notificationsProductFromDeveloperUpdateAcccess;
        public bool notificationsStartYearlyDiscount;
        public bool notificationsGroupUpdateGameReview;
        public bool notificationsUpdateIcon;
        public bool notificationsUpdateGames;
    }

    class FriendSettings
    {
        public string id;
        public bool isFriendOnlineNotification;
        public bool isFriendOnlineSound;
        public bool isFriendPlayedNotification;
        public bool isFriendPlayedSound;
        public bool isFriendSendMsgNotification;
        public bool isFriendSendMsgSound;
        public bool isFavoriteFriend;
        public List<string> categories;
    }

    class Game
    {
        public string id;
        public string name;
        public string path;
        public string hours;
        public string date;
        public string installDate;
        public List<string> collections;
        public bool isHidden;
        public string cover;
        public bool overlay;
    }

    class GamesListResponseInfo
    {
        public string status;
        public List<GameResponseInfo> games;
    }

    class GameResponseInfo
    {
        public string _id;
        public string name;
        public int users;
        public int maxUsers;
        public int likes;
        public int price;
        public string platform;
        public string genre;
        public DateTime date;
    }

    class UserResponseInfo
    {
        public string status;
        public User user;
    }

    class User
    {
        public string _id;
        public string login;
        public string password;
        public string name;
        public string country;
        public string about;
        public string status;
        public string friendsListSettings;
        public string gamesSettings;
        public string equipmentSettings;
        public string commentsSettings;
        public int points;
        public int amount;
        public bool isEmailConfirmed;
        public string lastGame;
    }

    class FriendRequestsResponseInfo
    {
        public string status;
        public List<FriendRequest> requests;
    }

    public class FriendRequest
    {
        public string _id;
        public string user;
        public string friend;
    }

    public class GamesStatsResponseInfo
    {
        public string status;
        public int users;
        public int maxUsers;
        public YearlyDiscount yearlyDiscount;
    }

    public class YearlyDiscount
    {
        public string start;
        public string end;
    }

    public class Settings
    {
        public string language;
        public int startWindow;
        public string overlayHotKey;
        public MusicSettings music;
        public string profileTheme;
        public string screenShotsHotKey;
        public string frames;
        public bool showScreenShotsNotification;
        public bool playScreenShotsNotification;
        public bool saveScreenShotsCopy;
        public bool showOverlay;
        public bool familyView;
        public string familyViewCode;
        public List<string> familyViewGames;
        public bool isAddNickAfterFriendNames;
        public bool isHideOfflineFriendsFromCategories;
        public bool isOpenNewChatInNewWindow;
        public bool isNotIncludeImagesAndMediaFiles;
        public bool isRestoreChats;
        public bool isShowTimeIn24;
        public bool isDisableSpellCheck;
        public bool isFriendListAndChatsCompactView;
        public bool isFavoriteCompactView;
        public string chatFontSize;
        public bool isFriendOnlineNotification;
        public bool isFriendOnlineSound;
        public bool isFriendPlayedNotification;
        public bool isFriendPlayedSound;
        public bool isFriendSendMsgNotification;
        public bool isFriendSendMsgSound;
        public bool isFriendSendTalkMsgNotification;
        public bool isFriendSendTalkMsgSound;
        public bool isFriendSendTalkEventNotification;
        public bool isFriendSendTalkEventSound;
        public string sendMsgBlinkWindowType;
        public FriendActivity friendActivity;
    }

    public class FriendActivity {
        public bool isAddFriend;
        public bool isOpenAchievement;
        public bool isBuyGame;
        public bool isInviteGroup;
        public bool isCreateGroup;
        public bool isAddGameToWishList;
        public bool isAddReview;
        public bool isUploadScreenShot;
        public bool isAddVideo;
        public bool isAddSubjectToFavorite;
        public bool isDoAdvertisiment;
        public bool isScheduleEvent;
        public bool isSelectPlayerOfWeek;
        public bool isUpgradeUserToAdmin;
        public bool isReceiveComment;
        public bool isProductDoAdvertisiment;
        public bool isWorkShopDoAdvertisiment;
        public bool isAddGameRecomendation;
        public bool isAddSubject;
        public bool isDetectFromScreenShot;
    }

    public class MusicSettings
    {
        public double volume;
        public List<string> paths;
    }

    public class FileParameter
    {
        public byte[] File { get; set; }
        public string FileName { get; set; }
        public string ContentType { get; set; }
        public FileParameter(byte[] file) : this(file, null) { }
        public FileParameter(byte[] file, string filename) : this(file, filename, null) { }
        public FileParameter(byte[] file, string filename, string contenttype)
        {
            File = file;
            FileName = filename;
            ContentType = contenttype;
        }
    }

    public class CPU
    {
        private DateTime time;
        public DateTime Time
        {
            get { return time; }
            set { time = value; }
        }

        private double percentage;
        public double Percentage
        {
            get { return percentage; }
            set { percentage = value; }
        }

        private double memoryUsage;
        public double MemoryUsage
        {
            get { return memoryUsage; }
            set { memoryUsage = value; }
        }

        public CPU()
        {
        }
        public CPU(DateTime time, double percentage, double memoryUsage)
        {
            this.Time = time;
            this.Percentage = percentage;
            this.MemoryUsage = memoryUsage;
        }

    }

    public class Model
    {
        public double High { get; set; }
        public double Low { get; set; }
        public double Open { get; set; }
        public double Close { get; set; }

        public Model(double high, double low, double open, double close)
        {
            High = high;
            Low = low;
            Open = open;
            Close = close;
        }

    }

    public class ForumsListResponseInfo
    {
        public List<Forum> forums;
        public string status;
    }

    public class Forum
    {
        public string _id;
        public string title;
    }

    public class ForumResponseInfo
    {
        public Forum forum;
        public string status;
    }

    public class ForumTopicsResponseInfo
    {
        public List<Topic> topics;
        public string status;
    }

    public class Topic
    {
        public string _id;
        public string title;
        public string forum;
        public string user;
    }

    class ForumTopicResponseInfo
    {
        public Topic topic;
        public string status;
    }

    class ForumTopicMsgsResponseInfo
    {
        public List<ForumTopicMsg> msgs;
        public string status;
    }

    class ForumTopicMsg
    {
        public string _id;
        public string content;
        public string topic;
        public DateTime date;
        public string user;
    }

    class NewsResponseInfo
    {
        public string status;
        public List<News> news;
    }

    class News
    {
        public string game;
        public string title;
        public string content;
        public DateTime date;
    }

    class GroupsResponseInfo
    {
        public List<Group> groups;
        public string status;
    }

    class GroupResponseInfo
    {
        public Group group;
        public string status;
    }

    class Group
    {
        public string _id;
        public string name;
        public string owner;
        public DateTime date;
        public string lang;
        public string country;
        public string fanPage;
        public string twitch;
        public string youtube;
    }

    class GroupRelationsResponseInfo
    {
        public List<GroupRelation> relations;
        public string status;
    }

    class GroupRelation
    {
        public string group;
        public string user;
    }

    class GroupRequestsResponseInfo
    {
        public List<GroupRequest> requests;
        public string status;
    }

    class GroupRequest
    {
        public string _id;
        public string group;
        public string user;
    }

    class CommentsResponseInfo
    {
        public string status;
        public List<Comment> comments;
    }

    class Comment
    {
        public string user;
        public string msg;
        public DateTime date;
    }

    class ManualsResponseInfo
    {
        public List<Manual> manuals;
        public string status;
    }

    class ManualResponseInfo
    {
        public Manual manual;
        public string status;
    }

    public class Manual : CommunityContent
    {
        public string _id;
        public string title;
        public string desc;
        public string user;
        public string categories;
        public string lang;
        public bool isDrm;
        public DateTime date;
        public string game;
        public int likes;
        public int dislikes;
        public int favorites;
    }

    class IllustrationsResponseInfo
    {
        public List<Illustration> illustrations;
        public string status;
    }

    class IllustrationResponseInfo
    {
        public Illustration illustration;
        public string status;
    }

    public class Illustration : CommunityContent
    {
        public string _id;
        public string title;
        public string desc;
        public string user;
        public bool isDrm;
        public DateTime date;
        public string game;
        public int likes;
        public string visibility;
    }

    class ScreenShotsResponseInfo
    {
        public List<ScreenShot> screenShots;
        public string status;
    }

    class ScreenShotResponseInfo
    {
        public ScreenShot screenShot;
        public string status;
    }

    public class ScreenShot : CommunityContent
    {
        public string _id;
        public DateTime date;
        public string game;
        public string user;
        public int likes;
        public string desc;
    }

    class BlackListRelationsResponseInfo
    {
        public List<BlackListRelation> relations;
        public string status;
    }

    class BlackListRelation
    {
        public string user;
        public string friend;
    }

    class ReviewsResponseInfo
    {
        public List<Review> reviews;
        public string status;
    }

    class ReviewResponseInfo
    {
        public Review review;
        public string status;
    }

    public class Review : CommunityContent
    {
        public string _id;
        public string game;
        public string user;
        public string desc;
        public string hours;
        public DateTime date;
        public int advices;
        public int funs;
        public bool isCommentsEnabled;
        public string visibility;
        public bool isFreeProduct;
    }

    class ExperimentsResponseInfo
    {
        public List<Experiment> experiments;
        public string status;
    }

    class ExperimentResponseInfo
    {
        public Experiment experiment;
        public string status;
    }
    
    class Experiment
    {
        public string _id;
        public string title;
        public string desc;
    }

    class IconsResponseInfo
    {
        public string status;
        public List<Icon> icons;
    }

    class IconResponseInfo
    {
        public string status;
        public Icon icon;
    }

    class Icon
    {
        public string _id;
        public string title;
        public string desc;
    }

    class IconRelationsResponseInfo
    {
        public string status;
        public List<IconRelation> relations;
    }

    class IconRelationResponseInfo
    {
        public string status;
        public IconRelation relation;
    }

    class IconRelation
    {
        public string icon;
        public string user;
        public string date;
    }

    class GameRelationsResponseInfo {
        public string status;
        public List<GameRelation> relations;
    }

    class GameRelation {
        public string game;
        public string user;
        public string hours;
    }

    class PointsStoreItemsResponseInfo
    {
        public string status;
        public List<PointsStoreItem> items;
    }

    class PointsStoreItemResponseInfo
    {
        public string status;
        public PointsStoreItem item;
    }

    class PointsStoreItem
    {
        public string _id;
        public string title;
        public string desc;
        public string type;
        public int price;
        public DateTime date;
    }

    class PointsStoreItemRelationsResponseInfo
    {
        public string status;
        public List<PointsStoreItemRelation> relations;
    }

    class PointsStoreItemRelationResponseInfo
    {
        public string status;
        public PointsStoreItemRelation relation;
    }

    class PointsStoreItemRelation
    {
        public string _id;
        public string item;
        public string user;
        public DateTime date;
    }
    
    class TalksResponseInfo
    {
        public List<Talk> talks;
        public string status;
    }

    class TalkResponseInfo
    {
        public Talk talk;
        public string status;
    }

    class Talk
    {
        public string _id;
        public string title;
        public string owner;
        public string slogan;
    }

    class TalkRelationsResponseInfo
    {
        public List<TalkRelation> relations;
        public string status;
    }

    class TalkRelationResponseInfo
    {
        public TalkRelation relation;
        public string status;
    }
    class TalkRelation
    {
        public string _id;
        public string talk;
        public string user;
        public bool isBlocked;
    }

    class TalkCreateResponseInfo
    {
        public string id;
        public string status;

    }

    class TalkChannelsResponseInfo
    {
        public string status;
        public List<TalkChannel> channels;
    }

    class TalkChannel
    {
        public string _id;
        public string title;
        public string talk;
    }

    class TalkRolesResponseInfo
    {
        public List<Role> roles;
        public string status;
    }

    class TalkRoleResponseInfo
    {
        public Role role;
        public string status;
    }

    class Role
    {
        public string _id;
        public string title;
        public string talk;
        public bool sendMsgs;
        public bool notifyAllUsers;
        public bool bindAndUnbindStreams;
        public bool kick;
        public bool block;
        public bool invite;
        public bool updateRoles;
        public bool assignRoles;
        public bool updateTalkTitleSloganAndAvatar;
        public bool createAndUpdateChannels;
        public bool isCustom;
    }

    public class TalkRoleRelationsResponseInfo
    {
        public string status;
        public List<TalkRoleRelation> relations;
    }

    public class TalkRoleRelation
    {
        public string _id;
        public string role;
        public string user;
        public string talk;
    }

    public class MsgReactionsResponseInfo
    {
        public string status;
        public List<MsgReaction> reactions;
    }

    public class MsgReaction
    {
        public string _id;
        public string msg;
        public string content;
    }

    public class UserNickNamesResponseInfo
    {
        public string status;
        public List<UserNickName> nicks;
    }

    public class UserNickName
    {
        public string _id;
        public string user;
        public string nick;
    }

    public class GameTagsResponseInfo
    {
        public string status;
        public List<GameTag> tags;
    }

    public class GameTag
    {
        public string _id;
        public string title;
    }

    public class GameTagRelationsResponseInfo
    {
        public string status;
        public List<GameTagRelation> relations;
    }

    public class GameTagRelation
    {
        public string _id;
        public string game;
        public string tag;
    }

    public class GameSessionsResponseInfo
    {
        public string status;
        public List<GameSession> sessions;
    }

    public class GameSession
    {
        public string _id;
        public string game;
        public string user;
        public DateTime date;
    }

    public class UserSubsResponseInfo
    {
        public string status;
        public List<UserSub> subs;
    }

    public class UserSub
    {
        public string _id;
        public string user;
        public string sub;
    }

    public class ReviewCommentsResponseInfo
    {
        public string status;
        public List<ReviewComment> comments;
    }

    public class ReviewComment
    {
        public string _id;
        public string review;
        public string user;
        public string content;
        public DateTime date;
    }

    public class ManualCommentsResponseInfo
    {
        public string status;
        public List<ManualComment> comments;
    }

    public class ManualComment
    {
        public string _id;
        public string manual;
        public string user;
        public string content;
        public DateTime date;
    }

    public class IllustrationCommentsResponseInfo
    {
        public string status;
        public List<IllustrationComment> comments;
    }

    public class IllustrationComment
    {
        public string _id;
        public string illustration;
        public string user;
        public string content;
        public DateTime date;
    }

    public class CommunityScreenShotCommentsResponseInfo
    {
        public string status;
        public List<CommunityScreenShotComment> comments;
    }

    public class CommunityScreenShotComment
    {
        public string _id;
        public string screenShot;
        public string user;
        public string content;
        public DateTime date;
    }

    public class ManualVisitsResponseInfo
    {
        public string status;
        public List<ManualVisit> visits;
    }

    public class ManualVisit
    {
        public string _id;
        public string manual;
        public string user;
    }

    class GameSessionComparer : IEqualityComparer<GameSession>
    {
        // Products are equal if their names and product numbers are equal.
        public bool Equals(GameSession x, GameSession y)
        {
            return x.user == y.user && x.game == y.game;
        }

        public int GetHashCode(GameSession obj)
        {
            return 0;
        }
    }

    public class ManualFavoriteRelationsResponseInfo
    {
        public List<ManualFavoriteRelation> relations;
        public string status;
    }

    public class ManualFavoriteRelation
    {
        public string user;
        public string manual;
    }

    public class IllustrationFavoriteRelationsResponseInfo
    {
        public List<IllustrationFavoriteRelation> relations;
        public string status;
    }

    public class IllustrationFavoriteRelation
    {
        public string user;
        public string illustration;
    }

    public class ScreenShotFavoriteRelationsResponseInfo
    {
        public List<ScreenShotFavoriteRelation> relations;
        public string status;
    }

    public class ScreenShotFavoriteRelation
    {
        public string user;
        public string screenShot;
    }

    public class ReviewAdviceComparer : IComparer<Review>
    {
        public int Compare (Review x, Review y)
        {
            int xAdvices = x.advices;
            int yAdvices = y.advices;
            return xAdvices.CompareTo(yAdvices);
        }
    }

    public class ReviewDateComparer : IComparer<Review>
    {
        public int Compare(Review x, Review y)
        {
            DateTime xDate = x.date;
            DateTime yDate = y.date;
            DateTimeOffset xDateTime = new DateTimeOffset(xDate);
            DateTimeOffset yDateTime = new DateTimeOffset(yDate);
            long xUnixTimeMilliseconds = xDateTime.ToUnixTimeMilliseconds();
            long yUnixTimeMilliseconds = yDateTime.ToUnixTimeMilliseconds();
            // return xDate.CompareTo(yDate);
            return xUnixTimeMilliseconds.CompareTo(yUnixTimeMilliseconds);
        }
    }

    public class ManualLikeComparer : IComparer<Manual>
    {
        public int Compare(Manual x, Manual y)
        {
            int xLikes = x.likes;
            int yLikes = y.likes;
            return xLikes.CompareTo(yLikes);
        }
    }

    public class ManualDateComparer : IComparer<Manual>
    {
        public int Compare(Manual x, Manual y)
        {
            DateTime xDate = x.date;
            DateTime yDate = y.date;
            DateTimeOffset xDateTime = new DateTimeOffset(xDate);
            DateTimeOffset yDateTime = new DateTimeOffset(yDate);
            long xUnixTimeMilliseconds = xDateTime.ToUnixTimeMilliseconds();
            long yUnixTimeMilliseconds = yDateTime.ToUnixTimeMilliseconds();
            // return xDate.CompareTo(yDate);
            return xUnixTimeMilliseconds.CompareTo(yUnixTimeMilliseconds);
        }
    }

    public class WorkShopItemLikesComparer : IComparer<int>
    {
        public int Compare(int x, int y)
        {
            return 1;
        }
    }

    public class WorkShopItemDateComparer : IComparer<int>
    {
        public int Compare(int x, int y)
        {
            return 1;
        }
    }

    public class VideoLikesComparer : IComparer<int>
    {
        public int Compare(int x, int y)
        {
            return 1;
        }
    }

    public class VideoDateComparer : IComparer<int>
    {
        public int Compare (int x, int y)
        {
            return 1;
        }
    }

    public class IllustrationLikesComparer : IComparer<Illustration>
    {
        public int Compare (Illustration x, Illustration y)
        {
            int xLikes = x.likes;
            int yLikes = y.likes;
            return xLikes.CompareTo(yLikes);
        }
    }

    public class IllustrationDateComparer : IComparer<Illustration>
    {
        public int Compare(Illustration x, Illustration y)
        {
            DateTime xDate = x.date;
            DateTime yDate = y.date;
            DateTimeOffset xDateTime = new DateTimeOffset(xDate);
            DateTimeOffset yDateTime = new DateTimeOffset(yDate);
            long xUnixTimeMilliseconds = xDateTime.ToUnixTimeMilliseconds();
            long yUnixTimeMilliseconds = yDateTime.ToUnixTimeMilliseconds();
            // return xDate.CompareTo(yDate);
            return xUnixTimeMilliseconds.CompareTo(yUnixTimeMilliseconds);
        }
    }

    public class ScreenShotLikesComparer : IComparer<ScreenShot>
    {
        public int Compare (ScreenShot x, ScreenShot y)
        {
            int xLikes = x.likes;
            int yLikes = y.likes;
            return xLikes.CompareTo(yLikes);
        }
    }

    public class ScreenShotDateComparer : IComparer<ScreenShot>
    {
        public int Compare(ScreenShot x, ScreenShot y)
        {
            DateTime xDate = x.date;
            DateTime yDate = y.date;
            DateTimeOffset xDateTime = new DateTimeOffset(xDate);
            DateTimeOffset yDateTime = new DateTimeOffset(yDate);
            long xUnixTimeMilliseconds = xDateTime.ToUnixTimeMilliseconds();
            long yUnixTimeMilliseconds = yDateTime.ToUnixTimeMilliseconds();
            // return xDate.CompareTo(yDate);
            return xUnixTimeMilliseconds.CompareTo(yUnixTimeMilliseconds);
        }
    }

    public class CommunityContentLikeComparer
    {
        public int Compare (CommunityContent x, CommunityContent y)
        {
            int xLikes = 0;
            if (x is Review)
            {
                Review xReview = x as Review;
                xLikes = xReview.advices;
            }
            else if (x is Manual)
            {
                Manual xManual = x as Manual;
                xLikes = xManual.likes;
            }
            else if (x is Illustration)
            {
                Illustration xIllustration = x as Illustration;
                xLikes = xIllustration.likes;
            }
            else if (x is ScreenShot)
            {
                ScreenShot xScreenShot = x as ScreenShot;
                xLikes = xScreenShot.likes;
            }
            int yLikes = 0;
            if (y is Review)
            {
                Review yReview = y as Review;
                yLikes = yReview.advices;
            }
            else if (y is Manual)
            {
                Manual yManual = y as Manual;
                yLikes = yManual.likes;
            }
            else if (y is Illustration)
            {
                Illustration yIllustration = y as Illustration;
                yLikes = yIllustration.likes;
            }
            else if (y is ScreenShot)
            {
                ScreenShot yScreenShot = y as ScreenShot;
                yLikes = yScreenShot.likes;
            }
            return xLikes.CompareTo(yLikes);
        }
    }

    public class CommunityContentDateComparer
    {
        public int Compare(CommunityContent x, CommunityContent y)
        {
            DateTime xDate = DateTime.Now;
            DateTime yDate = DateTime.Now;
            if (x is Review)
            {
                Review xReview = x as Review;
                xDate = xReview.date;
            }
            else if (x is Manual)
            {
                Manual xManual = x as Manual;
                xDate = xManual.date;
            }
            else if (x is Illustration)
            {
                Illustration xIllustration = x as Illustration;
                xDate = xIllustration.date;
            }
            else if (x is ScreenShot)
            {
                ScreenShot xScreenShot = x as ScreenShot;
                xDate = xScreenShot.date;
            }
            if (y is Review)
            {
                Review yReview = y as Review;
                yDate = yReview.date;
            }
            else if (y is Manual)
            {
                Manual yManual = y as Manual;
                yDate = yManual.date;
            }
            else if (y is Illustration)
            {
                Illustration yIllustration = y as Illustration;
                yDate = yIllustration.date;
            }
            else if (y is ScreenShot)
            {
                ScreenShot yScreenShot = y as ScreenShot;
                yDate = yScreenShot.date;
            }
            DateTimeOffset xDateTime = new DateTimeOffset(xDate);
            DateTimeOffset yDateTime = new DateTimeOffset(yDate);
            long xUnixTimeMilliseconds = xDateTime.ToUnixTimeMilliseconds();
            long yUnixTimeMilliseconds = yDateTime.ToUnixTimeMilliseconds();
            // return xDate.CompareTo(yDate);
            return xUnixTimeMilliseconds.CompareTo(yUnixTimeMilliseconds);
        }
 
    }

    public class CommunityContent
    {
        public UIElement body;
    }

    public class CreateGroupResponseInfo
    {
        public string status;
        public string id;
    }

    public class ActivitiesResponseInfo
    {
        public List<Activity> activities;
        public string status;
    }

    public class Activity
    {
        public string user;
        public string content;
        public string data;
    }

    public class CreateScreenShotResponseInfo
    {
        public string status;
        public string id;
    }

    public class CreateReviewResponseInfo
    {
        public string status;
        public string id;
    }

    public class PurchasesResponseInfo
    {
        public List<Purchase> purchases;
        public string status;
    }

    public class Purchase
    {
        public string _id;
        public string user;
        public int price;
        public int balance;
        public string type;
        public string msg;
        public DateTime date;
    }

}